{"ast":null,"code":"// MySQL Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\nclass SchemaCompiler_MSSQL extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n  dropTableIfExists(tableName) {\n    const name = this.formatter.wrap(prefixedTableName(this.schema, tableName));\n    this.pushQuery(`if object_id('${name}', 'U') is not null DROP TABLE ${name}`);\n  }\n  dropViewIfExists(viewName) {\n    const name = this.formatter.wrap(prefixedTableName(this.schema, viewName));\n    this.pushQuery(`if object_id('${name}', 'V') is not null DROP VIEW ${name}`);\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    this.pushQuery(`exec sp_rename ${this.client.parameter(prefixedTableName(this.schema, tableName), this.builder, this.bindingsHolder)}, ${this.client.parameter(to, this.builder, this.bindingsHolder)}`);\n  }\n  renameView(viewTable, to) {\n    this.pushQuery(`exec sp_rename ${this.client.parameter(prefixedTableName(this.schema, viewTable), this.builder, this.bindingsHolder)}, ${this.client.parameter(to, this.builder, this.bindingsHolder)}`);\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    const formattedTable = this.client.parameter(prefixedTableName(this.schema, tableName), this.builder, this.bindingsHolder);\n    const bindings = [tableName];\n    let sql = `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES ` + `WHERE TABLE_NAME = ${formattedTable}`;\n    if (this.schema) {\n      sql += ' AND TABLE_SCHEMA = ?';\n      bindings.push(this.schema);\n    }\n    this.pushQuery({\n      sql,\n      bindings,\n      output: resp => resp.length > 0\n    });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    const formattedColumn = this.client.parameter(column, this.builder, this.bindingsHolder);\n    const formattedTable = this.client.parameter(this.formatter.wrap(prefixedTableName(this.schema, tableName)), this.builder, this.bindingsHolder);\n    const sql = `select object_id from sys.columns ` + `where name = ${formattedColumn} ` + `and object_id = object_id(${formattedTable})`;\n    this.pushQuery({\n      sql,\n      output: resp => resp.length > 0\n    });\n  }\n}\nSchemaCompiler_MSSQL.prototype.dropTablePrefix = 'DROP TABLE ';\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\nmodule.exports = SchemaCompiler_MSSQL;","map":{"version":3,"names":["SchemaCompiler","require","SchemaCompiler_MSSQL","constructor","client","builder","dropTableIfExists","tableName","name","formatter","wrap","prefixedTableName","schema","pushQuery","dropViewIfExists","viewName","renameTable","to","parameter","bindingsHolder","renameView","viewTable","hasTable","formattedTable","bindings","sql","push","output","resp","length","hasColumn","column","formattedColumn","prototype","dropTablePrefix","prefix","table","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/mssql/schema/mssql-compiler.js"],"sourcesContent":["// MySQL Schema Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nclass SchemaCompiler_MSSQL extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n\n  dropTableIfExists(tableName) {\n    const name = this.formatter.wrap(prefixedTableName(this.schema, tableName));\n    this.pushQuery(\n      `if object_id('${name}', 'U') is not null DROP TABLE ${name}`\n    );\n  }\n\n  dropViewIfExists(viewName) {\n    const name = this.formatter.wrap(prefixedTableName(this.schema, viewName));\n    this.pushQuery(\n      `if object_id('${name}', 'V') is not null DROP VIEW ${name}`\n    );\n  }\n\n  // Rename a table on the schema.\n  renameTable(tableName, to) {\n    this.pushQuery(\n      `exec sp_rename ${this.client.parameter(\n        prefixedTableName(this.schema, tableName),\n        this.builder,\n        this.bindingsHolder\n      )}, ${this.client.parameter(to, this.builder, this.bindingsHolder)}`\n    );\n  }\n\n  renameView(viewTable, to) {\n    this.pushQuery(\n      `exec sp_rename ${this.client.parameter(\n        prefixedTableName(this.schema, viewTable),\n        this.builder,\n        this.bindingsHolder\n      )}, ${this.client.parameter(to, this.builder, this.bindingsHolder)}`\n    );\n  }\n\n  // Check whether a table exists on the query.\n  hasTable(tableName) {\n    const formattedTable = this.client.parameter(\n      prefixedTableName(this.schema, tableName),\n      this.builder,\n      this.bindingsHolder\n    );\n    const bindings = [tableName];\n    let sql =\n      `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES ` +\n      `WHERE TABLE_NAME = ${formattedTable}`;\n\n    if (this.schema) {\n      sql += ' AND TABLE_SCHEMA = ?';\n      bindings.push(this.schema);\n    }\n\n    this.pushQuery({ sql, bindings, output: (resp) => resp.length > 0 });\n  }\n\n  // Check whether a column exists on the schema.\n  hasColumn(tableName, column) {\n    const formattedColumn = this.client.parameter(\n      column,\n      this.builder,\n      this.bindingsHolder\n    );\n    const formattedTable = this.client.parameter(\n      this.formatter.wrap(prefixedTableName(this.schema, tableName)),\n      this.builder,\n      this.bindingsHolder\n    );\n    const sql =\n      `select object_id from sys.columns ` +\n      `where name = ${formattedColumn} ` +\n      `and object_id = object_id(${formattedTable})`;\n    this.pushQuery({ sql, output: (resp) => resp.length > 0 });\n  }\n}\n\nSchemaCompiler_MSSQL.prototype.dropTablePrefix = 'DROP TABLE ';\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\n\nmodule.exports = SchemaCompiler_MSSQL;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}