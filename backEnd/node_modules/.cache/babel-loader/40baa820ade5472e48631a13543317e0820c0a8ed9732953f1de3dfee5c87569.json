{"ast":null,"code":"const extend = require('lodash/extend');\nconst assign = require('lodash/assign');\nconst toArray = require('lodash/toArray');\nconst {\n  addQueryContext\n} = require('../util/helpers');\n\n// The chainable interface off the original \"column\" method.\nclass ColumnBuilder {\n  constructor(client, tableBuilder, type, args) {\n    this.client = client;\n    this._method = 'add';\n    this._single = {};\n    this._modifiers = {};\n    this._statements = [];\n    this._type = columnAlias[type] || type;\n    this._args = args;\n    this._tableBuilder = tableBuilder;\n\n    // If we're altering the table, extend the object\n    // with the available \"alter\" methods.\n    if (tableBuilder._method === 'alter') {\n      extend(this, AlterMethods);\n    }\n  }\n\n  // Specify that the current column \"references\" a column,\n  // which may be tableName.column or just \"column\"\n  references(value) {\n    return this._tableBuilder.foreign.call(this._tableBuilder, this._args[0], undefined, this)._columnBuilder(this).references(value);\n  }\n}\n\n// All of the modifier methods that can be used to modify the current query.\nconst modifiers = ['default', 'defaultsTo', 'defaultTo', 'unsigned', 'nullable', 'first', 'after', 'comment', 'collate', 'check', 'checkPositive', 'checkNegative', 'checkIn', 'checkNotIn', 'checkBetween', 'checkLength', 'checkRegex'];\n\n// Aliases for convenience.\nconst aliasMethod = {\n  default: 'defaultTo',\n  defaultsTo: 'defaultTo'\n};\n\n// If we call any of the modifiers (index or otherwise) on the chainable, we pretend\n// as though we're calling `table.method(column)` directly.\nmodifiers.forEach(function (method) {\n  const key = aliasMethod[method] || method;\n  ColumnBuilder.prototype[method] = function () {\n    this._modifiers[key] = toArray(arguments);\n    return this;\n  };\n});\naddQueryContext(ColumnBuilder);\nColumnBuilder.prototype.notNull = ColumnBuilder.prototype.notNullable = function notNullable() {\n  return this.nullable(false);\n};\n['index', 'primary', 'unique'].forEach(function (method) {\n  ColumnBuilder.prototype[method] = function () {\n    if (this._type.toLowerCase().indexOf('increments') === -1) {\n      this._tableBuilder[method].apply(this._tableBuilder, [this._args[0]].concat(toArray(arguments)));\n    }\n    return this;\n  };\n});\nColumnBuilder.extend = (methodName, fn) => {\n  if (Object.prototype.hasOwnProperty.call(ColumnBuilder.prototype, methodName)) {\n    throw new Error(`Can't extend ColumnBuilder with existing method ('${methodName}').`);\n  }\n  assign(ColumnBuilder.prototype, {\n    [methodName]: fn\n  });\n};\nconst AlterMethods = {};\n\n// Specify that the column is to be dropped. This takes precedence\n// over all other rules for the column.\nAlterMethods.drop = function () {\n  this._single.drop = true;\n  return this;\n};\n\n// Specify the \"type\" that we're looking to set the\n// Knex takes no responsibility for any data-loss that may\n// occur when changing data types.\nAlterMethods.alterType = function (type) {\n  this._statements.push({\n    grouping: 'alterType',\n    value: type\n  });\n  return this;\n};\n\n// Set column method to alter (default is add).\nAlterMethods.alter = function ({\n  alterNullable = true,\n  alterType = true\n} = {}) {\n  this._method = 'alter';\n  this.alterNullable = alterNullable;\n  this.alterType = alterType;\n  return this;\n};\n\n// Alias a few methods for clarity when processing.\nconst columnAlias = {\n  float: 'floating',\n  enum: 'enu',\n  boolean: 'bool',\n  string: 'varchar',\n  bigint: 'bigInteger'\n};\nmodule.exports = ColumnBuilder;","map":{"version":3,"names":["extend","require","assign","toArray","addQueryContext","ColumnBuilder","constructor","client","tableBuilder","type","args","_method","_single","_modifiers","_statements","_type","columnAlias","_args","_tableBuilder","AlterMethods","references","value","foreign","call","undefined","_columnBuilder","modifiers","aliasMethod","default","defaultsTo","forEach","method","key","prototype","arguments","notNull","notNullable","nullable","toLowerCase","indexOf","apply","concat","methodName","fn","Object","hasOwnProperty","Error","drop","alterType","push","grouping","alter","alterNullable","float","enum","boolean","string","bigint","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/schema/columnbuilder.js"],"sourcesContent":["const extend = require('lodash/extend');\nconst assign = require('lodash/assign');\nconst toArray = require('lodash/toArray');\nconst { addQueryContext } = require('../util/helpers');\n\n// The chainable interface off the original \"column\" method.\nclass ColumnBuilder {\n  constructor(client, tableBuilder, type, args) {\n    this.client = client;\n    this._method = 'add';\n    this._single = {};\n    this._modifiers = {};\n    this._statements = [];\n    this._type = columnAlias[type] || type;\n    this._args = args;\n    this._tableBuilder = tableBuilder;\n\n    // If we're altering the table, extend the object\n    // with the available \"alter\" methods.\n    if (tableBuilder._method === 'alter') {\n      extend(this, AlterMethods);\n    }\n  }\n\n  // Specify that the current column \"references\" a column,\n  // which may be tableName.column or just \"column\"\n  references(value) {\n    return this._tableBuilder.foreign\n      .call(this._tableBuilder, this._args[0], undefined, this)\n      ._columnBuilder(this)\n      .references(value);\n  }\n}\n\n// All of the modifier methods that can be used to modify the current query.\nconst modifiers = [\n  'default',\n  'defaultsTo',\n  'defaultTo',\n  'unsigned',\n  'nullable',\n  'first',\n  'after',\n  'comment',\n  'collate',\n  'check',\n  'checkPositive',\n  'checkNegative',\n  'checkIn',\n  'checkNotIn',\n  'checkBetween',\n  'checkLength',\n  'checkRegex',\n];\n\n// Aliases for convenience.\nconst aliasMethod = {\n  default: 'defaultTo',\n  defaultsTo: 'defaultTo',\n};\n\n// If we call any of the modifiers (index or otherwise) on the chainable, we pretend\n// as though we're calling `table.method(column)` directly.\nmodifiers.forEach(function (method) {\n  const key = aliasMethod[method] || method;\n  ColumnBuilder.prototype[method] = function () {\n    this._modifiers[key] = toArray(arguments);\n    return this;\n  };\n});\n\naddQueryContext(ColumnBuilder);\n\nColumnBuilder.prototype.notNull = ColumnBuilder.prototype.notNullable =\n  function notNullable() {\n    return this.nullable(false);\n  };\n\n['index', 'primary', 'unique'].forEach(function (method) {\n  ColumnBuilder.prototype[method] = function () {\n    if (this._type.toLowerCase().indexOf('increments') === -1) {\n      this._tableBuilder[method].apply(\n        this._tableBuilder,\n        [this._args[0]].concat(toArray(arguments))\n      );\n    }\n    return this;\n  };\n});\n\nColumnBuilder.extend = (methodName, fn) => {\n  if (\n    Object.prototype.hasOwnProperty.call(ColumnBuilder.prototype, methodName)\n  ) {\n    throw new Error(\n      `Can't extend ColumnBuilder with existing method ('${methodName}').`\n    );\n  }\n\n  assign(ColumnBuilder.prototype, { [methodName]: fn });\n};\n\nconst AlterMethods = {};\n\n// Specify that the column is to be dropped. This takes precedence\n// over all other rules for the column.\nAlterMethods.drop = function () {\n  this._single.drop = true;\n\n  return this;\n};\n\n// Specify the \"type\" that we're looking to set the\n// Knex takes no responsibility for any data-loss that may\n// occur when changing data types.\nAlterMethods.alterType = function (type) {\n  this._statements.push({\n    grouping: 'alterType',\n    value: type,\n  });\n\n  return this;\n};\n\n// Set column method to alter (default is add).\nAlterMethods.alter = function ({\n  alterNullable = true,\n  alterType = true,\n} = {}) {\n  this._method = 'alter';\n  this.alterNullable = alterNullable;\n  this.alterType = alterType;\n\n  return this;\n};\n\n// Alias a few methods for clarity when processing.\nconst columnAlias = {\n  float: 'floating',\n  enum: 'enu',\n  boolean: 'bool',\n  string: 'varchar',\n  bigint: 'bigInteger',\n};\n\nmodule.exports = ColumnBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}