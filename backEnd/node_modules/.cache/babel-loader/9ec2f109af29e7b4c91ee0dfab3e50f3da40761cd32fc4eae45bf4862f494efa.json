{"ast":null,"code":"const {\n  parse\n} = require('pg-connection-string');\nconst parsePG = parse;\nconst isWindows = process && process.platform && process.platform === 'win32';\n\n/**\n * @param str\n * @returns {URL}\n */\nfunction tryParse(str) {\n  try {\n    return new URL(str);\n  } catch (e) {\n    return null;\n  }\n}\nmodule.exports = function parseConnectionString(str) {\n  const parsed = tryParse(str);\n  const isDriveLetter = isWindows && parsed && parsed.protocol.length === 2;\n  if (!parsed || isDriveLetter) {\n    return {\n      client: 'sqlite3',\n      connection: {\n        filename: str\n      }\n    };\n  }\n  let {\n    protocol\n  } = parsed;\n  if (protocol.slice(-1) === ':') {\n    protocol = protocol.slice(0, -1);\n  }\n  const isPG = ['postgresql', 'postgres'].includes(protocol);\n  return {\n    client: protocol,\n    connection: isPG ? parsePG(str) : connectionObject(parsed)\n  };\n};\n\n/**\n * @param {URL} parsed\n * @returns {{}}\n */\nfunction connectionObject(parsed) {\n  const connection = {};\n  let db = parsed.pathname;\n  if (db[0] === '/') {\n    db = db.slice(1);\n  }\n  connection.database = db;\n  if (parsed.hostname) {\n    if (parsed.protocol.indexOf('mssql') === 0) {\n      connection.server = parsed.hostname;\n    } else {\n      connection.host = parsed.hostname;\n    }\n  }\n  if (parsed.port) {\n    connection.port = parsed.port;\n  }\n  if (parsed.username || parsed.password) {\n    connection.user = decodeURIComponent(parsed.username);\n  }\n  if (parsed.password) {\n    connection.password = decodeURIComponent(parsed.password);\n  }\n  if (parsed.searchParams) {\n    for (const [key, value] of parsed.searchParams.entries()) {\n      const isNestedConfigSupported = ['mysql:', 'mariadb:', 'mssql:'].includes(parsed.protocol);\n      if (isNestedConfigSupported) {\n        try {\n          connection[key] = JSON.parse(value);\n        } catch (err) {\n          connection[key] = value;\n        }\n      } else {\n        connection[key] = value;\n      }\n    }\n  }\n  return connection;\n}","map":{"version":3,"names":["parse","require","parsePG","isWindows","process","platform","tryParse","str","URL","e","module","exports","parseConnectionString","parsed","isDriveLetter","protocol","length","client","connection","filename","slice","isPG","includes","connectionObject","db","pathname","database","hostname","indexOf","server","host","port","username","password","user","decodeURIComponent","searchParams","key","value","entries","isNestedConfigSupported","JSON","err"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/knex-builder/internal/parse-connection.js"],"sourcesContent":["const { parse } = require('pg-connection-string');\nconst parsePG = parse;\nconst isWindows = process && process.platform && process.platform === 'win32';\n\n/**\n * @param str\n * @returns {URL}\n */\nfunction tryParse(str) {\n  try {\n    return new URL(str);\n  } catch (e) {\n    return null;\n  }\n}\n\nmodule.exports = function parseConnectionString(str) {\n  const parsed = tryParse(str);\n  const isDriveLetter = isWindows && parsed && parsed.protocol.length === 2;\n  if (!parsed || isDriveLetter) {\n    return {\n      client: 'sqlite3',\n      connection: {\n        filename: str,\n      },\n    };\n  }\n  let { protocol } = parsed;\n  if (protocol.slice(-1) === ':') {\n    protocol = protocol.slice(0, -1);\n  }\n\n  const isPG = ['postgresql', 'postgres'].includes(protocol);\n\n  return {\n    client: protocol,\n    connection: isPG ? parsePG(str) : connectionObject(parsed),\n  };\n};\n\n/**\n * @param {URL} parsed\n * @returns {{}}\n */\nfunction connectionObject(parsed) {\n  const connection = {};\n  let db = parsed.pathname;\n  if (db[0] === '/') {\n    db = db.slice(1);\n  }\n\n  connection.database = db;\n\n  if (parsed.hostname) {\n    if (parsed.protocol.indexOf('mssql') === 0) {\n      connection.server = parsed.hostname;\n    } else {\n      connection.host = parsed.hostname;\n    }\n  }\n  if (parsed.port) {\n    connection.port = parsed.port;\n  }\n  if (parsed.username || parsed.password) {\n    connection.user = decodeURIComponent(parsed.username);\n  }\n  if (parsed.password) {\n    connection.password = decodeURIComponent(parsed.password);\n  }\n  if (parsed.searchParams) {\n    for (const [key, value] of parsed.searchParams.entries()) {\n      const isNestedConfigSupported = ['mysql:', 'mariadb:', 'mssql:'].includes(\n        parsed.protocol\n      );\n      if (isNestedConfigSupported) {\n        try {\n          connection[key] = JSON.parse(value);\n        } catch (err) {\n          connection[key] = value;\n        }\n      } else {\n        connection[key] = value;\n      }\n    }\n  }\n  return connection;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}