{"ast":null,"code":"const clone = require('lodash/clone');\nconst isEmpty = require('lodash/isEmpty');\nconst {\n  callbackify\n} = require('util');\nconst finallyMixin = require('./util/finally-mixin');\nconst {\n  formatQuery\n} = require('./execution/internal/query-executioner');\nfunction augmentWithBuilderInterface(Target) {\n  Target.prototype.toQuery = function (tz) {\n    let data = this.toSQL(this._method, tz);\n    if (!Array.isArray(data)) data = [data];\n    if (!data.length) {\n      return '';\n    }\n    return data.map(statement => {\n      return formatQuery(statement.sql, statement.bindings, tz, this.client);\n    }).reduce((a, c) => a.concat(a.endsWith(';') ? '\\n' : ';\\n', c));\n  };\n\n  // Create a new instance of the `Runner`, passing in the current object.\n  Target.prototype.then = function /* onFulfilled, onRejected */\n  () {\n    let result = this.client.runner(this).run();\n    if (this.client.config.asyncStackTraces) {\n      result = result.catch(err => {\n        err.originalStack = err.stack;\n        const firstLine = err.stack.split('\\n')[0];\n\n        // a hack to get a callstack into the client code despite this\n        // node.js bug https://github.com/nodejs/node/issues/11865\n        // see lib/util/save-async-stack.js for more details\n        const {\n          error,\n          lines\n        } = this._asyncStack;\n        const stackByLines = error.stack.split('\\n');\n        const asyncStack = stackByLines.slice(lines);\n        asyncStack.unshift(firstLine);\n\n        // put the fake more helpful \"async\" stack on the thrown error\n        err.stack = asyncStack.join('\\n');\n        throw err;\n      });\n    }\n    return result.then.apply(result, arguments);\n  };\n\n  // Add additional \"options\" to the builder. Typically used for client specific\n  // items, like the `mysql` and `sqlite3` drivers.\n  Target.prototype.options = function (opts) {\n    this._options = this._options || [];\n    this._options.push(clone(opts) || {});\n    return this;\n  };\n\n  // Sets an explicit \"connection\" we wish to use for this query.\n  Target.prototype.connection = function (connection) {\n    this._connection = connection;\n    this.client.processPassedConnection(connection);\n    return this;\n  };\n\n  // Set a debug flag for the current schema query stack.\n  Target.prototype.debug = function (enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  };\n\n  // Set the transaction object for this query.\n  Target.prototype.transacting = function (transaction) {\n    if (transaction && transaction.client) {\n      if (!transaction.client.transacting) {\n        transaction.client.logger.warn(`Invalid transaction value: ${transaction.client}`);\n      } else {\n        this.client = transaction.client;\n      }\n    }\n    if (isEmpty(transaction)) {\n      this.client.logger.error('Invalid value on transacting call, potential bug');\n      throw Error('Invalid transacting value (null, undefined or empty object)');\n    }\n    return this;\n  };\n\n  // Initializes a stream.\n  Target.prototype.stream = function (options) {\n    return this.client.runner(this).stream(options);\n  };\n\n  // Initialize a stream & pipe automatically.\n  Target.prototype.pipe = function (writable, options) {\n    return this.client.runner(this).pipe(writable, options);\n  };\n  Target.prototype.asCallback = function (cb) {\n    const promise = this.then();\n    callbackify(() => promise)(cb);\n    return promise;\n  };\n  Target.prototype.catch = function (onReject) {\n    return this.then().catch(onReject);\n  };\n  Object.defineProperty(Target.prototype, Symbol.toStringTag, {\n    get: () => 'object'\n  });\n  finallyMixin(Target.prototype);\n}\nmodule.exports = {\n  augmentWithBuilderInterface\n};","map":{"version":3,"names":["clone","require","isEmpty","callbackify","finallyMixin","formatQuery","augmentWithBuilderInterface","Target","prototype","toQuery","tz","data","toSQL","_method","Array","isArray","length","map","statement","sql","bindings","client","reduce","a","c","concat","endsWith","then","result","runner","run","config","asyncStackTraces","catch","err","originalStack","stack","firstLine","split","error","lines","_asyncStack","stackByLines","asyncStack","slice","unshift","join","apply","arguments","options","opts","_options","push","connection","_connection","processPassedConnection","debug","enabled","_debug","transacting","transaction","logger","warn","Error","stream","pipe","writable","asCallback","cb","promise","onReject","Object","defineProperty","Symbol","toStringTag","get","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/builder-interface-augmenter.js"],"sourcesContent":["const clone = require('lodash/clone');\nconst isEmpty = require('lodash/isEmpty');\nconst { callbackify } = require('util');\nconst finallyMixin = require('./util/finally-mixin');\nconst { formatQuery } = require('./execution/internal/query-executioner');\n\nfunction augmentWithBuilderInterface(Target) {\n  Target.prototype.toQuery = function (tz) {\n    let data = this.toSQL(this._method, tz);\n    if (!Array.isArray(data)) data = [data];\n    if (!data.length) {\n      return '';\n    }\n\n    return data\n      .map((statement) => {\n        return formatQuery(statement.sql, statement.bindings, tz, this.client);\n      })\n      .reduce((a, c) => a.concat(a.endsWith(';') ? '\\n' : ';\\n', c));\n  };\n\n  // Create a new instance of the `Runner`, passing in the current object.\n  Target.prototype.then = function (/* onFulfilled, onRejected */) {\n    let result = this.client.runner(this).run();\n\n    if (this.client.config.asyncStackTraces) {\n      result = result.catch((err) => {\n        err.originalStack = err.stack;\n        const firstLine = err.stack.split('\\n')[0];\n\n        // a hack to get a callstack into the client code despite this\n        // node.js bug https://github.com/nodejs/node/issues/11865\n        // see lib/util/save-async-stack.js for more details\n        const { error, lines } = this._asyncStack;\n        const stackByLines = error.stack.split('\\n');\n        const asyncStack = stackByLines.slice(lines);\n        asyncStack.unshift(firstLine);\n\n        // put the fake more helpful \"async\" stack on the thrown error\n        err.stack = asyncStack.join('\\n');\n        throw err;\n      });\n    }\n\n    return result.then.apply(result, arguments);\n  };\n\n  // Add additional \"options\" to the builder. Typically used for client specific\n  // items, like the `mysql` and `sqlite3` drivers.\n  Target.prototype.options = function (opts) {\n    this._options = this._options || [];\n    this._options.push(clone(opts) || {});\n    return this;\n  };\n\n  // Sets an explicit \"connection\" we wish to use for this query.\n  Target.prototype.connection = function (connection) {\n    this._connection = connection;\n    this.client.processPassedConnection(connection);\n    return this;\n  };\n\n  // Set a debug flag for the current schema query stack.\n  Target.prototype.debug = function (enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  };\n\n  // Set the transaction object for this query.\n  Target.prototype.transacting = function (transaction) {\n    if (transaction && transaction.client) {\n      if (!transaction.client.transacting) {\n        transaction.client.logger.warn(\n          `Invalid transaction value: ${transaction.client}`\n        );\n      } else {\n        this.client = transaction.client;\n      }\n    }\n    if (isEmpty(transaction)) {\n      this.client.logger.error(\n        'Invalid value on transacting call, potential bug'\n      );\n      throw Error(\n        'Invalid transacting value (null, undefined or empty object)'\n      );\n    }\n    return this;\n  };\n\n  // Initializes a stream.\n  Target.prototype.stream = function (options) {\n    return this.client.runner(this).stream(options);\n  };\n\n  // Initialize a stream & pipe automatically.\n  Target.prototype.pipe = function (writable, options) {\n    return this.client.runner(this).pipe(writable, options);\n  };\n\n  Target.prototype.asCallback = function (cb) {\n    const promise = this.then();\n    callbackify(() => promise)(cb);\n    return promise;\n  };\n\n  Target.prototype.catch = function (onReject) {\n    return this.then().catch(onReject);\n  };\n\n  Object.defineProperty(Target.prototype, Symbol.toStringTag, {\n    get: () => 'object',\n  });\n\n  finallyMixin(Target.prototype);\n}\n\nmodule.exports = {\n  augmentWithBuilderInterface,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}