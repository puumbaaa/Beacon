{"ast":null,"code":"/* eslint max-len: 0 */\n\n// PostgreSQL Table Builder & Compiler\n// -------\n\nconst has = require('lodash/has');\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst {\n  isObject,\n  isString\n} = require('../../../util/is');\nclass TableCompiler_PG extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  // Compile a rename column command.\n  renameColumn(from, to) {\n    return this.pushQuery({\n      sql: `alter table ${this.tableName()} rename ${this.formatter.wrap(from)} to ${this.formatter.wrap(to)}`\n    });\n  }\n  _setNullableState(column, isNullable) {\n    const constraintAction = isNullable ? 'drop not null' : 'set not null';\n    const sql = `alter table ${this.tableName()} alter column ${this.formatter.wrap(column)} ${constraintAction}`;\n    return this.pushQuery({\n      sql: sql\n    });\n  }\n  compileAdd(builder) {\n    const table = this.formatter.wrap(builder);\n    const columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: `alter table ${table} ${columns.join(', ')}`\n    });\n  }\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot, like) {\n    const createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n    const columnsSql = ` (${columns.sql.join(', ')}${this.primaryKeys() || ''}${this._addChecks()})`;\n    let sql = createStatement + this.tableName() + (like && this.tableNameLike() ? ' (like ' + this.tableNameLike() + ' including all' + (columns.sql.length ? ', ' + columns.sql.join(', ') : '') + ')' : columnsSql);\n    if (this.single.inherits) sql += ` inherits (${this.formatter.wrap(this.single.inherits)})`;\n    this.pushQuery({\n      sql,\n      bindings: columns.bindings\n    });\n    const hasComment = has(this.single, 'comment');\n    if (hasComment) this.comment(this.single.comment);\n  }\n  primaryKeys() {\n    const pks = (this.grouped.alterTable || []).filter(k => k.method === 'primary');\n    if (pks.length > 0 && pks[0].args.length > 0) {\n      const columns = pks[0].args[0];\n      let constraintName = pks[0].args[1] || '';\n      let deferrable;\n      if (isObject(constraintName)) {\n        ({\n          constraintName,\n          deferrable\n        } = constraintName);\n      }\n      deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n      constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n      return `, constraint ${constraintName} primary key (${this.formatter.columnize(columns)})${deferrable}`;\n    }\n  }\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      // alter columns\n      for (const col of colCompilers) {\n        this._addColumn(col);\n      }\n    } else {\n      // base class implementation for normal add\n      super.addColumns(columns, prefix);\n    }\n  }\n  _addColumn(col) {\n    const quotedTableName = this.tableName();\n    const type = col.getColumnType();\n    // We'd prefer to call this.formatter.wrapAsIdentifier here instead, however the context passed to\n    // `this` instance is not that of the column, but of the table. Thus, we unfortunately have to call\n    // `wrapIdentifier` here as well (it is already called once on the initial column operation) to give\n    // our `alter` operation the correct `queryContext`. Refer to issue #2606 and PR #2612.\n    const colName = this.client.wrapIdentifier(col.getColumnName(), col.columnBuilder.queryContext());\n\n    // To alter enum columns they must be cast to text first\n    const isEnum = col.type === 'enu';\n    this.pushQuery({\n      sql: `alter table ${quotedTableName} alter column ${colName} drop default`,\n      bindings: []\n    });\n    const alterNullable = col.columnBuilder.alterNullable;\n    if (alterNullable) {\n      this.pushQuery({\n        sql: `alter table ${quotedTableName} alter column ${colName} drop not null`,\n        bindings: []\n      });\n    }\n    const alterType = col.columnBuilder.alterType;\n    if (alterType) {\n      this.pushQuery({\n        sql: `alter table ${quotedTableName} alter column ${colName} type ${type} using (${colName}${isEnum ? '::text::' : '::'}${type})`,\n        bindings: []\n      });\n    }\n    const defaultTo = col.modified['defaultTo'];\n    if (defaultTo) {\n      const modifier = col.defaultTo.apply(col, defaultTo);\n      this.pushQuery({\n        sql: `alter table ${quotedTableName} alter column ${colName} set ${modifier}`,\n        bindings: []\n      });\n    }\n    if (alterNullable) {\n      const nullable = col.modified['nullable'];\n      if (nullable && nullable[0] === false) {\n        this.pushQuery({\n          sql: `alter table ${quotedTableName} alter column ${colName} set not null`,\n          bindings: []\n        });\n      }\n    }\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`comment on table ${this.tableName()} is '${this.single.comment}'`);\n  }\n\n  // Indexes:\n  // -------\n\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({\n        constraintName,\n        deferrable\n      } = constraintName);\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (this.method !== 'create' && this.method !== 'createIfNot') {\n      this.pushQuery(`alter table ${this.tableName()} add constraint ${constraintName} primary key (${this.formatter.columnize(columns)})${deferrable}`);\n    }\n  }\n  unique(columns, indexName) {\n    let deferrable;\n    let useConstraint = true;\n    let predicate;\n    if (isObject(indexName)) {\n      ({\n        indexName,\n        deferrable,\n        useConstraint,\n        predicate\n      } = indexName);\n      if (useConstraint === undefined) {\n        useConstraint = !!deferrable || !predicate;\n      }\n    }\n    if (!useConstraint && deferrable && deferrable !== 'not deferrable') {\n      throw new Error('postgres cannot create deferrable index');\n    }\n    if (useConstraint && predicate) {\n      throw new Error('postgres cannot create constraint with predicate');\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    if (useConstraint) {\n      this.pushQuery(`alter table ${this.tableName()} add constraint ${indexName}` + ' unique (' + this.formatter.columnize(columns) + ')' + deferrable);\n    } else {\n      const predicateQuery = predicate ? ' ' + this.client.queryCompiler(predicate).where() : '';\n      this.pushQuery(`create unique index ${indexName} on ${this.tableName()} (${this.formatter.columnize(columns)})${predicateQuery}`);\n    }\n  }\n  index(columns, indexName, options) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    let predicate;\n    let storageEngineIndexType;\n    let indexType;\n    if (isString(options)) {\n      storageEngineIndexType = options;\n    } else if (isObject(options)) {\n      ({\n        indexType,\n        storageEngineIndexType,\n        predicate\n      } = options);\n    }\n    const predicateQuery = predicate ? ' ' + this.client.queryCompiler(predicate).where() : '';\n    this.pushQuery(`create${typeof indexType === 'string' && indexType.toLowerCase() === 'unique' ? ' unique' : ''} index ${indexName} on ${this.tableName()}${storageEngineIndexType && ` using ${storageEngineIndexType}` || ''}` + ' (' + this.formatter.columnize(columns) + ')' + `${predicateQuery}`);\n  }\n  dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${constraintName}`);\n  }\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    indexName = this.schemaNameRaw ? `${this.formatter.wrap(this.schemaNameRaw)}.${indexName}` : indexName;\n    this.pushQuery(`drop index ${indexName}`);\n  }\n  dropUnique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${indexName}`);\n  }\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${indexName}`);\n  }\n}\nmodule.exports = TableCompiler_PG;","map":{"version":3,"names":["has","require","TableCompiler","isObject","isString","TableCompiler_PG","constructor","client","tableBuilder","renameColumn","from","to","pushQuery","sql","tableName","formatter","wrap","_setNullableState","column","isNullable","constraintAction","compileAdd","builder","table","columns","prefixArray","getColumns","join","createQuery","ifNot","like","createStatement","columnsSql","primaryKeys","_addChecks","tableNameLike","length","single","inherits","bindings","hasComment","comment","pks","grouped","alterTable","filter","k","method","args","constraintName","deferrable","tableNameRaw","columnize","addColumns","prefix","colCompilers","alterColumnsPrefix","col","_addColumn","quotedTableName","type","getColumnType","colName","wrapIdentifier","getColumnName","columnBuilder","queryContext","isEnum","alterNullable","alterType","defaultTo","modified","modifier","apply","nullable","primary","unique","indexName","useConstraint","predicate","undefined","Error","_indexCommand","predicateQuery","queryCompiler","where","index","options","storageEngineIndexType","indexType","toLowerCase","dropPrimary","dropIndex","schemaNameRaw","dropUnique","dropForeign","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/postgres/schema/pg-tablecompiler.js"],"sourcesContent":["/* eslint max-len: 0 */\n\n// PostgreSQL Table Builder & Compiler\n// -------\n\nconst has = require('lodash/has');\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst { isObject, isString } = require('../../../util/is');\n\nclass TableCompiler_PG extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  // Compile a rename column command.\n  renameColumn(from, to) {\n    return this.pushQuery({\n      sql: `alter table ${this.tableName()} rename ${this.formatter.wrap(\n        from\n      )} to ${this.formatter.wrap(to)}`,\n    });\n  }\n\n  _setNullableState(column, isNullable) {\n    const constraintAction = isNullable ? 'drop not null' : 'set not null';\n    const sql = `alter table ${this.tableName()} alter column ${this.formatter.wrap(\n      column\n    )} ${constraintAction}`;\n    return this.pushQuery({\n      sql: sql,\n    });\n  }\n\n  compileAdd(builder) {\n    const table = this.formatter.wrap(builder);\n    const columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: `alter table ${table} ${columns.join(', ')}`,\n    });\n  }\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot, like) {\n    const createStatement = ifNot\n      ? 'create table if not exists '\n      : 'create table ';\n    const columnsSql = ` (${columns.sql.join(', ')}${\n      this.primaryKeys() || ''\n    }${this._addChecks()})`;\n\n    let sql =\n      createStatement +\n      this.tableName() +\n      (like && this.tableNameLike()\n        ? ' (like ' +\n          this.tableNameLike() +\n          ' including all' +\n          (columns.sql.length ? ', ' + columns.sql.join(', ') : '') +\n          ')'\n        : columnsSql);\n    if (this.single.inherits)\n      sql += ` inherits (${this.formatter.wrap(this.single.inherits)})`;\n    this.pushQuery({\n      sql,\n      bindings: columns.bindings,\n    });\n    const hasComment = has(this.single, 'comment');\n    if (hasComment) this.comment(this.single.comment);\n  }\n\n  primaryKeys() {\n    const pks = (this.grouped.alterTable || []).filter(\n      (k) => k.method === 'primary'\n    );\n    if (pks.length > 0 && pks[0].args.length > 0) {\n      const columns = pks[0].args[0];\n      let constraintName = pks[0].args[1] || '';\n      let deferrable;\n      if (isObject(constraintName)) {\n        ({ constraintName, deferrable } = constraintName);\n      }\n      deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n      constraintName = constraintName\n        ? this.formatter.wrap(constraintName)\n        : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n\n      return `, constraint ${constraintName} primary key (${this.formatter.columnize(\n        columns\n      )})${deferrable}`;\n    }\n  }\n\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      // alter columns\n      for (const col of colCompilers) {\n        this._addColumn(col);\n      }\n    } else {\n      // base class implementation for normal add\n      super.addColumns(columns, prefix);\n    }\n  }\n\n  _addColumn(col) {\n    const quotedTableName = this.tableName();\n    const type = col.getColumnType();\n    // We'd prefer to call this.formatter.wrapAsIdentifier here instead, however the context passed to\n    // `this` instance is not that of the column, but of the table. Thus, we unfortunately have to call\n    // `wrapIdentifier` here as well (it is already called once on the initial column operation) to give\n    // our `alter` operation the correct `queryContext`. Refer to issue #2606 and PR #2612.\n    const colName = this.client.wrapIdentifier(\n      col.getColumnName(),\n      col.columnBuilder.queryContext()\n    );\n\n    // To alter enum columns they must be cast to text first\n    const isEnum = col.type === 'enu';\n    this.pushQuery({\n      sql: `alter table ${quotedTableName} alter column ${colName} drop default`,\n      bindings: [],\n    });\n\n    const alterNullable = col.columnBuilder.alterNullable;\n    if (alterNullable) {\n      this.pushQuery({\n        sql: `alter table ${quotedTableName} alter column ${colName} drop not null`,\n        bindings: [],\n      });\n    }\n\n    const alterType = col.columnBuilder.alterType;\n    if (alterType) {\n      this.pushQuery({\n        sql: `alter table ${quotedTableName} alter column ${colName} type ${type} using (${colName}${\n          isEnum ? '::text::' : '::'\n        }${type})`,\n        bindings: [],\n      });\n    }\n\n    const defaultTo = col.modified['defaultTo'];\n    if (defaultTo) {\n      const modifier = col.defaultTo.apply(col, defaultTo);\n      this.pushQuery({\n        sql: `alter table ${quotedTableName} alter column ${colName} set ${modifier}`,\n        bindings: [],\n      });\n    }\n\n    if (alterNullable) {\n      const nullable = col.modified['nullable'];\n      if (nullable && nullable[0] === false) {\n        this.pushQuery({\n          sql: `alter table ${quotedTableName} alter column ${colName} set not null`,\n          bindings: [],\n        });\n      }\n    }\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(\n      `comment on table ${this.tableName()} is '${this.single.comment}'`\n    );\n  }\n\n  // Indexes:\n  // -------\n\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({ constraintName, deferrable } = constraintName);\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (this.method !== 'create' && this.method !== 'createIfNot') {\n      this.pushQuery(\n        `alter table ${this.tableName()} add constraint ${constraintName} primary key (${this.formatter.columnize(\n          columns\n        )})${deferrable}`\n      );\n    }\n  }\n\n  unique(columns, indexName) {\n    let deferrable;\n    let useConstraint = true;\n    let predicate;\n    if (isObject(indexName)) {\n      ({ indexName, deferrable, useConstraint, predicate } = indexName);\n      if (useConstraint === undefined) {\n        useConstraint = !!deferrable || !predicate;\n      }\n    }\n    if (!useConstraint && deferrable && deferrable !== 'not deferrable') {\n      throw new Error('postgres cannot create deferrable index');\n    }\n    if (useConstraint && predicate) {\n      throw new Error('postgres cannot create constraint with predicate');\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n\n    if (useConstraint) {\n      this.pushQuery(\n        `alter table ${this.tableName()} add constraint ${indexName}` +\n          ' unique (' +\n          this.formatter.columnize(columns) +\n          ')' +\n          deferrable\n      );\n    } else {\n      const predicateQuery = predicate\n        ? ' ' + this.client.queryCompiler(predicate).where()\n        : '';\n\n      this.pushQuery(\n        `create unique index ${indexName} on ${this.tableName()} (${this.formatter.columnize(\n          columns\n        )})${predicateQuery}`\n      );\n    }\n  }\n\n  index(columns, indexName, options) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n\n    let predicate;\n    let storageEngineIndexType;\n    let indexType;\n\n    if (isString(options)) {\n      storageEngineIndexType = options;\n    } else if (isObject(options)) {\n      ({ indexType, storageEngineIndexType, predicate } = options);\n    }\n\n    const predicateQuery = predicate\n      ? ' ' + this.client.queryCompiler(predicate).where()\n      : '';\n\n    this.pushQuery(\n      `create${\n        typeof indexType === 'string' && indexType.toLowerCase() === 'unique'\n          ? ' unique'\n          : ''\n      } index ${indexName} on ${this.tableName()}${\n        (storageEngineIndexType && ` using ${storageEngineIndexType}`) || ''\n      }` +\n        ' (' +\n        this.formatter.columnize(columns) +\n        ')' +\n        `${predicateQuery}`\n    );\n  }\n\n  dropPrimary(constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${constraintName}`\n    );\n  }\n\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    indexName = this.schemaNameRaw\n      ? `${this.formatter.wrap(this.schemaNameRaw)}.${indexName}`\n      : indexName;\n    this.pushQuery(`drop index ${indexName}`);\n  }\n\n  dropUnique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${indexName}`\n    );\n  }\n\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${indexName}`\n    );\n  }\n}\n\nmodule.exports = TableCompiler_PG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}