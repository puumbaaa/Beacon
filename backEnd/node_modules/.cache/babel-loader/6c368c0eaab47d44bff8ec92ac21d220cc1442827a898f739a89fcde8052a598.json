{"ast":null,"code":"const isPlainObject = require('lodash/isPlainObject');\nconst isTypedArray = require('lodash/isTypedArray');\nconst {\n  CLIENT_ALIASES\n} = require('../constants');\nconst {\n  isFunction\n} = require('./is');\n\n// Check if the first argument is an array, otherwise uses all arguments as an\n// array.\nfunction normalizeArr(...args) {\n  if (Array.isArray(args[0])) {\n    return args[0];\n  }\n  return args;\n}\nfunction containsUndefined(mixed) {\n  let argContainsUndefined = false;\n  if (isTypedArray(mixed)) return false;\n  if (mixed && isFunction(mixed.toSQL)) {\n    //Any QueryBuilder or Raw will automatically be validated during compile.\n    return argContainsUndefined;\n  }\n  if (Array.isArray(mixed)) {\n    for (let i = 0; i < mixed.length; i++) {\n      if (argContainsUndefined) break;\n      argContainsUndefined = containsUndefined(mixed[i]);\n    }\n  } else if (isPlainObject(mixed)) {\n    Object.keys(mixed).forEach(key => {\n      if (!argContainsUndefined) {\n        argContainsUndefined = containsUndefined(mixed[key]);\n      }\n    });\n  } else {\n    argContainsUndefined = mixed === undefined;\n  }\n  return argContainsUndefined;\n}\nfunction getUndefinedIndices(mixed) {\n  const indices = [];\n  if (Array.isArray(mixed)) {\n    mixed.forEach((item, index) => {\n      if (containsUndefined(item)) {\n        indices.push(index);\n      }\n    });\n  } else if (isPlainObject(mixed)) {\n    Object.keys(mixed).forEach(key => {\n      if (containsUndefined(mixed[key])) {\n        indices.push(key);\n      }\n    });\n  } else {\n    indices.push(0);\n  }\n  return indices;\n}\nfunction addQueryContext(Target) {\n  // Stores or returns (if called with no arguments) context passed to\n  // wrapIdentifier and postProcessResponse hooks\n  Target.prototype.queryContext = function (context) {\n    if (context === undefined) {\n      return this._queryContext;\n    }\n    this._queryContext = context;\n    return this;\n  };\n}\nfunction resolveClientNameWithAliases(clientName) {\n  return CLIENT_ALIASES[clientName] || clientName;\n}\nfunction toNumber(val, fallback) {\n  if (val === undefined || val === null) return fallback;\n  const number = parseInt(val, 10);\n  return isNaN(number) ? fallback : number;\n}\nmodule.exports = {\n  addQueryContext,\n  containsUndefined,\n  getUndefinedIndices,\n  normalizeArr,\n  resolveClientNameWithAliases,\n  toNumber\n};","map":{"version":3,"names":["isPlainObject","require","isTypedArray","CLIENT_ALIASES","isFunction","normalizeArr","args","Array","isArray","containsUndefined","mixed","argContainsUndefined","toSQL","i","length","Object","keys","forEach","key","undefined","getUndefinedIndices","indices","item","index","push","addQueryContext","Target","prototype","queryContext","context","_queryContext","resolveClientNameWithAliases","clientName","toNumber","val","fallback","number","parseInt","isNaN","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/util/helpers.js"],"sourcesContent":["const isPlainObject = require('lodash/isPlainObject');\nconst isTypedArray = require('lodash/isTypedArray');\nconst { CLIENT_ALIASES } = require('../constants');\nconst { isFunction } = require('./is');\n\n// Check if the first argument is an array, otherwise uses all arguments as an\n// array.\nfunction normalizeArr(...args) {\n  if (Array.isArray(args[0])) {\n    return args[0];\n  }\n\n  return args;\n}\n\nfunction containsUndefined(mixed) {\n  let argContainsUndefined = false;\n\n  if (isTypedArray(mixed)) return false;\n\n  if (mixed && isFunction(mixed.toSQL)) {\n    //Any QueryBuilder or Raw will automatically be validated during compile.\n    return argContainsUndefined;\n  }\n\n  if (Array.isArray(mixed)) {\n    for (let i = 0; i < mixed.length; i++) {\n      if (argContainsUndefined) break;\n      argContainsUndefined = containsUndefined(mixed[i]);\n    }\n  } else if (isPlainObject(mixed)) {\n    Object.keys(mixed).forEach((key) => {\n      if (!argContainsUndefined) {\n        argContainsUndefined = containsUndefined(mixed[key]);\n      }\n    });\n  } else {\n    argContainsUndefined = mixed === undefined;\n  }\n\n  return argContainsUndefined;\n}\n\nfunction getUndefinedIndices(mixed) {\n  const indices = [];\n\n  if (Array.isArray(mixed)) {\n    mixed.forEach((item, index) => {\n      if (containsUndefined(item)) {\n        indices.push(index);\n      }\n    });\n  } else if (isPlainObject(mixed)) {\n    Object.keys(mixed).forEach((key) => {\n      if (containsUndefined(mixed[key])) {\n        indices.push(key);\n      }\n    });\n  } else {\n    indices.push(0);\n  }\n\n  return indices;\n}\n\nfunction addQueryContext(Target) {\n  // Stores or returns (if called with no arguments) context passed to\n  // wrapIdentifier and postProcessResponse hooks\n  Target.prototype.queryContext = function (context) {\n    if (context === undefined) {\n      return this._queryContext;\n    }\n    this._queryContext = context;\n    return this;\n  };\n}\n\nfunction resolveClientNameWithAliases(clientName) {\n  return CLIENT_ALIASES[clientName] || clientName;\n}\n\nfunction toNumber(val, fallback) {\n  if (val === undefined || val === null) return fallback;\n  const number = parseInt(val, 10);\n  return isNaN(number) ? fallback : number;\n}\n\nmodule.exports = {\n  addQueryContext,\n  containsUndefined,\n  getUndefinedIndices,\n  normalizeArr,\n  resolveClientNameWithAliases,\n  toNumber,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}