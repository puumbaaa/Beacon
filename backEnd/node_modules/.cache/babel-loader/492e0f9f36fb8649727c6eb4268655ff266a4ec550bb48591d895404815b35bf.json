{"ast":null,"code":"// better-sqlite3 Client\n// -------\nconst Client_SQLite3 = require('../sqlite3');\nclass Client_BetterSQLite3 extends Client_SQLite3 {\n  _driver() {\n    return require('better-sqlite3');\n  }\n\n  // Get a raw connection from the database, returning a promise with the connection object.\n  async acquireRawConnection() {\n    const options = this.connectionSettings.options || {};\n    return new this.driver(this.connectionSettings.filename, {\n      nativeBinding: options.nativeBinding,\n      readonly: !!options.readonly\n    });\n  }\n\n  // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n  async destroyRawConnection(connection) {\n    return connection.close();\n  }\n\n  // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n  async _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n    if (!connection) {\n      throw new Error('No connection provided');\n    }\n    const statement = connection.prepare(obj.sql);\n    const bindings = this._formatBindings(obj.bindings);\n    if (statement.reader) {\n      const response = await statement.all(bindings);\n      obj.response = response;\n      return obj;\n    }\n    const response = await statement.run(bindings);\n    obj.response = response;\n    obj.context = {\n      lastID: response.lastInsertRowid,\n      changes: response.changes\n    };\n    return obj;\n  }\n  _formatBindings(bindings) {\n    if (!bindings) {\n      return [];\n    }\n    return bindings.map(binding => {\n      if (binding instanceof Date) {\n        return binding.valueOf();\n      }\n      if (typeof binding === 'boolean') {\n        return Number(binding);\n      }\n      return binding;\n    });\n  }\n}\nObject.assign(Client_BetterSQLite3.prototype, {\n  // The \"dialect\", for reference .\n  driverName: 'better-sqlite3'\n});\nmodule.exports = Client_BetterSQLite3;","map":{"version":3,"names":["Client_SQLite3","require","Client_BetterSQLite3","_driver","acquireRawConnection","options","connectionSettings","driver","filename","nativeBinding","readonly","destroyRawConnection","connection","close","_query","obj","sql","Error","statement","prepare","bindings","_formatBindings","reader","response","all","run","context","lastID","lastInsertRowid","changes","map","binding","Date","valueOf","Number","Object","assign","prototype","driverName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/better-sqlite3/index.js"],"sourcesContent":["// better-sqlite3 Client\n// -------\nconst Client_SQLite3 = require('../sqlite3');\n\nclass Client_BetterSQLite3 extends Client_SQLite3 {\n  _driver() {\n    return require('better-sqlite3');\n  }\n\n  // Get a raw connection from the database, returning a promise with the connection object.\n  async acquireRawConnection() {\n    const options = this.connectionSettings.options || {};\n\n    return new this.driver(this.connectionSettings.filename, {\n      nativeBinding: options.nativeBinding,\n      readonly: !!options.readonly,\n    });\n  }\n\n  // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n  async destroyRawConnection(connection) {\n    return connection.close();\n  }\n\n  // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n  async _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    if (!connection) {\n      throw new Error('No connection provided');\n    }\n\n    const statement = connection.prepare(obj.sql);\n    const bindings = this._formatBindings(obj.bindings);\n\n    if (statement.reader) {\n      const response = await statement.all(bindings);\n      obj.response = response;\n      return obj;\n    }\n\n    const response = await statement.run(bindings);\n    obj.response = response;\n    obj.context = {\n      lastID: response.lastInsertRowid,\n      changes: response.changes,\n    };\n\n    return obj;\n  }\n\n  _formatBindings(bindings) {\n    if (!bindings) {\n      return [];\n    }\n    return bindings.map((binding) => {\n      if (binding instanceof Date) {\n        return binding.valueOf();\n      }\n\n      if (typeof binding === 'boolean') {\n        return Number(binding);\n      }\n\n      return binding;\n    });\n  }\n}\n\nObject.assign(Client_BetterSQLite3.prototype, {\n  // The \"dialect\", for reference .\n  driverName: 'better-sqlite3',\n});\n\nmodule.exports = Client_BetterSQLite3;\n"],"mappings":"AAAA;AACA;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,YAAY,CAAC;AAE5C,MAAMC,oBAAoB,SAASF,cAAc,CAAC;EAChDG,OAAOA,CAAA,EAAG;IACR,OAAOF,OAAO,CAAC,gBAAgB,CAAC;EAClC;;EAEA;EACA,MAAMG,oBAAoBA,CAAA,EAAG;IAC3B,MAAMC,OAAO,GAAG,IAAI,CAACC,kBAAkB,CAACD,OAAO,IAAI,CAAC,CAAC;IAErD,OAAO,IAAI,IAAI,CAACE,MAAM,CAAC,IAAI,CAACD,kBAAkB,CAACE,QAAQ,EAAE;MACvDC,aAAa,EAAEJ,OAAO,CAACI,aAAa;MACpCC,QAAQ,EAAE,CAAC,CAACL,OAAO,CAACK;IACtB,CAAC,CAAC;EACJ;;EAEA;EACA;EACA,MAAMC,oBAAoBA,CAACC,UAAU,EAAE;IACrC,OAAOA,UAAU,CAACC,KAAK,CAAC,CAAC;EAC3B;;EAEA;EACA;EACA,MAAMC,MAAMA,CAACF,UAAU,EAAEG,GAAG,EAAE;IAC5B,IAAI,CAACA,GAAG,CAACC,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IAEnD,IAAI,CAACL,UAAU,EAAE;MACf,MAAM,IAAIK,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,SAAS,GAAGN,UAAU,CAACO,OAAO,CAACJ,GAAG,CAACC,GAAG,CAAC;IAC7C,MAAMI,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACN,GAAG,CAACK,QAAQ,CAAC;IAEnD,IAAIF,SAAS,CAACI,MAAM,EAAE;MACpB,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAACJ,QAAQ,CAAC;MAC9CL,GAAG,CAACQ,QAAQ,GAAGA,QAAQ;MACvB,OAAOR,GAAG;IACZ;IAEA,MAAMQ,QAAQ,GAAG,MAAML,SAAS,CAACO,GAAG,CAACL,QAAQ,CAAC;IAC9CL,GAAG,CAACQ,QAAQ,GAAGA,QAAQ;IACvBR,GAAG,CAACW,OAAO,GAAG;MACZC,MAAM,EAAEJ,QAAQ,CAACK,eAAe;MAChCC,OAAO,EAAEN,QAAQ,CAACM;IACpB,CAAC;IAED,OAAOd,GAAG;EACZ;EAEAM,eAAeA,CAACD,QAAQ,EAAE;IACxB,IAAI,CAACA,QAAQ,EAAE;MACb,OAAO,EAAE;IACX;IACA,OAAOA,QAAQ,CAACU,GAAG,CAAEC,OAAO,IAAK;MAC/B,IAAIA,OAAO,YAAYC,IAAI,EAAE;QAC3B,OAAOD,OAAO,CAACE,OAAO,CAAC,CAAC;MAC1B;MAEA,IAAI,OAAOF,OAAO,KAAK,SAAS,EAAE;QAChC,OAAOG,MAAM,CAACH,OAAO,CAAC;MACxB;MAEA,OAAOA,OAAO;IAChB,CAAC,CAAC;EACJ;AACF;AAEAI,MAAM,CAACC,MAAM,CAAClC,oBAAoB,CAACmC,SAAS,EAAE;EAC5C;EACAC,UAAU,EAAE;AACd,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGtC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}