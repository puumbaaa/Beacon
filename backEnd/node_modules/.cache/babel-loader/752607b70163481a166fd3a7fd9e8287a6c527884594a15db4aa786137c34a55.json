{"ast":null,"code":"/* eslint max-len:0 */\n\n// MSSQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst helpers = require('../../../util/helpers');\nconst {\n  isObject\n} = require('../../../util/is');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_MSSQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n  createQuery(columns, ifNot, like) {\n    let createStatement = ifNot ? `if object_id('${this.tableName()}', 'U') is null ` : '';\n    if (like) {\n      // This query copy only columns and not all indexes and keys like other databases.\n      createStatement += `SELECT * INTO ${this.tableName()} FROM ${this.tableNameLike()} WHERE 0=1`;\n    } else {\n      createStatement += 'CREATE TABLE ' + this.tableName() + (this._formatting ? ' (\\n    ' : ' (') + columns.sql.join(this._formatting ? ',\\n    ' : ', ') + this._addChecks() + ')';\n    }\n    this.pushQuery(createStatement);\n    if (this.single.comment) {\n      this.comment(this.single.comment);\n    }\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n  comment( /** @type {string} */comment) {\n    if (!comment) {\n      return;\n    }\n\n    // XXX: This is a byte limit, not character, so we cannot definitively say they'll exceed the limit without server collation info.\n    // When I checked in SQL Server 2019, the ctext column in sys.syscomments is defined as a varbinary(8000), so it doesn't even have its own defined collation.\n    if (comment.length > 7500 / 2) {\n      this.client.logger.warn('Your comment might be longer than the max comment length for MSSQL of 7,500 bytes.');\n    }\n\n    // See: https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-addextendedproperty-transact-sql?view=sql-server-ver15#f-adding-an-extended-property-to-a-table\n    const value = this.formatter.escapingStringDelimiters(comment);\n    const level0name = this.formatter.escapingStringDelimiters(this.schemaNameRaw || 'dbo');\n    const level1name = this.formatter.escapingStringDelimiters(this.tableNameRaw);\n    const args = `N'MS_Description', N'${value}', N'Schema', N'${level0name}', N'Table', N'${level1name}'`;\n    const isAlreadyDefined = `EXISTS(SELECT * FROM sys.fn_listextendedproperty(N'MS_Description', N'Schema', N'${level0name}', N'Table', N'${level1name}', NULL, NULL))`;\n    this.pushQuery(`IF ${isAlreadyDefined}\\n  EXEC sys.sp_updateextendedproperty ${args}\\nELSE\\n  EXEC sys.sp_addextendedproperty ${args}`);\n  }\n\n  // Compiles column add.  Multiple columns need only one ADD clause (not one ADD per column) so core addColumns doesn't work.  #1348\n  addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n    if (columns.sql.length > 0) {\n      this.pushQuery({\n        sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + prefix + columns.sql.join(', '),\n        bindings: columns.bindings\n      });\n    }\n  }\n  alterColumns(columns, colBuilder) {\n    for (let i = 0, l = colBuilder.length; i < l; i++) {\n      const builder = colBuilder[i];\n      if (builder.modified.defaultTo) {\n        const schema = this.schemaNameRaw || 'dbo';\n        const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${this.tableNameRaw}'\n                                                  AND all_columns.name = '${builder.getColumnName()}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${this.tableNameRaw} DROP CONSTRAINT ' + @constraint)`;\n        this.pushQuery(baseQuery);\n      }\n    }\n    // in SQL server only one column can be altered at a time\n    columns.sql.forEach(sql => {\n      this.pushQuery({\n        sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + (this.lowerCase ? this.alterColumnPrefix.toLowerCase() : this.alterColumnPrefix) + sql,\n        bindings: columns.bindings\n      });\n    });\n  }\n\n  // Compiles column drop.  Multiple columns need only one DROP clause (not one DROP per column) so core dropColumn doesn't work.  #1348\n  dropColumn() {\n    const _this2 = this;\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    const columnsArray = Array.isArray(columns) ? columns : [columns];\n    const drops = columnsArray.map(column => _this2.formatter.wrap(column));\n    const schema = this.schemaNameRaw || 'dbo';\n    for (const column of columns) {\n      const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${this.tableNameRaw}'\n                                                  AND all_columns.name = '${column}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${this.tableNameRaw} DROP CONSTRAINT ' + @constraint)`;\n      this.pushQuery(baseQuery);\n    }\n    this.pushQuery((this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + this.dropColumnPrefix + drops.join(', '));\n  }\n  changeType() {}\n\n  // Renames a column on the table.\n  renameColumn(from, to) {\n    this.pushQuery(`exec sp_rename ${this.client.parameter(this.tableName() + '.' + from, this.tableBuilder, this.bindingsHolder)}, ${this.client.parameter(to, this.tableBuilder, this.bindingsHolder)}, 'COLUMN'`);\n  }\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      return runner.query({\n        sql: `ALTER TABLE ${tableName} DROP CONSTRAINT ${constraintName}`\n      });\n    }));\n  }\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const column = formatter.columnize(ref.COLUMN_NAME);\n      const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n      const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n      const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n      const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n      return runner.query({\n        sql: `ALTER TABLE ${tableName} ADD CONSTRAINT ${keyName}` + ' FOREIGN KEY (' + column + ') REFERENCES ' + inTable + ' (' + references + ')' + onUpdate + onDelete\n      });\n    }));\n  }\n  index(columns, indexName, options) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    let predicate;\n    if (isObject(options)) {\n      ({\n        predicate\n      } = options);\n    }\n    const predicateQuery = predicate ? ' ' + this.client.queryCompiler(predicate).where() : '';\n    this.pushQuery(`CREATE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(columns)})${predicateQuery}`);\n  }\n\n  /**\n   * Create a primary key.\n   *\n   * @param {undefined | string | string[]} columns\n   * @param {string | {constraintName: string, deferrable?: 'not deferrable'|'deferred'|'immediate' }} constraintName\n   */\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({\n        constraintName,\n        deferrable\n      } = constraintName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(`mssql: primary key constraint [${constraintName}] will not be deferrable ${deferrable} because mssql does not support deferred constraints.`);\n    }\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (!this.forCreate) {\n      this.pushQuery(`ALTER TABLE ${this.tableName()} ADD CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(columns)})`);\n    } else {\n      this.pushQuery(`CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(columns)})`);\n    }\n  }\n\n  /**\n   * Create a unique index.\n   *\n   * @param {string | string[]} columns\n   * @param {string | {indexName: undefined | string, deferrable?: 'not deferrable'|'deferred'|'immediate', useConstraint?: true|false, predicate?: QueryBuilder }} indexName\n   */\n  unique(columns, indexName) {\n    /** @type {string | undefined} */\n    let deferrable;\n    let useConstraint = false;\n    let predicate;\n    if (isObject(indexName)) {\n      ({\n        indexName,\n        deferrable,\n        useConstraint,\n        predicate\n      } = indexName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(`mssql: unique index [${indexName}] will not be deferrable ${deferrable} because mssql does not support deferred constraints.`);\n    }\n    if (useConstraint && predicate) {\n      throw new Error('mssql cannot create constraint with predicate');\n    }\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n    if (useConstraint) {\n      // mssql supports unique indexes and unique constraints.\n      // unique indexes cannot be used with foreign key relationships hence unique constraints are used instead.\n      this.pushQuery(`ALTER TABLE ${this.tableName()} ADD CONSTRAINT ${indexName} UNIQUE (${this.formatter.columnize(columns)})`);\n    } else {\n      // default to making unique index that allows null https://stackoverflow.com/a/767702/360060\n      // to be more or less compatible with other DBs (if any of the columns is NULL then \"duplicates\" are allowed)\n      const predicateQuery = predicate ? ' ' + this.client.queryCompiler(predicate).where() : ' WHERE ' + columns.map(column => this.formatter.columnize(column) + ' IS NOT NULL').join(' AND ');\n      this.pushQuery(`CREATE UNIQUE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(columns)})${predicateQuery}`);\n    }\n  }\n\n  // Compile a drop index command.\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n\n  // Compile a drop foreign key command.\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${indexName}`);\n  }\n\n  // Compile a drop primary key command.\n  dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(`ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${constraintName}`);\n  }\n\n  // Compile a drop unique key command.\n  dropUnique(column, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n}\nTableCompiler_MSSQL.prototype.createAlterTableMethods = ['foreign', 'primary'];\nTableCompiler_MSSQL.prototype.lowerCase = false;\nTableCompiler_MSSQL.prototype.addColumnsPrefix = 'ADD ';\nTableCompiler_MSSQL.prototype.dropColumnPrefix = 'DROP COLUMN ';\nTableCompiler_MSSQL.prototype.alterColumnPrefix = 'ALTER COLUMN ';\nmodule.exports = TableCompiler_MSSQL;","map":{"version":3,"names":["TableCompiler","require","helpers","isObject","TableCompiler_MSSQL","constructor","client","tableBuilder","createQuery","columns","ifNot","like","createStatement","tableName","tableNameLike","_formatting","sql","join","_addChecks","pushQuery","single","comment","addColumns","addColumnsPrefix","length","logger","warn","value","formatter","escapingStringDelimiters","level0name","schemaNameRaw","level1name","tableNameRaw","args","isAlreadyDefined","prefix","lowerCase","bindings","alterColumns","colBuilder","i","l","builder","modified","defaultTo","schema","baseQuery","getColumnName","forEach","alterColumnPrefix","toLowerCase","dropColumn","_this2","normalizeArr","apply","arguments","columnsArray","Array","isArray","drops","map","column","wrap","dropColumnPrefix","changeType","renameColumn","from","to","parameter","bindingsHolder","dropFKRefs","runner","refs","Promise","all","ref","constraintName","CONSTRAINT_NAME","TABLE_NAME","query","createFKRefs","keyName","columnize","COLUMN_NAME","references","REFERENCED_COLUMN_NAME","inTable","REFERENCED_TABLE_NAME","onUpdate","UPDATE_RULE","onDelete","DELETE_RULE","index","indexName","options","_indexCommand","predicate","predicateQuery","queryCompiler","where","primary","deferrable","forCreate","unique","useConstraint","Error","dropIndex","dropForeign","dropPrimary","dropUnique","prototype","createAlterTableMethods","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/mssql/schema/mssql-tablecompiler.js"],"sourcesContent":["/* eslint max-len:0 */\n\n// MSSQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst helpers = require('../../../util/helpers');\nconst { isObject } = require('../../../util/is');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_MSSQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  createQuery(columns, ifNot, like) {\n    let createStatement = ifNot\n      ? `if object_id('${this.tableName()}', 'U') is null `\n      : '';\n\n    if (like) {\n      // This query copy only columns and not all indexes and keys like other databases.\n      createStatement += `SELECT * INTO ${this.tableName()} FROM ${this.tableNameLike()} WHERE 0=1`;\n    } else {\n      createStatement +=\n        'CREATE TABLE ' +\n        this.tableName() +\n        (this._formatting ? ' (\\n    ' : ' (') +\n        columns.sql.join(this._formatting ? ',\\n    ' : ', ') +\n        this._addChecks() +\n        ')';\n    }\n\n    this.pushQuery(createStatement);\n\n    if (this.single.comment) {\n      this.comment(this.single.comment);\n    }\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n\n  comment(/** @type {string} */ comment) {\n    if (!comment) {\n      return;\n    }\n\n    // XXX: This is a byte limit, not character, so we cannot definitively say they'll exceed the limit without server collation info.\n    // When I checked in SQL Server 2019, the ctext column in sys.syscomments is defined as a varbinary(8000), so it doesn't even have its own defined collation.\n    if (comment.length > 7500 / 2) {\n      this.client.logger.warn(\n        'Your comment might be longer than the max comment length for MSSQL of 7,500 bytes.'\n      );\n    }\n\n    // See: https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-addextendedproperty-transact-sql?view=sql-server-ver15#f-adding-an-extended-property-to-a-table\n    const value = this.formatter.escapingStringDelimiters(comment);\n    const level0name = this.formatter.escapingStringDelimiters(\n      this.schemaNameRaw || 'dbo'\n    );\n    const level1name = this.formatter.escapingStringDelimiters(\n      this.tableNameRaw\n    );\n    const args = `N'MS_Description', N'${value}', N'Schema', N'${level0name}', N'Table', N'${level1name}'`;\n    const isAlreadyDefined = `EXISTS(SELECT * FROM sys.fn_listextendedproperty(N'MS_Description', N'Schema', N'${level0name}', N'Table', N'${level1name}', NULL, NULL))`;\n    this.pushQuery(\n      `IF ${isAlreadyDefined}\\n  EXEC sys.sp_updateextendedproperty ${args}\\nELSE\\n  EXEC sys.sp_addextendedproperty ${args}`\n    );\n  }\n\n  // Compiles column add.  Multiple columns need only one ADD clause (not one ADD per column) so core addColumns doesn't work.  #1348\n  addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n\n    if (columns.sql.length > 0) {\n      this.pushQuery({\n        sql:\n          (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n          this.tableName() +\n          ' ' +\n          prefix +\n          columns.sql.join(', '),\n        bindings: columns.bindings,\n      });\n    }\n  }\n\n  alterColumns(columns, colBuilder) {\n    for (let i = 0, l = colBuilder.length; i < l; i++) {\n      const builder = colBuilder[i];\n      if (builder.modified.defaultTo) {\n        const schema = this.schemaNameRaw || 'dbo';\n        const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${\n                                                    this.tableNameRaw\n                                                  }'\n                                                  AND all_columns.name = '${builder.getColumnName()}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${\n                this.tableNameRaw\n              } DROP CONSTRAINT ' + @constraint)`;\n        this.pushQuery(baseQuery);\n      }\n    }\n    // in SQL server only one column can be altered at a time\n    columns.sql.forEach((sql) => {\n      this.pushQuery({\n        sql:\n          (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n          this.tableName() +\n          ' ' +\n          (this.lowerCase\n            ? this.alterColumnPrefix.toLowerCase()\n            : this.alterColumnPrefix) +\n          sql,\n        bindings: columns.bindings,\n      });\n    });\n  }\n\n  // Compiles column drop.  Multiple columns need only one DROP clause (not one DROP per column) so core dropColumn doesn't work.  #1348\n  dropColumn() {\n    const _this2 = this;\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    const columnsArray = Array.isArray(columns) ? columns : [columns];\n    const drops = columnsArray.map((column) => _this2.formatter.wrap(column));\n    const schema = this.schemaNameRaw || 'dbo';\n\n    for (const column of columns) {\n      const baseQuery = `\n              DECLARE @constraint varchar(100) = (SELECT default_constraints.name\n                                                  FROM sys.all_columns\n                                                  INNER JOIN sys.tables\n                                                    ON all_columns.object_id = tables.object_id\n                                                  INNER JOIN sys.schemas\n                                                    ON tables.schema_id = schemas.schema_id\n                                                  INNER JOIN sys.default_constraints\n                                                    ON all_columns.default_object_id = default_constraints.object_id\n                                                  WHERE schemas.name = '${schema}'\n                                                  AND tables.name = '${this.tableNameRaw}'\n                                                  AND all_columns.name = '${column}')\n\n              IF @constraint IS NOT NULL EXEC('ALTER TABLE ${this.tableNameRaw} DROP CONSTRAINT ' + @constraint)`;\n      this.pushQuery(baseQuery);\n    }\n    this.pushQuery(\n      (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n        this.tableName() +\n        ' ' +\n        this.dropColumnPrefix +\n        drops.join(', ')\n    );\n  }\n\n  changeType() {}\n\n  // Renames a column on the table.\n  renameColumn(from, to) {\n    this.pushQuery(\n      `exec sp_rename ${this.client.parameter(\n        this.tableName() + '.' + from,\n        this.tableBuilder,\n        this.bindingsHolder\n      )}, ${this.client.parameter(\n        to,\n        this.tableBuilder,\n        this.bindingsHolder\n      )}, 'COLUMN'`\n    );\n  }\n\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(\n      refs.map(function (ref) {\n        const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        return runner.query({\n          sql: `ALTER TABLE ${tableName} DROP CONSTRAINT ${constraintName}`,\n        });\n      })\n    );\n  }\n\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n\n    return Promise.all(\n      refs.map(function (ref) {\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const column = formatter.columnize(ref.COLUMN_NAME);\n        const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n        const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n        const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n        const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n\n        return runner.query({\n          sql:\n            `ALTER TABLE ${tableName} ADD CONSTRAINT ${keyName}` +\n            ' FOREIGN KEY (' +\n            column +\n            ') REFERENCES ' +\n            inTable +\n            ' (' +\n            references +\n            ')' +\n            onUpdate +\n            onDelete,\n        });\n      })\n    );\n  }\n\n  index(columns, indexName, options) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n\n    let predicate;\n    if (isObject(options)) {\n      ({ predicate } = options);\n    }\n    const predicateQuery = predicate\n      ? ' ' + this.client.queryCompiler(predicate).where()\n      : '';\n    this.pushQuery(\n      `CREATE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(\n        columns\n      )})${predicateQuery}`\n    );\n  }\n\n  /**\n   * Create a primary key.\n   *\n   * @param {undefined | string | string[]} columns\n   * @param {string | {constraintName: string, deferrable?: 'not deferrable'|'deferred'|'immediate' }} constraintName\n   */\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({ constraintName, deferrable } = constraintName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(\n        `mssql: primary key constraint [${constraintName}] will not be deferrable ${deferrable} because mssql does not support deferred constraints.`\n      );\n    }\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (!this.forCreate) {\n      this.pushQuery(\n        `ALTER TABLE ${this.tableName()} ADD CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(\n          columns\n        )})`\n      );\n    } else {\n      this.pushQuery(\n        `CONSTRAINT ${constraintName} PRIMARY KEY (${this.formatter.columnize(\n          columns\n        )})`\n      );\n    }\n  }\n\n  /**\n   * Create a unique index.\n   *\n   * @param {string | string[]} columns\n   * @param {string | {indexName: undefined | string, deferrable?: 'not deferrable'|'deferred'|'immediate', useConstraint?: true|false, predicate?: QueryBuilder }} indexName\n   */\n  unique(columns, indexName) {\n    /** @type {string | undefined} */\n    let deferrable;\n    let useConstraint = false;\n    let predicate;\n    if (isObject(indexName)) {\n      ({ indexName, deferrable, useConstraint, predicate } = indexName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(\n        `mssql: unique index [${indexName}] will not be deferrable ${deferrable} because mssql does not support deferred constraints.`\n      );\n    }\n    if (useConstraint && predicate) {\n      throw new Error('mssql cannot create constraint with predicate');\n    }\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    if (useConstraint) {\n      // mssql supports unique indexes and unique constraints.\n      // unique indexes cannot be used with foreign key relationships hence unique constraints are used instead.\n      this.pushQuery(\n        `ALTER TABLE ${this.tableName()} ADD CONSTRAINT ${indexName} UNIQUE (${this.formatter.columnize(\n          columns\n        )})`\n      );\n    } else {\n      // default to making unique index that allows null https://stackoverflow.com/a/767702/360060\n      // to be more or less compatible with other DBs (if any of the columns is NULL then \"duplicates\" are allowed)\n      const predicateQuery = predicate\n        ? ' ' + this.client.queryCompiler(predicate).where()\n        : ' WHERE ' +\n          columns\n            .map((column) => this.formatter.columnize(column) + ' IS NOT NULL')\n            .join(' AND ');\n      this.pushQuery(\n        `CREATE UNIQUE INDEX ${indexName} ON ${this.tableName()} (${this.formatter.columnize(\n          columns\n        )})${predicateQuery}`\n      );\n    }\n  }\n\n  // Compile a drop index command.\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n\n  // Compile a drop foreign key command.\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${indexName}`\n    );\n  }\n\n  // Compile a drop primary key command.\n  dropPrimary(constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    this.pushQuery(\n      `ALTER TABLE ${this.tableName()} DROP CONSTRAINT ${constraintName}`\n    );\n  }\n\n  // Compile a drop unique key command.\n  dropUnique(column, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`DROP INDEX ${indexName} ON ${this.tableName()}`);\n  }\n}\n\nTableCompiler_MSSQL.prototype.createAlterTableMethods = ['foreign', 'primary'];\nTableCompiler_MSSQL.prototype.lowerCase = false;\n\nTableCompiler_MSSQL.prototype.addColumnsPrefix = 'ADD ';\nTableCompiler_MSSQL.prototype.dropColumnPrefix = 'DROP COLUMN ';\nTableCompiler_MSSQL.prototype.alterColumnPrefix = 'ALTER COLUMN ';\n\nmodule.exports = TableCompiler_MSSQL;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}