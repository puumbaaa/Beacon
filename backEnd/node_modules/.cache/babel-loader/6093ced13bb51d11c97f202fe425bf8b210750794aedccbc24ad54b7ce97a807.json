{"ast":null,"code":"/* eslint max-len: 0 */\n\nconst TableCompiler = require('../postgres/schema/pg-tablecompiler');\nclass TableCompiler_CRDB extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      // alter columns\n      for (const col of colCompilers) {\n        this.client.logger.warn('Experimental alter column in use, see issue: https://github.com/cockroachdb/cockroach/issues/49329');\n        this.pushQuery({\n          sql: 'SET enable_experimental_alter_column_type_general = true',\n          bindings: []\n        });\n        super._addColumn(col);\n      }\n    } else {\n      // base class implementation for normal add\n      super.addColumns(columns, prefix);\n    }\n  }\n  dropUnique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`drop index ${this.tableName()}@${indexName} cascade `);\n  }\n}\nmodule.exports = TableCompiler_CRDB;","map":{"version":3,"names":["TableCompiler","require","TableCompiler_CRDB","constructor","client","tableBuilder","addColumns","columns","prefix","colCompilers","alterColumnsPrefix","col","logger","warn","pushQuery","sql","bindings","_addColumn","dropUnique","indexName","formatter","wrap","_indexCommand","tableNameRaw","tableName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/cockroachdb/crdb-tablecompiler.js"],"sourcesContent":["/* eslint max-len: 0 */\n\nconst TableCompiler = require('../postgres/schema/pg-tablecompiler');\n\nclass TableCompiler_CRDB extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      // alter columns\n      for (const col of colCompilers) {\n        this.client.logger.warn(\n          'Experimental alter column in use, see issue: https://github.com/cockroachdb/cockroach/issues/49329'\n        );\n        this.pushQuery({\n          sql: 'SET enable_experimental_alter_column_type_general = true',\n          bindings: [],\n        });\n        super._addColumn(col);\n      }\n    } else {\n      // base class implementation for normal add\n      super.addColumns(columns, prefix);\n    }\n  }\n\n  dropUnique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`drop index ${this.tableName()}@${indexName} cascade `);\n  }\n}\n\nmodule.exports = TableCompiler_CRDB;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,qCAAqC,CAAC;AAEpE,MAAMC,kBAAkB,SAASF,aAAa,CAAC;EAC7CG,WAAWA,CAACC,MAAM,EAAEC,YAAY,EAAE;IAChC,KAAK,CAACD,MAAM,EAAEC,YAAY,CAAC;EAC7B;EAEAC,UAAUA,CAACC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAE;IACxC,IAAID,MAAM,KAAK,IAAI,CAACE,kBAAkB,EAAE;MACtC;MACA,KAAK,MAAMC,GAAG,IAAIF,YAAY,EAAE;QAC9B,IAAI,CAACL,MAAM,CAACQ,MAAM,CAACC,IAAI,CACrB,oGACF,CAAC;QACD,IAAI,CAACC,SAAS,CAAC;UACbC,GAAG,EAAE,0DAA0D;UAC/DC,QAAQ,EAAE;QACZ,CAAC,CAAC;QACF,KAAK,CAACC,UAAU,CAACN,GAAG,CAAC;MACvB;IACF,CAAC,MAAM;MACL;MACA,KAAK,CAACL,UAAU,CAACC,OAAO,EAAEC,MAAM,CAAC;IACnC;EACF;EAEAU,UAAUA,CAACX,OAAO,EAAEY,SAAS,EAAE;IAC7BA,SAAS,GAAGA,SAAS,GACjB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACF,SAAS,CAAC,GAC9B,IAAI,CAACG,aAAa,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,EAAEhB,OAAO,CAAC;IAC5D,IAAI,CAACO,SAAS,CAAC,cAAc,IAAI,CAACU,SAAS,CAAC,CAAC,IAAIL,SAAS,WAAW,CAAC;EACxE;AACF;AAEAM,MAAM,CAACC,OAAO,GAAGxB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}