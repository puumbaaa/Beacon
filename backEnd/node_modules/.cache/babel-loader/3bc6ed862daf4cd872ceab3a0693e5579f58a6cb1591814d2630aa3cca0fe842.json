{"ast":null,"code":"const uniq = require('lodash/uniq');\nconst Raw = require('../../../raw');\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst {\n  createAutoIncrementTriggerAndSequence\n} = require('./internal/incrementUtils');\nconst {\n  toNumber\n} = require('../../../util/helpers');\n\n// Column Compiler\n// -------\n\nclass ColumnCompiler_Oracle extends ColumnCompiler {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['defaultTo', 'checkIn', 'nullable', 'comment'];\n  }\n  increments(options = {\n    primaryKey: true\n  }) {\n    createAutoIncrementTriggerAndSequence(this);\n    return 'integer not null' + (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '');\n  }\n  bigincrements(options = {\n    primaryKey: true\n  }) {\n    createAutoIncrementTriggerAndSequence(this);\n    return 'number(20, 0) not null' + (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '');\n  }\n  floating(precision) {\n    const parsedPrecision = toNumber(precision, 0);\n    return `float${parsedPrecision ? `(${parsedPrecision})` : ''}`;\n  }\n  double(precision, scale) {\n    // if (!precision) return 'number'; // TODO: Check If default is ok\n    return `number(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n  integer(length) {\n    return length ? `number(${toNumber(length, 11)})` : 'integer';\n  }\n  enu(allowed) {\n    allowed = uniq(allowed);\n    const maxLength = (allowed || []).reduce((maxLength, name) => Math.max(maxLength, String(name).length), 1);\n\n    // implicitly add the enum values as checked values\n    this.columnBuilder._modifiers.checkIn = [allowed];\n    return `varchar2(${maxLength})`;\n  }\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n  bool() {\n    // implicitly add the check for 0 and 1\n    this.columnBuilder._modifiers.checkIn = [[0, 1]];\n    return 'number(1, 0)';\n  }\n  varchar(length) {\n    return `varchar2(${toNumber(length, 255)})`;\n  }\n\n  // Modifiers\n  // ------\n\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n    this.pushAdditional(function () {\n      this.pushQuery(`comment on column ${this.tableCompiler.tableName()}.` + this.formatter.wrap(columnName) + \" is '\" + (comment || '') + \"'\");\n    }, comment);\n  }\n  checkIn(value) {\n    // TODO: Maybe accept arguments also as array\n    // TODO: value(s) should be escaped properly\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof Raw) {\n      value = value.toQuery();\n    } else if (Array.isArray(value)) {\n      value = value.map(v => `'${v}'`).join(', ');\n    } else {\n      value = `'${value}'`;\n    }\n    return `check (${this.formatter.wrap(this.args[0])} in (${value}))`;\n  }\n}\nColumnCompiler_Oracle.prototype.tinyint = 'smallint';\nColumnCompiler_Oracle.prototype.smallint = 'smallint';\nColumnCompiler_Oracle.prototype.mediumint = 'integer';\nColumnCompiler_Oracle.prototype.biginteger = 'number(20, 0)';\nColumnCompiler_Oracle.prototype.text = 'clob';\nColumnCompiler_Oracle.prototype.time = 'timestamp with time zone';\nColumnCompiler_Oracle.prototype.bit = 'clob';\nColumnCompiler_Oracle.prototype.json = 'clob';\nmodule.exports = ColumnCompiler_Oracle;","map":{"version":3,"names":["uniq","require","Raw","ColumnCompiler","createAutoIncrementTriggerAndSequence","toNumber","ColumnCompiler_Oracle","constructor","arguments","modifiers","increments","options","primaryKey","tableCompiler","_canBeAddPrimaryKey","bigincrements","floating","precision","parsedPrecision","double","scale","decimal","integer","length","enu","allowed","maxLength","reduce","name","Math","max","String","columnBuilder","_modifiers","checkIn","datetime","without","timestamp","bool","varchar","comment","columnName","args","defaults","pushAdditional","pushQuery","tableName","formatter","wrap","value","undefined","toQuery","Array","isArray","map","v","join","prototype","tinyint","smallint","mediumint","biginteger","text","time","bit","json","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/oracle/schema/oracle-columncompiler.js"],"sourcesContent":["const uniq = require('lodash/uniq');\nconst Raw = require('../../../raw');\nconst ColumnCompiler = require('../../../schema/columncompiler');\nconst {\n  createAutoIncrementTriggerAndSequence,\n} = require('./internal/incrementUtils');\nconst { toNumber } = require('../../../util/helpers');\n\n// Column Compiler\n// -------\n\nclass ColumnCompiler_Oracle extends ColumnCompiler {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['defaultTo', 'checkIn', 'nullable', 'comment'];\n  }\n\n  increments(options = { primaryKey: true }) {\n    createAutoIncrementTriggerAndSequence(this);\n    return (\n      'integer not null' +\n      (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '')\n    );\n  }\n\n  bigincrements(options = { primaryKey: true }) {\n    createAutoIncrementTriggerAndSequence(this);\n    return (\n      'number(20, 0) not null' +\n      (this.tableCompiler._canBeAddPrimaryKey(options) ? ' primary key' : '')\n    );\n  }\n\n  floating(precision) {\n    const parsedPrecision = toNumber(precision, 0);\n    return `float${parsedPrecision ? `(${parsedPrecision})` : ''}`;\n  }\n\n  double(precision, scale) {\n    // if (!precision) return 'number'; // TODO: Check If default is ok\n    return `number(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  decimal(precision, scale) {\n    if (precision === null) return 'decimal';\n    return `decimal(${toNumber(precision, 8)}, ${toNumber(scale, 2)})`;\n  }\n\n  integer(length) {\n    return length ? `number(${toNumber(length, 11)})` : 'integer';\n  }\n\n  enu(allowed) {\n    allowed = uniq(allowed);\n    const maxLength = (allowed || []).reduce(\n      (maxLength, name) => Math.max(maxLength, String(name).length),\n      1\n    );\n\n    // implicitly add the enum values as checked values\n    this.columnBuilder._modifiers.checkIn = [allowed];\n\n    return `varchar2(${maxLength})`;\n  }\n\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamp with time zone';\n  }\n\n  bool() {\n    // implicitly add the check for 0 and 1\n    this.columnBuilder._modifiers.checkIn = [[0, 1]];\n    return 'number(1, 0)';\n  }\n\n  varchar(length) {\n    return `varchar2(${toNumber(length, 255)})`;\n  }\n\n  // Modifiers\n  // ------\n\n  comment(comment) {\n    const columnName = this.args[0] || this.defaults('columnName');\n\n    this.pushAdditional(function () {\n      this.pushQuery(\n        `comment on column ${this.tableCompiler.tableName()}.` +\n          this.formatter.wrap(columnName) +\n          \" is '\" +\n          (comment || '') +\n          \"'\"\n      );\n    }, comment);\n  }\n\n  checkIn(value) {\n    // TODO: Maybe accept arguments also as array\n    // TODO: value(s) should be escaped properly\n    if (value === undefined) {\n      return '';\n    } else if (value instanceof Raw) {\n      value = value.toQuery();\n    } else if (Array.isArray(value)) {\n      value = value.map((v) => `'${v}'`).join(', ');\n    } else {\n      value = `'${value}'`;\n    }\n    return `check (${this.formatter.wrap(this.args[0])} in (${value}))`;\n  }\n}\n\nColumnCompiler_Oracle.prototype.tinyint = 'smallint';\nColumnCompiler_Oracle.prototype.smallint = 'smallint';\nColumnCompiler_Oracle.prototype.mediumint = 'integer';\nColumnCompiler_Oracle.prototype.biginteger = 'number(20, 0)';\nColumnCompiler_Oracle.prototype.text = 'clob';\nColumnCompiler_Oracle.prototype.time = 'timestamp with time zone';\nColumnCompiler_Oracle.prototype.bit = 'clob';\nColumnCompiler_Oracle.prototype.json = 'clob';\n\nmodule.exports = ColumnCompiler_Oracle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}