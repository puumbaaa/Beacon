{"ast":null,"code":"// The client names we'll allow in the `{name: lib}` pairing.\nconst CLIENT_ALIASES = Object.freeze({\n  pg: 'postgres',\n  postgresql: 'postgres',\n  sqlite: 'sqlite3'\n});\nconst SUPPORTED_CLIENTS = Object.freeze(['mssql', 'mysql', 'mysql2', 'oracledb', 'postgres', 'pgnative', 'redshift', 'sqlite3', 'cockroachdb', 'better-sqlite3'].concat(Object.keys(CLIENT_ALIASES)));\nconst DRIVER_NAMES = Object.freeze({\n  MsSQL: 'mssql',\n  MySQL: 'mysql',\n  MySQL2: 'mysql2',\n  Oracle: 'oracledb',\n  PostgreSQL: 'pg',\n  PgNative: 'pgnative',\n  Redshift: 'pg-redshift',\n  SQLite: 'sqlite3',\n  CockroachDB: 'cockroachdb',\n  BetterSQLite3: 'better-sqlite3'\n});\nconst POOL_CONFIG_OPTIONS = Object.freeze(['maxWaitingClients', 'testOnBorrow', 'fifo', 'priorityRange', 'autostart', 'evictionRunIntervalMillis', 'numTestsPerRun', 'softIdleTimeoutMillis', 'Promise']);\n\n/**\n * Regex that only matches comma's in strings that aren't wrapped in parentheses. Can be used to\n * safely split strings like `id int, name string, body text, primary key (id, name)` into definition\n * rows\n */\nconst COMMA_NO_PAREN_REGEX = /,[\\s](?![^(]*\\))/g;\nmodule.exports = {\n  CLIENT_ALIASES,\n  SUPPORTED_CLIENTS,\n  POOL_CONFIG_OPTIONS,\n  COMMA_NO_PAREN_REGEX,\n  DRIVER_NAMES\n};","map":{"version":3,"names":["CLIENT_ALIASES","Object","freeze","pg","postgresql","sqlite","SUPPORTED_CLIENTS","concat","keys","DRIVER_NAMES","MsSQL","MySQL","MySQL2","Oracle","PostgreSQL","PgNative","Redshift","SQLite","CockroachDB","BetterSQLite3","POOL_CONFIG_OPTIONS","COMMA_NO_PAREN_REGEX","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/constants.js"],"sourcesContent":["// The client names we'll allow in the `{name: lib}` pairing.\nconst CLIENT_ALIASES = Object.freeze({\n  pg: 'postgres',\n  postgresql: 'postgres',\n  sqlite: 'sqlite3',\n});\n\nconst SUPPORTED_CLIENTS = Object.freeze(\n  [\n    'mssql',\n    'mysql',\n    'mysql2',\n    'oracledb',\n    'postgres',\n    'pgnative',\n    'redshift',\n    'sqlite3',\n    'cockroachdb',\n    'better-sqlite3',\n  ].concat(Object.keys(CLIENT_ALIASES))\n);\n\nconst DRIVER_NAMES = Object.freeze({\n  MsSQL: 'mssql',\n  MySQL: 'mysql',\n  MySQL2: 'mysql2',\n  Oracle: 'oracledb',\n  PostgreSQL: 'pg',\n  PgNative: 'pgnative',\n  Redshift: 'pg-redshift',\n  SQLite: 'sqlite3',\n  CockroachDB: 'cockroachdb',\n  BetterSQLite3: 'better-sqlite3',\n});\n\nconst POOL_CONFIG_OPTIONS = Object.freeze([\n  'maxWaitingClients',\n  'testOnBorrow',\n  'fifo',\n  'priorityRange',\n  'autostart',\n  'evictionRunIntervalMillis',\n  'numTestsPerRun',\n  'softIdleTimeoutMillis',\n  'Promise',\n]);\n\n/**\n * Regex that only matches comma's in strings that aren't wrapped in parentheses. Can be used to\n * safely split strings like `id int, name string, body text, primary key (id, name)` into definition\n * rows\n */\nconst COMMA_NO_PAREN_REGEX = /,[\\s](?![^(]*\\))/g;\n\nmodule.exports = {\n  CLIENT_ALIASES,\n  SUPPORTED_CLIENTS,\n  POOL_CONFIG_OPTIONS,\n  COMMA_NO_PAREN_REGEX,\n  DRIVER_NAMES,\n};\n"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAGC,MAAM,CAACC,MAAM,CAAC;EACnCC,EAAE,EAAE,UAAU;EACdC,UAAU,EAAE,UAAU;EACtBC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,MAAMC,iBAAiB,GAAGL,MAAM,CAACC,MAAM,CACrC,CACE,OAAO,EACP,OAAO,EACP,QAAQ,EACR,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,SAAS,EACT,aAAa,EACb,gBAAgB,CACjB,CAACK,MAAM,CAACN,MAAM,CAACO,IAAI,CAACR,cAAc,CAAC,CACtC,CAAC;AAED,MAAMS,YAAY,GAAGR,MAAM,CAACC,MAAM,CAAC;EACjCQ,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,UAAU;EAClBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE,aAAa;EACvBC,MAAM,EAAE,SAAS;EACjBC,WAAW,EAAE,aAAa;EAC1BC,aAAa,EAAE;AACjB,CAAC,CAAC;AAEF,MAAMC,mBAAmB,GAAGnB,MAAM,CAACC,MAAM,CAAC,CACxC,mBAAmB,EACnB,cAAc,EACd,MAAM,EACN,eAAe,EACf,WAAW,EACX,2BAA2B,EAC3B,gBAAgB,EAChB,uBAAuB,EACvB,SAAS,CACV,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMmB,oBAAoB,GAAG,mBAAmB;AAEhDC,MAAM,CAACC,OAAO,GAAG;EACfvB,cAAc;EACdM,iBAAiB;EACjBc,mBAAmB;EACnBC,oBAAoB;EACpBZ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}