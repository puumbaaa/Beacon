{"ast":null,"code":"/* eslint max-len: 0 */\n\n// Redshift Table Builder & Compiler\n// -------\n\nconst has = require('lodash/has');\nconst TableCompiler_PG = require('../../postgres/schema/pg-tablecompiler');\nclass TableCompiler_Redshift extends TableCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n  index(columns, indexName, options) {\n    this.client.logger.warn('Redshift does not support the creation of indexes.');\n  }\n  dropIndex(columns, indexName) {\n    this.client.logger.warn('Redshift does not support the deletion of indexes.');\n  }\n\n  // TODO: have to disable setting not null on columns that already exist...\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot, like) {\n    const createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n    const columnsSql = ' (' + columns.sql.join(', ') + this._addChecks() + ')';\n    let sql = createStatement + this.tableName() + (like && this.tableNameLike() ? ' (like ' + this.tableNameLike() + ')' : columnsSql);\n    if (this.single.inherits) sql += ` like (${this.formatter.wrap(this.single.inherits)})`;\n    this.pushQuery({\n      sql,\n      bindings: columns.bindings\n    });\n    const hasComment = has(this.single, 'comment');\n    if (hasComment) this.comment(this.single.comment);\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n  primary(columns, constraintName) {\n    const self = this;\n    constraintName = constraintName ? self.formatter.wrap(constraintName) : self.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (columns.constructor !== Array) {\n      columns = [columns];\n    }\n    const thiscolumns = self.grouped.columns;\n    if (thiscolumns) {\n      for (let i = 0; i < columns.length; i++) {\n        let exists = thiscolumns.find(tcb => tcb.grouping === 'columns' && tcb.builder && tcb.builder._method === 'add' && tcb.builder._args && tcb.builder._args.indexOf(columns[i]) > -1);\n        if (exists) {\n          exists = exists.builder;\n        }\n        const nullable = !(exists && exists._modifiers && exists._modifiers['nullable'] && exists._modifiers['nullable'][0] === false);\n        if (nullable) {\n          if (exists) {\n            return this.client.logger.warn('Redshift does not allow primary keys to contain nullable columns.');\n          } else {\n            return this.client.logger.warn('Redshift does not allow primary keys to contain nonexistent columns.');\n          }\n        }\n      }\n    }\n    return self.pushQuery(`alter table ${self.tableName()} add constraint ${constraintName} primary key (${self.formatter.columnize(columns)})`);\n  }\n\n  // Compiles column add. Redshift can only add one column per ALTER TABLE, so core addColumns doesn't work.  #2545\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      super.addColumns(columns, prefix, colCompilers);\n    } else {\n      prefix = prefix || this.addColumnsPrefix;\n      colCompilers = colCompilers || this.getColumns();\n      for (const col of colCompilers) {\n        const quotedTableName = this.tableName();\n        const colCompiled = col.compileColumn();\n        this.pushQuery({\n          sql: `alter table ${quotedTableName} ${prefix}${colCompiled}`,\n          bindings: []\n        });\n      }\n    }\n  }\n}\nmodule.exports = TableCompiler_Redshift;","map":{"version":3,"names":["has","require","TableCompiler_PG","TableCompiler_Redshift","constructor","arguments","index","columns","indexName","options","client","logger","warn","dropIndex","createQuery","ifNot","like","createStatement","columnsSql","sql","join","_addChecks","tableName","tableNameLike","single","inherits","formatter","wrap","pushQuery","bindings","hasComment","comment","addColumns","addColumnsPrefix","primary","constraintName","self","tableNameRaw","Array","thiscolumns","grouped","i","length","exists","find","tcb","grouping","builder","_method","_args","indexOf","nullable","_modifiers","columnize","prefix","colCompilers","alterColumnsPrefix","getColumns","col","quotedTableName","colCompiled","compileColumn","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/redshift/schema/redshift-tablecompiler.js"],"sourcesContent":["/* eslint max-len: 0 */\n\n// Redshift Table Builder & Compiler\n// -------\n\nconst has = require('lodash/has');\nconst TableCompiler_PG = require('../../postgres/schema/pg-tablecompiler');\n\nclass TableCompiler_Redshift extends TableCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n\n  index(columns, indexName, options) {\n    this.client.logger.warn(\n      'Redshift does not support the creation of indexes.'\n    );\n  }\n\n  dropIndex(columns, indexName) {\n    this.client.logger.warn(\n      'Redshift does not support the deletion of indexes.'\n    );\n  }\n\n  // TODO: have to disable setting not null on columns that already exist...\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot, like) {\n    const createStatement = ifNot\n      ? 'create table if not exists '\n      : 'create table ';\n    const columnsSql = ' (' + columns.sql.join(', ') + this._addChecks() + ')';\n    let sql =\n      createStatement +\n      this.tableName() +\n      (like && this.tableNameLike()\n        ? ' (like ' + this.tableNameLike() + ')'\n        : columnsSql);\n    if (this.single.inherits)\n      sql += ` like (${this.formatter.wrap(this.single.inherits)})`;\n    this.pushQuery({\n      sql,\n      bindings: columns.bindings,\n    });\n    const hasComment = has(this.single, 'comment');\n    if (hasComment) this.comment(this.single.comment);\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n\n  primary(columns, constraintName) {\n    const self = this;\n    constraintName = constraintName\n      ? self.formatter.wrap(constraintName)\n      : self.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    if (columns.constructor !== Array) {\n      columns = [columns];\n    }\n    const thiscolumns = self.grouped.columns;\n\n    if (thiscolumns) {\n      for (let i = 0; i < columns.length; i++) {\n        let exists = thiscolumns.find(\n          (tcb) =>\n            tcb.grouping === 'columns' &&\n            tcb.builder &&\n            tcb.builder._method === 'add' &&\n            tcb.builder._args &&\n            tcb.builder._args.indexOf(columns[i]) > -1\n        );\n        if (exists) {\n          exists = exists.builder;\n        }\n        const nullable = !(\n          exists &&\n          exists._modifiers &&\n          exists._modifiers['nullable'] &&\n          exists._modifiers['nullable'][0] === false\n        );\n        if (nullable) {\n          if (exists) {\n            return this.client.logger.warn(\n              'Redshift does not allow primary keys to contain nullable columns.'\n            );\n          } else {\n            return this.client.logger.warn(\n              'Redshift does not allow primary keys to contain nonexistent columns.'\n            );\n          }\n        }\n      }\n    }\n    return self.pushQuery(\n      `alter table ${self.tableName()} add constraint ${constraintName} primary key (${self.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  // Compiles column add. Redshift can only add one column per ALTER TABLE, so core addColumns doesn't work.  #2545\n  addColumns(columns, prefix, colCompilers) {\n    if (prefix === this.alterColumnsPrefix) {\n      super.addColumns(columns, prefix, colCompilers);\n    } else {\n      prefix = prefix || this.addColumnsPrefix;\n      colCompilers = colCompilers || this.getColumns();\n      for (const col of colCompilers) {\n        const quotedTableName = this.tableName();\n        const colCompiled = col.compileColumn();\n\n        this.pushQuery({\n          sql: `alter table ${quotedTableName} ${prefix}${colCompiled}`,\n          bindings: [],\n        });\n      }\n    }\n  }\n}\n\nmodule.exports = TableCompiler_Redshift;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}