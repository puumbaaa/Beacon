{"ast":null,"code":"// PostgreSQL Native Driver (pg-native)\n// -------\nconst Client_PG = require('../postgres');\nclass Client_PgNative extends Client_PG {\n  constructor(...args) {\n    super(...args);\n    this.driverName = 'pgnative';\n    this.canCancelQuery = true;\n  }\n  _driver() {\n    return require('pg').native;\n  }\n  _stream(connection, obj, stream, options) {\n    if (!obj.sql) throw new Error('The query is empty');\n    const client = this;\n    return new Promise((resolver, rejecter) => {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n      return client._query(connection, obj).then(obj => obj.response).then(({\n        rows\n      }) => rows.forEach(row => stream.write(row))).catch(function (err) {\n        stream.emit('error', err);\n      }).then(function () {\n        stream.end();\n      });\n    });\n  }\n  async cancelQuery(connectionToKill) {\n    try {\n      return await this._wrappedCancelQueryCall(null, connectionToKill);\n    } catch (err) {\n      this.logger.warn(`Connection Error: ${err}`);\n      throw err;\n    }\n  }\n  _wrappedCancelQueryCall(emptyConnection, connectionToKill) {\n    return new Promise(function (resolve, reject) {\n      connectionToKill.native.cancel(function (err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(true);\n      });\n    });\n  }\n}\nmodule.exports = Client_PgNative;","map":{"version":3,"names":["Client_PG","require","Client_PgNative","constructor","args","driverName","canCancelQuery","_driver","native","_stream","connection","obj","stream","options","sql","Error","client","Promise","resolver","rejecter","on","_query","then","response","rows","forEach","row","write","catch","err","emit","end","cancelQuery","connectionToKill","_wrappedCancelQueryCall","logger","warn","emptyConnection","resolve","reject","cancel","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/pgnative/index.js"],"sourcesContent":["// PostgreSQL Native Driver (pg-native)\n// -------\nconst Client_PG = require('../postgres');\n\nclass Client_PgNative extends Client_PG {\n  constructor(...args) {\n    super(...args);\n    this.driverName = 'pgnative';\n    this.canCancelQuery = true;\n  }\n\n  _driver() {\n    return require('pg').native;\n  }\n\n  _stream(connection, obj, stream, options) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    const client = this;\n    return new Promise((resolver, rejecter) => {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n\n      return client\n        ._query(connection, obj)\n        .then((obj) => obj.response)\n        .then(({ rows }) => rows.forEach((row) => stream.write(row)))\n        .catch(function (err) {\n          stream.emit('error', err);\n        })\n        .then(function () {\n          stream.end();\n        });\n    });\n  }\n\n  async cancelQuery(connectionToKill) {\n    try {\n      return await this._wrappedCancelQueryCall(null, connectionToKill);\n    } catch (err) {\n      this.logger.warn(`Connection Error: ${err}`);\n      throw err;\n    }\n  }\n\n  _wrappedCancelQueryCall(emptyConnection, connectionToKill) {\n    return new Promise(function (resolve, reject) {\n      connectionToKill.native.cancel(function (err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(true);\n      });\n    });\n  }\n}\n\nmodule.exports = Client_PgNative;\n"],"mappings":"AAAA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AAExC,MAAMC,eAAe,SAASF,SAAS,CAAC;EACtCG,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACd,IAAI,CAACC,UAAU,GAAG,UAAU;IAC5B,IAAI,CAACC,cAAc,GAAG,IAAI;EAC5B;EAEAC,OAAOA,CAAA,EAAG;IACR,OAAON,OAAO,CAAC,IAAI,CAAC,CAACO,MAAM;EAC7B;EAEAC,OAAOA,CAACC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;IACxC,IAAI,CAACF,GAAG,CAACG,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IAEnD,MAAMC,MAAM,GAAG,IAAI;IACnB,OAAO,IAAIC,OAAO,CAAC,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MACzCP,MAAM,CAACQ,EAAE,CAAC,OAAO,EAAED,QAAQ,CAAC;MAC5BP,MAAM,CAACQ,EAAE,CAAC,KAAK,EAAEF,QAAQ,CAAC;MAE1B,OAAOF,MAAM,CACVK,MAAM,CAACX,UAAU,EAAEC,GAAG,CAAC,CACvBW,IAAI,CAAEX,GAAG,IAAKA,GAAG,CAACY,QAAQ,CAAC,CAC3BD,IAAI,CAAC,CAAC;QAAEE;MAAK,CAAC,KAAKA,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAKd,MAAM,CAACe,KAAK,CAACD,GAAG,CAAC,CAAC,CAAC,CAC5DE,KAAK,CAAC,UAAUC,GAAG,EAAE;QACpBjB,MAAM,CAACkB,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;MAC3B,CAAC,CAAC,CACDP,IAAI,CAAC,YAAY;QAChBV,MAAM,CAACmB,GAAG,CAAC,CAAC;MACd,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAEA,MAAMC,WAAWA,CAACC,gBAAgB,EAAE;IAClC,IAAI;MACF,OAAO,MAAM,IAAI,CAACC,uBAAuB,CAAC,IAAI,EAAED,gBAAgB,CAAC;IACnE,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZ,IAAI,CAACM,MAAM,CAACC,IAAI,CAAC,qBAAqBP,GAAG,EAAE,CAAC;MAC5C,MAAMA,GAAG;IACX;EACF;EAEAK,uBAAuBA,CAACG,eAAe,EAAEJ,gBAAgB,EAAE;IACzD,OAAO,IAAIhB,OAAO,CAAC,UAAUqB,OAAO,EAAEC,MAAM,EAAE;MAC5CN,gBAAgB,CAACzB,MAAM,CAACgC,MAAM,CAAC,UAAUX,GAAG,EAAE;QAC5C,IAAIA,GAAG,EAAE;UACPU,MAAM,CAACV,GAAG,CAAC;UACX;QACF;QAEAS,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF;AAEAG,MAAM,CAACC,OAAO,GAAGxC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}