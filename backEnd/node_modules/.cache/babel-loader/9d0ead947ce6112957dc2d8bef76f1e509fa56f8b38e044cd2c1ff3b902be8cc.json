{"ast":null,"code":"const Transaction = require('../../execution/transaction');\nconst debug = require('debug')('knex:tx');\nclass Transaction_MSSQL extends Transaction {\n  begin( /** @type {import('tedious').Connection} */conn) {\n    debug('transaction::begin id=%s', this.txid);\n    return new Promise((resolve, reject) => {\n      conn.beginTransaction(err => {\n        if (err) {\n          debug('transaction::begin error id=%s message=%s', this.txid, err.message);\n          return reject(err);\n        }\n        resolve();\n      }, this.outerTx ? this.txid : undefined, nameToIsolationLevelEnum(this.isolationLevel));\n    }).then(this._resolver, this._rejecter);\n  }\n  savepoint(conn) {\n    debug('transaction::savepoint id=%s', this.txid);\n    return new Promise((resolve, reject) => {\n      conn.saveTransaction(err => {\n        if (err) {\n          debug('transaction::savepoint id=%s message=%s', this.txid, err.message);\n          return reject(err);\n        }\n        this.trxClient.emit('query', {\n          __knexUid: this.trxClient.__knexUid,\n          __knexTxId: this.trxClient.__knexTxId,\n          autogenerated: true,\n          sql: this.outerTx ? `SAVE TRANSACTION [${this.txid}]` : `SAVE TRANSACTION`\n        });\n        resolve();\n      }, this.outerTx ? this.txid : undefined);\n    });\n  }\n  commit(conn, value) {\n    debug('transaction::commit id=%s', this.txid);\n    return new Promise((resolve, reject) => {\n      conn.commitTransaction(err => {\n        if (err) {\n          debug('transaction::commit error id=%s message=%s', this.txid, err.message);\n          return reject(err);\n        }\n        this._completed = true;\n        resolve(value);\n      }, this.outerTx ? this.txid : undefined);\n    }).then(() => this._resolver(value), this._rejecter);\n  }\n  release(conn, value) {\n    return this._resolver(value);\n  }\n  rollback(conn, error) {\n    this._completed = true;\n    debug('transaction::rollback id=%s', this.txid);\n    return new Promise((_resolve, reject) => {\n      if (!conn.inTransaction) {\n        return reject(error || new Error('Transaction rejected with non-error: undefined'));\n      }\n      if (conn.state.name !== 'LoggedIn') {\n        return reject(new Error(\"Can't rollback transaction. There is a request in progress\"));\n      }\n      conn.rollbackTransaction(err => {\n        if (err) {\n          debug('transaction::rollback error id=%s message=%s', this.txid, err.message);\n        }\n        reject(err || error || new Error('Transaction rejected with non-error: undefined'));\n      }, this.outerTx ? this.txid : undefined);\n    }).catch(err => {\n      if (!error && this.doNotRejectOnRollback) {\n        this._resolver();\n        return;\n      }\n      if (error) {\n        try {\n          err.originalError = error;\n        } catch (_err) {\n          // This is to handle https://github.com/knex/knex/issues/4128\n        }\n      }\n      this._rejecter(err);\n    });\n  }\n  rollbackTo(conn, error) {\n    return this.rollback(conn, error).then(() => void this.trxClient.emit('query', {\n      __knexUid: this.trxClient.__knexUid,\n      __knexTxId: this.trxClient.__knexTxId,\n      autogenerated: true,\n      sql: `ROLLBACK TRANSACTION`\n    }));\n  }\n}\nmodule.exports = Transaction_MSSQL;\nfunction nameToIsolationLevelEnum(level) {\n  if (!level) return;\n  level = level.toUpperCase().replace(' ', '_');\n  const knownEnum = isolationEnum[level];\n  if (!knownEnum) {\n    throw new Error(`Unknown Isolation level, was expecting one of: ${JSON.stringify(humanReadableKeys)}`);\n  }\n  return knownEnum;\n}\n\n// Based on: https://github.com/tediousjs/node-mssql/blob/master/lib/isolationlevel.js\nconst isolationEnum = {\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05\n};\nconst humanReadableKeys = Object.keys(isolationEnum).map(key => key.toLowerCase().replace('_', ' '));","map":{"version":3,"names":["Transaction","require","debug","Transaction_MSSQL","begin","conn","txid","Promise","resolve","reject","beginTransaction","err","message","outerTx","undefined","nameToIsolationLevelEnum","isolationLevel","then","_resolver","_rejecter","savepoint","saveTransaction","trxClient","emit","__knexUid","__knexTxId","autogenerated","sql","commit","value","commitTransaction","_completed","release","rollback","error","_resolve","inTransaction","Error","state","name","rollbackTransaction","catch","doNotRejectOnRollback","originalError","_err","rollbackTo","module","exports","level","toUpperCase","replace","knownEnum","isolationEnum","JSON","stringify","humanReadableKeys","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","Object","keys","map","key","toLowerCase"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/mssql/transaction.js"],"sourcesContent":["const Transaction = require('../../execution/transaction');\nconst debug = require('debug')('knex:tx');\n\nclass Transaction_MSSQL extends Transaction {\n  begin(/** @type {import('tedious').Connection} */ conn) {\n    debug('transaction::begin id=%s', this.txid);\n\n    return new Promise((resolve, reject) => {\n      conn.beginTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::begin error id=%s message=%s',\n              this.txid,\n              err.message\n            );\n            return reject(err);\n          }\n          resolve();\n        },\n        this.outerTx ? this.txid : undefined,\n        nameToIsolationLevelEnum(this.isolationLevel)\n      );\n    }).then(this._resolver, this._rejecter);\n  }\n\n  savepoint(conn) {\n    debug('transaction::savepoint id=%s', this.txid);\n\n    return new Promise((resolve, reject) => {\n      conn.saveTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::savepoint id=%s message=%s',\n              this.txid,\n              err.message\n            );\n            return reject(err);\n          }\n\n          this.trxClient.emit('query', {\n            __knexUid: this.trxClient.__knexUid,\n            __knexTxId: this.trxClient.__knexTxId,\n            autogenerated: true,\n            sql: this.outerTx\n              ? `SAVE TRANSACTION [${this.txid}]`\n              : `SAVE TRANSACTION`,\n          });\n          resolve();\n        },\n        this.outerTx ? this.txid : undefined\n      );\n    });\n  }\n\n  commit(conn, value) {\n    debug('transaction::commit id=%s', this.txid);\n\n    return new Promise((resolve, reject) => {\n      conn.commitTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::commit error id=%s message=%s',\n              this.txid,\n              err.message\n            );\n            return reject(err);\n          }\n\n          this._completed = true;\n          resolve(value);\n        },\n        this.outerTx ? this.txid : undefined\n      );\n    }).then(() => this._resolver(value), this._rejecter);\n  }\n\n  release(conn, value) {\n    return this._resolver(value);\n  }\n\n  rollback(conn, error) {\n    this._completed = true;\n    debug('transaction::rollback id=%s', this.txid);\n\n    return new Promise((_resolve, reject) => {\n      if (!conn.inTransaction) {\n        return reject(\n          error || new Error('Transaction rejected with non-error: undefined')\n        );\n      }\n\n      if (conn.state.name !== 'LoggedIn') {\n        return reject(\n          new Error(\n            \"Can't rollback transaction. There is a request in progress\"\n          )\n        );\n      }\n\n      conn.rollbackTransaction(\n        (err) => {\n          if (err) {\n            debug(\n              'transaction::rollback error id=%s message=%s',\n              this.txid,\n              err.message\n            );\n          }\n\n          reject(\n            err ||\n              error ||\n              new Error('Transaction rejected with non-error: undefined')\n          );\n        },\n        this.outerTx ? this.txid : undefined\n      );\n    }).catch((err) => {\n      if (!error && this.doNotRejectOnRollback) {\n        this._resolver();\n        return;\n      }\n      if (error) {\n        try {\n          err.originalError = error;\n        } catch (_err) {\n          // This is to handle https://github.com/knex/knex/issues/4128\n        }\n      }\n      this._rejecter(err);\n    });\n  }\n\n  rollbackTo(conn, error) {\n    return this.rollback(conn, error).then(\n      () =>\n        void this.trxClient.emit('query', {\n          __knexUid: this.trxClient.__knexUid,\n          __knexTxId: this.trxClient.__knexTxId,\n          autogenerated: true,\n          sql: `ROLLBACK TRANSACTION`,\n        })\n    );\n  }\n}\n\nmodule.exports = Transaction_MSSQL;\n\nfunction nameToIsolationLevelEnum(level) {\n  if (!level) return;\n  level = level.toUpperCase().replace(' ', '_');\n  const knownEnum = isolationEnum[level];\n  if (!knownEnum) {\n    throw new Error(\n      `Unknown Isolation level, was expecting one of: ${JSON.stringify(\n        humanReadableKeys\n      )}`\n    );\n  }\n  return knownEnum;\n}\n\n// Based on: https://github.com/tediousjs/node-mssql/blob/master/lib/isolationlevel.js\nconst isolationEnum = {\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05,\n};\nconst humanReadableKeys = Object.keys(isolationEnum).map((key) =>\n  key.toLowerCase().replace('_', ' ')\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}