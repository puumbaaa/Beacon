{"ast":null,"code":"/* eslint max-len:0*/\n\n// MySQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst {\n  isObject,\n  isString\n} = require('../../../util/is');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_MySQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n  createQuery(columns, ifNot, like) {\n    const createStatement = ifNot ? 'create table if not exists ' : 'create table ';\n    const {\n      client\n    } = this;\n    let conn = {};\n    let columnsSql = ' (' + columns.sql.join(', ');\n    columnsSql += this.primaryKeys() || '';\n    columnsSql += this._addChecks();\n    columnsSql += ')';\n    let sql = createStatement + this.tableName() + (like && this.tableNameLike() ? ' like ' + this.tableNameLike() : columnsSql);\n\n    // Check if the connection settings are set.\n    if (client.connectionSettings) {\n      conn = client.connectionSettings;\n    }\n    const charset = this.single.charset || conn.charset || '';\n    const collation = this.single.collate || conn.collate || '';\n    const engine = this.single.engine || '';\n    if (charset && !like) sql += ` default character set ${charset}`;\n    if (collation) sql += ` collate ${collation}`;\n    if (engine) sql += ` engine = ${engine}`;\n    if (this.single.comment) {\n      const comment = this.single.comment || '';\n      const MAX_COMMENT_LENGTH = 1024;\n      if (comment.length > MAX_COMMENT_LENGTH) this.client.logger.warn(`The max length for a table comment is ${MAX_COMMENT_LENGTH} characters`);\n      sql += ` comment = '${comment}'`;\n    }\n    this.pushQuery(sql);\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`alter table ${this.tableName()} comment = '${comment}'`);\n  }\n  changeType() {\n    // alter table + table + ' modify ' + wrapped + '// type';\n  }\n\n  // Renames a column on the table.\n  renameColumn(from, to) {\n    const compiler = this;\n    const table = this.tableName();\n    const wrapped = this.formatter.wrap(from) + ' ' + this.formatter.wrap(to);\n    this.pushQuery({\n      sql: `show full fields from ${table} where field = ` + this.client.parameter(from, this.tableBuilder, this.bindingsHolder),\n      output(resp) {\n        const column = resp[0];\n        const runner = this;\n        return compiler.getFKRefs(runner).then(([refs]) => new Promise((resolve, reject) => {\n          try {\n            if (!refs.length) {\n              resolve();\n            }\n            resolve(compiler.dropFKRefs(runner, refs));\n          } catch (e) {\n            reject(e);\n          }\n        }).then(function () {\n          let sql = `alter table ${table} change ${wrapped} ${column.Type}`;\n          if (String(column.Null).toUpperCase() !== 'YES') {\n            sql += ` NOT NULL`;\n          } else {\n            // This doesn't matter for most cases except Timestamp, where this is important\n            sql += ` NULL`;\n          }\n          if (column.Default !== void 0 && column.Default !== null) {\n            sql += ` DEFAULT '${column.Default}'`;\n          }\n          if (column.Collation !== void 0 && column.Collation !== null) {\n            sql += ` COLLATE '${column.Collation}'`;\n          }\n          // Add back the auto increment if the column  it, fix issue #2767\n          if (column.Extra == 'auto_increment') {\n            sql += ` AUTO_INCREMENT`;\n          }\n          return runner.query({\n            sql\n          });\n        }).then(function () {\n          if (!refs.length) {\n            return;\n          }\n          return compiler.createFKRefs(runner, refs.map(function (ref) {\n            if (ref.REFERENCED_COLUMN_NAME === from) {\n              ref.REFERENCED_COLUMN_NAME = to;\n            }\n            if (ref.COLUMN_NAME === from) {\n              ref.COLUMN_NAME = to;\n            }\n            return ref;\n          }));\n        }));\n      }\n    });\n  }\n  primaryKeys() {\n    const pks = (this.grouped.alterTable || []).filter(k => k.method === 'primary');\n    if (pks.length > 0 && pks[0].args.length > 0) {\n      const columns = pks[0].args[0];\n      let constraintName = pks[0].args[1] || '';\n      if (constraintName) {\n        constraintName = ' constraint ' + this.formatter.wrap(constraintName);\n      }\n      if (this.grouped.columns) {\n        const incrementsCols = this._getIncrementsColumnNames();\n        if (incrementsCols.length) {\n          incrementsCols.forEach(c => {\n            if (!columns.includes(c)) {\n              columns.unshift(c);\n            }\n          });\n        }\n        const bigIncrementsCols = this._getBigIncrementsColumnNames();\n        if (bigIncrementsCols.length) {\n          bigIncrementsCols.forEach(c => {\n            if (!columns.includes(c)) {\n              columns.unshift(c);\n            }\n          });\n        }\n      }\n      return `,${constraintName} primary key (${this.formatter.columnize(columns)})`;\n    }\n  }\n  getFKRefs(runner) {\n    const bindingsHolder = {\n      bindings: []\n    };\n    const sql = 'SELECT KCU.CONSTRAINT_NAME, KCU.TABLE_NAME, KCU.COLUMN_NAME, ' + '       KCU.REFERENCED_TABLE_NAME, KCU.REFERENCED_COLUMN_NAME, ' + '       RC.UPDATE_RULE, RC.DELETE_RULE ' + 'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ' + 'JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ' + '       USING(CONSTRAINT_NAME)' + 'WHERE KCU.REFERENCED_TABLE_NAME = ' + this.client.parameter(this.tableNameRaw, this.tableBuilder, bindingsHolder) + ' ' + '  AND KCU.CONSTRAINT_SCHEMA = ' + this.client.parameter(this.client.database(), this.tableBuilder, bindingsHolder) + ' ' + '  AND RC.CONSTRAINT_SCHEMA = ' + this.client.parameter(this.client.database(), this.tableBuilder, bindingsHolder);\n    return runner.query({\n      sql,\n      bindings: bindingsHolder.bindings\n    });\n  }\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      return runner.query({\n        sql: `alter table ${tableName} drop foreign key ${constraintName}`\n      });\n    }));\n  }\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n    return Promise.all(refs.map(function (ref) {\n      const tableName = formatter.wrap(ref.TABLE_NAME);\n      const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n      const column = formatter.columnize(ref.COLUMN_NAME);\n      const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n      const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n      const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n      const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n      return runner.query({\n        sql: `alter table ${tableName} add constraint ${keyName} ` + 'foreign key (' + column + ') references ' + inTable + ' (' + references + ')' + onUpdate + onDelete\n      });\n    }));\n  }\n  index(columns, indexName, options) {\n    let storageEngineIndexType;\n    let indexType;\n    if (isString(options)) {\n      indexType = options;\n    } else if (isObject(options)) {\n      ({\n        indexType,\n        storageEngineIndexType\n      } = options);\n    }\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    storageEngineIndexType = storageEngineIndexType ? ` using ${storageEngineIndexType}` : '';\n    this.pushQuery(`alter table ${this.tableName()} add${indexType ? ` ${indexType}` : ''} index ${indexName}(${this.formatter.columnize(columns)})${storageEngineIndexType}`);\n  }\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({\n        constraintName,\n        deferrable\n      } = constraintName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(`mysql: primary key constraint \\`${constraintName}\\` will not be deferrable ${deferrable} because mysql does not support deferred constraints.`);\n    }\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    const primaryCols = columns;\n    let incrementsCols = [];\n    let bigIncrementsCols = [];\n    if (this.grouped.columns) {\n      incrementsCols = this._getIncrementsColumnNames();\n      if (incrementsCols) {\n        incrementsCols.forEach(c => {\n          if (!primaryCols.includes(c)) {\n            primaryCols.unshift(c);\n          }\n        });\n      }\n      bigIncrementsCols = this._getBigIncrementsColumnNames();\n      if (bigIncrementsCols) {\n        bigIncrementsCols.forEach(c => {\n          if (!primaryCols.includes(c)) {\n            primaryCols.unshift(c);\n          }\n        });\n      }\n    }\n    if (this.method !== 'create' && this.method !== 'createIfNot') {\n      this.pushQuery(`alter table ${this.tableName()} add primary key ${constraintName}(${this.formatter.columnize(primaryCols)})`);\n    }\n    if (incrementsCols.length) {\n      this.pushQuery(`alter table ${this.tableName()} modify column ${this.formatter.columnize(incrementsCols)} int unsigned not null auto_increment`);\n    }\n    if (bigIncrementsCols.length) {\n      this.pushQuery(`alter table ${this.tableName()} modify column ${this.formatter.columnize(bigIncrementsCols)} bigint unsigned not null auto_increment`);\n    }\n  }\n  unique(columns, indexName) {\n    let storageEngineIndexType;\n    let deferrable;\n    if (isObject(indexName)) {\n      ({\n        indexName,\n        deferrable,\n        storageEngineIndexType\n      } = indexName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(`mysql: unique index \\`${indexName}\\` will not be deferrable ${deferrable} because mysql does not support deferred constraints.`);\n    }\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    storageEngineIndexType = storageEngineIndexType ? ` using ${storageEngineIndexType}` : '';\n    this.pushQuery(`alter table ${this.tableName()} add unique ${indexName}(${this.formatter.columnize(columns)})${storageEngineIndexType}`);\n  }\n\n  // Compile a drop index command.\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n\n  // Compile a drop foreign key command.\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop foreign key ${indexName}`);\n  }\n\n  // Compile a drop primary key command.\n  dropPrimary() {\n    this.pushQuery(`alter table ${this.tableName()} drop primary key`);\n  }\n\n  // Compile a drop unique key command.\n  dropUnique(column, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n}\nTableCompiler_MySQL.prototype.addColumnsPrefix = 'add ';\nTableCompiler_MySQL.prototype.alterColumnsPrefix = 'modify ';\nTableCompiler_MySQL.prototype.dropColumnPrefix = 'drop ';\nmodule.exports = TableCompiler_MySQL;","map":{"version":3,"names":["TableCompiler","require","isObject","isString","TableCompiler_MySQL","constructor","client","tableBuilder","createQuery","columns","ifNot","like","createStatement","conn","columnsSql","sql","join","primaryKeys","_addChecks","tableName","tableNameLike","connectionSettings","charset","single","collation","collate","engine","comment","MAX_COMMENT_LENGTH","length","logger","warn","pushQuery","addColumns","addColumnsPrefix","changeType","renameColumn","from","to","compiler","table","wrapped","formatter","wrap","parameter","bindingsHolder","output","resp","column","runner","getFKRefs","then","refs","Promise","resolve","reject","dropFKRefs","e","Type","String","Null","toUpperCase","Default","Collation","Extra","query","createFKRefs","map","ref","REFERENCED_COLUMN_NAME","COLUMN_NAME","pks","grouped","alterTable","filter","k","method","args","constraintName","incrementsCols","_getIncrementsColumnNames","forEach","c","includes","unshift","bigIncrementsCols","_getBigIncrementsColumnNames","columnize","bindings","tableNameRaw","database","all","CONSTRAINT_NAME","TABLE_NAME","keyName","references","inTable","REFERENCED_TABLE_NAME","onUpdate","UPDATE_RULE","onDelete","DELETE_RULE","index","indexName","options","storageEngineIndexType","indexType","_indexCommand","primary","deferrable","primaryCols","unique","dropIndex","dropForeign","dropPrimary","dropUnique","prototype","alterColumnsPrefix","dropColumnPrefix","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/mysql/schema/mysql-tablecompiler.js"],"sourcesContent":["/* eslint max-len:0*/\n\n// MySQL Table Builder & Compiler\n// -------\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst { isObject, isString } = require('../../../util/is');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_MySQL extends TableCompiler {\n  constructor(client, tableBuilder) {\n    super(client, tableBuilder);\n  }\n\n  createQuery(columns, ifNot, like) {\n    const createStatement = ifNot\n      ? 'create table if not exists '\n      : 'create table ';\n    const { client } = this;\n    let conn = {};\n    let columnsSql = ' (' + columns.sql.join(', ');\n\n    columnsSql += this.primaryKeys() || '';\n    columnsSql += this._addChecks();\n    columnsSql += ')';\n\n    let sql =\n      createStatement +\n      this.tableName() +\n      (like && this.tableNameLike()\n        ? ' like ' + this.tableNameLike()\n        : columnsSql);\n\n    // Check if the connection settings are set.\n    if (client.connectionSettings) {\n      conn = client.connectionSettings;\n    }\n\n    const charset = this.single.charset || conn.charset || '';\n    const collation = this.single.collate || conn.collate || '';\n    const engine = this.single.engine || '';\n\n    if (charset && !like) sql += ` default character set ${charset}`;\n    if (collation) sql += ` collate ${collation}`;\n    if (engine) sql += ` engine = ${engine}`;\n\n    if (this.single.comment) {\n      const comment = this.single.comment || '';\n      const MAX_COMMENT_LENGTH = 1024;\n      if (comment.length > MAX_COMMENT_LENGTH)\n        this.client.logger.warn(\n          `The max length for a table comment is ${MAX_COMMENT_LENGTH} characters`\n        );\n      sql += ` comment = '${comment}'`;\n    }\n\n    this.pushQuery(sql);\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`alter table ${this.tableName()} comment = '${comment}'`);\n  }\n\n  changeType() {\n    // alter table + table + ' modify ' + wrapped + '// type';\n  }\n\n  // Renames a column on the table.\n  renameColumn(from, to) {\n    const compiler = this;\n    const table = this.tableName();\n    const wrapped = this.formatter.wrap(from) + ' ' + this.formatter.wrap(to);\n\n    this.pushQuery({\n      sql:\n        `show full fields from ${table} where field = ` +\n        this.client.parameter(from, this.tableBuilder, this.bindingsHolder),\n      output(resp) {\n        const column = resp[0];\n        const runner = this;\n        return compiler.getFKRefs(runner).then(([refs]) =>\n          new Promise((resolve, reject) => {\n            try {\n              if (!refs.length) {\n                resolve();\n              }\n              resolve(compiler.dropFKRefs(runner, refs));\n            } catch (e) {\n              reject(e);\n            }\n          })\n            .then(function () {\n              let sql = `alter table ${table} change ${wrapped} ${column.Type}`;\n\n              if (String(column.Null).toUpperCase() !== 'YES') {\n                sql += ` NOT NULL`;\n              } else {\n                // This doesn't matter for most cases except Timestamp, where this is important\n                sql += ` NULL`;\n              }\n              if (column.Default !== void 0 && column.Default !== null) {\n                sql += ` DEFAULT '${column.Default}'`;\n              }\n              if (column.Collation !== void 0 && column.Collation !== null) {\n                sql += ` COLLATE '${column.Collation}'`;\n              }\n              // Add back the auto increment if the column  it, fix issue #2767\n              if (column.Extra == 'auto_increment') {\n                sql += ` AUTO_INCREMENT`;\n              }\n\n              return runner.query({\n                sql,\n              });\n            })\n            .then(function () {\n              if (!refs.length) {\n                return;\n              }\n              return compiler.createFKRefs(\n                runner,\n                refs.map(function (ref) {\n                  if (ref.REFERENCED_COLUMN_NAME === from) {\n                    ref.REFERENCED_COLUMN_NAME = to;\n                  }\n                  if (ref.COLUMN_NAME === from) {\n                    ref.COLUMN_NAME = to;\n                  }\n                  return ref;\n                })\n              );\n            })\n        );\n      },\n    });\n  }\n\n  primaryKeys() {\n    const pks = (this.grouped.alterTable || []).filter(\n      (k) => k.method === 'primary'\n    );\n    if (pks.length > 0 && pks[0].args.length > 0) {\n      const columns = pks[0].args[0];\n      let constraintName = pks[0].args[1] || '';\n      if (constraintName) {\n        constraintName = ' constraint ' + this.formatter.wrap(constraintName);\n      }\n\n      if (this.grouped.columns) {\n        const incrementsCols = this._getIncrementsColumnNames();\n        if (incrementsCols.length) {\n          incrementsCols.forEach((c) => {\n            if (!columns.includes(c)) {\n              columns.unshift(c);\n            }\n          });\n        }\n        const bigIncrementsCols = this._getBigIncrementsColumnNames();\n        if (bigIncrementsCols.length) {\n          bigIncrementsCols.forEach((c) => {\n            if (!columns.includes(c)) {\n              columns.unshift(c);\n            }\n          });\n        }\n      }\n\n      return `,${constraintName} primary key (${this.formatter.columnize(\n        columns\n      )})`;\n    }\n  }\n\n  getFKRefs(runner) {\n    const bindingsHolder = {\n      bindings: [],\n    };\n\n    const sql =\n      'SELECT KCU.CONSTRAINT_NAME, KCU.TABLE_NAME, KCU.COLUMN_NAME, ' +\n      '       KCU.REFERENCED_TABLE_NAME, KCU.REFERENCED_COLUMN_NAME, ' +\n      '       RC.UPDATE_RULE, RC.DELETE_RULE ' +\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ' +\n      'JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC ' +\n      '       USING(CONSTRAINT_NAME)' +\n      'WHERE KCU.REFERENCED_TABLE_NAME = ' +\n      this.client.parameter(\n        this.tableNameRaw,\n        this.tableBuilder,\n        bindingsHolder\n      ) +\n      ' ' +\n      '  AND KCU.CONSTRAINT_SCHEMA = ' +\n      this.client.parameter(\n        this.client.database(),\n        this.tableBuilder,\n        bindingsHolder\n      ) +\n      ' ' +\n      '  AND RC.CONSTRAINT_SCHEMA = ' +\n      this.client.parameter(\n        this.client.database(),\n        this.tableBuilder,\n        bindingsHolder\n      );\n\n    return runner.query({\n      sql,\n      bindings: bindingsHolder.bindings,\n    });\n  }\n\n  dropFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n\n    return Promise.all(\n      refs.map(function (ref) {\n        const constraintName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        return runner.query({\n          sql: `alter table ${tableName} drop foreign key ${constraintName}`,\n        });\n      })\n    );\n  }\n\n  createFKRefs(runner, refs) {\n    const formatter = this.client.formatter(this.tableBuilder);\n\n    return Promise.all(\n      refs.map(function (ref) {\n        const tableName = formatter.wrap(ref.TABLE_NAME);\n        const keyName = formatter.wrap(ref.CONSTRAINT_NAME);\n        const column = formatter.columnize(ref.COLUMN_NAME);\n        const references = formatter.columnize(ref.REFERENCED_COLUMN_NAME);\n        const inTable = formatter.wrap(ref.REFERENCED_TABLE_NAME);\n        const onUpdate = ` ON UPDATE ${ref.UPDATE_RULE}`;\n        const onDelete = ` ON DELETE ${ref.DELETE_RULE}`;\n\n        return runner.query({\n          sql:\n            `alter table ${tableName} add constraint ${keyName} ` +\n            'foreign key (' +\n            column +\n            ') references ' +\n            inTable +\n            ' (' +\n            references +\n            ')' +\n            onUpdate +\n            onDelete,\n        });\n      })\n    );\n  }\n\n  index(columns, indexName, options) {\n    let storageEngineIndexType;\n    let indexType;\n\n    if (isString(options)) {\n      indexType = options;\n    } else if (isObject(options)) {\n      ({ indexType, storageEngineIndexType } = options);\n    }\n\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    storageEngineIndexType = storageEngineIndexType\n      ? ` using ${storageEngineIndexType}`\n      : '';\n    this.pushQuery(\n      `alter table ${this.tableName()} add${\n        indexType ? ` ${indexType}` : ''\n      } index ${indexName}(${this.formatter.columnize(\n        columns\n      )})${storageEngineIndexType}`\n    );\n  }\n\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({ constraintName, deferrable } = constraintName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(\n        `mysql: primary key constraint \\`${constraintName}\\` will not be deferrable ${deferrable} because mysql does not support deferred constraints.`\n      );\n    }\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n\n    const primaryCols = columns;\n    let incrementsCols = [];\n    let bigIncrementsCols = [];\n    if (this.grouped.columns) {\n      incrementsCols = this._getIncrementsColumnNames();\n      if (incrementsCols) {\n        incrementsCols.forEach((c) => {\n          if (!primaryCols.includes(c)) {\n            primaryCols.unshift(c);\n          }\n        });\n      }\n      bigIncrementsCols = this._getBigIncrementsColumnNames();\n      if (bigIncrementsCols) {\n        bigIncrementsCols.forEach((c) => {\n          if (!primaryCols.includes(c)) {\n            primaryCols.unshift(c);\n          }\n        });\n      }\n    }\n    if (this.method !== 'create' && this.method !== 'createIfNot') {\n      this.pushQuery(\n        `alter table ${this.tableName()} add primary key ${constraintName}(${this.formatter.columnize(\n          primaryCols\n        )})`\n      );\n    }\n    if (incrementsCols.length) {\n      this.pushQuery(\n        `alter table ${this.tableName()} modify column ${this.formatter.columnize(\n          incrementsCols\n        )} int unsigned not null auto_increment`\n      );\n    }\n    if (bigIncrementsCols.length) {\n      this.pushQuery(\n        `alter table ${this.tableName()} modify column ${this.formatter.columnize(\n          bigIncrementsCols\n        )} bigint unsigned not null auto_increment`\n      );\n    }\n  }\n\n  unique(columns, indexName) {\n    let storageEngineIndexType;\n    let deferrable;\n    if (isObject(indexName)) {\n      ({ indexName, deferrable, storageEngineIndexType } = indexName);\n    }\n    if (deferrable && deferrable !== 'not deferrable') {\n      this.client.logger.warn(\n        `mysql: unique index \\`${indexName}\\` will not be deferrable ${deferrable} because mysql does not support deferred constraints.`\n      );\n    }\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    storageEngineIndexType = storageEngineIndexType\n      ? ` using ${storageEngineIndexType}`\n      : '';\n    this.pushQuery(\n      `alter table ${this.tableName()} add unique ${indexName}(${this.formatter.columnize(\n        columns\n      )})${storageEngineIndexType}`\n    );\n  }\n\n  // Compile a drop index command.\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n\n  // Compile a drop foreign key command.\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop foreign key ${indexName}`\n    );\n  }\n\n  // Compile a drop primary key command.\n  dropPrimary() {\n    this.pushQuery(`alter table ${this.tableName()} drop primary key`);\n  }\n\n  // Compile a drop unique key command.\n  dropUnique(column, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, column);\n    this.pushQuery(`alter table ${this.tableName()} drop index ${indexName}`);\n  }\n}\n\nTableCompiler_MySQL.prototype.addColumnsPrefix = 'add ';\nTableCompiler_MySQL.prototype.alterColumnsPrefix = 'modify ';\nTableCompiler_MySQL.prototype.dropColumnPrefix = 'drop ';\n\nmodule.exports = TableCompiler_MySQL;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}