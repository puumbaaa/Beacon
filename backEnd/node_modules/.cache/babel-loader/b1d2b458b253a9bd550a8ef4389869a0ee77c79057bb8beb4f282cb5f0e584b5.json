{"ast":null,"code":"const {\n  pushQuery,\n  pushAdditional,\n  unshiftQuery\n} = require('./internal/helpers');\n\n// The \"SchemaCompiler\" takes all of the query statements which have been\n// gathered in the \"SchemaBuilder\" and turns them into an array of\n// properly formatted / bound query strings.\nclass SchemaCompiler {\n  constructor(client, builder) {\n    this.builder = builder;\n    this._commonBuilder = this.builder;\n    this.client = client;\n    this.schema = builder._schema;\n    this.bindings = [];\n    this.bindingsHolder = this;\n    this.formatter = client.formatter(builder);\n    this.formatter.bindings = this.bindings;\n    this.sequence = [];\n  }\n  createSchema() {\n    throwOnlyPGError('createSchema');\n  }\n  createSchemaIfNotExists() {\n    throwOnlyPGError('createSchemaIfNotExists');\n  }\n  dropSchema() {\n    throwOnlyPGError('dropSchema');\n  }\n  dropSchemaIfExists() {\n    throwOnlyPGError('dropSchemaIfExists');\n  }\n  dropTable(tableName) {\n    this.pushQuery(this.dropTablePrefix + this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n  }\n  dropTableIfExists(tableName) {\n    this.pushQuery(this.dropTablePrefix + 'if exists ' + this.formatter.wrap(prefixedTableName(this.schema, tableName)));\n  }\n  dropView(viewName) {\n    this._dropView(viewName, false, false);\n  }\n  dropViewIfExists(viewName) {\n    this._dropView(viewName, true, false);\n  }\n  dropMaterializedView(viewName) {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n  dropMaterializedViewIfExists(viewName) {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n  renameView(from, to) {\n    throw new Error('rename view is not supported by this dialect (instead drop then create another view).');\n  }\n  refreshMaterializedView() {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n  _dropView(viewName, ifExists, materialized) {\n    this.pushQuery((materialized ? this.dropMaterializedViewPrefix : this.dropViewPrefix) + (ifExists ? 'if exists ' : '') + this.formatter.wrap(prefixedTableName(this.schema, viewName)));\n  }\n  raw(sql, bindings) {\n    this.sequence.push(this.client.raw(sql, bindings).toSQL());\n  }\n  toSQL() {\n    const sequence = this.builder._sequence;\n    for (let i = 0, l = sequence.length; i < l; i++) {\n      const query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n    return this.sequence;\n  }\n  async generateDdlCommands() {\n    const generatedCommands = this.toSQL();\n    return {\n      pre: [],\n      sql: Array.isArray(generatedCommands) ? generatedCommands : [generatedCommands],\n      check: null,\n      post: []\n    };\n  }\n}\nSchemaCompiler.prototype.dropTablePrefix = 'drop table ';\nSchemaCompiler.prototype.dropViewPrefix = 'drop view ';\nSchemaCompiler.prototype.dropMaterializedViewPrefix = 'drop materialized view ';\nSchemaCompiler.prototype.alterViewPrefix = 'alter view ';\nSchemaCompiler.prototype.alterTable = buildTable('alter');\nSchemaCompiler.prototype.createTable = buildTable('create');\nSchemaCompiler.prototype.createTableIfNotExists = buildTable('createIfNot');\nSchemaCompiler.prototype.createTableLike = buildTable('createLike');\nSchemaCompiler.prototype.createView = buildView('create');\nSchemaCompiler.prototype.createViewOrReplace = buildView('createOrReplace');\nSchemaCompiler.prototype.createMaterializedView = buildView('createMaterializedView');\nSchemaCompiler.prototype.alterView = buildView('alter');\nSchemaCompiler.prototype.pushQuery = pushQuery;\nSchemaCompiler.prototype.pushAdditional = pushAdditional;\nSchemaCompiler.prototype.unshiftQuery = unshiftQuery;\nfunction build(builder) {\n  // pass queryContext down to tableBuilder but do not overwrite it if already set\n  const queryContext = this.builder.queryContext();\n  if (queryContext !== undefined && builder.queryContext() === undefined) {\n    builder.queryContext(queryContext);\n  }\n  builder.setSchema(this.schema);\n  const sql = builder.toSQL();\n  for (let i = 0, l = sql.length; i < l; i++) {\n    this.sequence.push(sql[i]);\n  }\n}\nfunction buildTable(type) {\n  if (type === 'createLike') {\n    return function (tableName, tableNameLike, fn) {\n      const builder = this.client.tableBuilder(type, tableName, tableNameLike, fn);\n      build.call(this, builder);\n    };\n  } else {\n    return function (tableName, fn) {\n      const builder = this.client.tableBuilder(type, tableName, null, fn);\n      build.call(this, builder);\n    };\n  }\n}\nfunction buildView(type) {\n  return function (viewName, fn) {\n    const builder = this.client.viewBuilder(type, viewName, fn);\n    build.call(this, builder);\n  };\n}\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\nfunction throwOnlyPGError(operationName) {\n  throw new Error(`${operationName} is not supported for this dialect (only PostgreSQL supports it currently).`);\n}\nmodule.exports = SchemaCompiler;","map":{"version":3,"names":["pushQuery","pushAdditional","unshiftQuery","require","SchemaCompiler","constructor","client","builder","_commonBuilder","schema","_schema","bindings","bindingsHolder","formatter","sequence","createSchema","throwOnlyPGError","createSchemaIfNotExists","dropSchema","dropSchemaIfExists","dropTable","tableName","dropTablePrefix","wrap","prefixedTableName","dropTableIfExists","dropView","viewName","_dropView","dropViewIfExists","dropMaterializedView","Error","dropMaterializedViewIfExists","renameView","from","to","refreshMaterializedView","ifExists","materialized","dropMaterializedViewPrefix","dropViewPrefix","raw","sql","push","toSQL","_sequence","i","l","length","query","method","apply","args","generateDdlCommands","generatedCommands","pre","Array","isArray","check","post","prototype","alterViewPrefix","alterTable","buildTable","createTable","createTableIfNotExists","createTableLike","createView","buildView","createViewOrReplace","createMaterializedView","alterView","build","queryContext","undefined","setSchema","type","tableNameLike","fn","tableBuilder","call","viewBuilder","prefix","table","operationName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/schema/compiler.js"],"sourcesContent":["const {\n  pushQuery,\n  pushAdditional,\n  unshiftQuery,\n} = require('./internal/helpers');\n\n// The \"SchemaCompiler\" takes all of the query statements which have been\n// gathered in the \"SchemaBuilder\" and turns them into an array of\n// properly formatted / bound query strings.\nclass SchemaCompiler {\n  constructor(client, builder) {\n    this.builder = builder;\n    this._commonBuilder = this.builder;\n    this.client = client;\n    this.schema = builder._schema;\n\n    this.bindings = [];\n    this.bindingsHolder = this;\n    this.formatter = client.formatter(builder);\n    this.formatter.bindings = this.bindings;\n    this.sequence = [];\n  }\n\n  createSchema() {\n    throwOnlyPGError('createSchema');\n  }\n\n  createSchemaIfNotExists() {\n    throwOnlyPGError('createSchemaIfNotExists');\n  }\n\n  dropSchema() {\n    throwOnlyPGError('dropSchema');\n  }\n\n  dropSchemaIfExists() {\n    throwOnlyPGError('dropSchemaIfExists');\n  }\n\n  dropTable(tableName) {\n    this.pushQuery(\n      this.dropTablePrefix +\n        this.formatter.wrap(prefixedTableName(this.schema, tableName))\n    );\n  }\n\n  dropTableIfExists(tableName) {\n    this.pushQuery(\n      this.dropTablePrefix +\n        'if exists ' +\n        this.formatter.wrap(prefixedTableName(this.schema, tableName))\n    );\n  }\n\n  dropView(viewName) {\n    this._dropView(viewName, false, false);\n  }\n\n  dropViewIfExists(viewName) {\n    this._dropView(viewName, true, false);\n  }\n\n  dropMaterializedView(viewName) {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n\n  dropMaterializedViewIfExists(viewName) {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n\n  renameView(from, to) {\n    throw new Error(\n      'rename view is not supported by this dialect (instead drop then create another view).'\n    );\n  }\n\n  refreshMaterializedView() {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n\n  _dropView(viewName, ifExists, materialized) {\n    this.pushQuery(\n      (materialized ? this.dropMaterializedViewPrefix : this.dropViewPrefix) +\n        (ifExists ? 'if exists ' : '') +\n        this.formatter.wrap(prefixedTableName(this.schema, viewName))\n    );\n  }\n\n  raw(sql, bindings) {\n    this.sequence.push(this.client.raw(sql, bindings).toSQL());\n  }\n\n  toSQL() {\n    const sequence = this.builder._sequence;\n    for (let i = 0, l = sequence.length; i < l; i++) {\n      const query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n    return this.sequence;\n  }\n\n  async generateDdlCommands() {\n    const generatedCommands = this.toSQL();\n    return {\n      pre: [],\n      sql: Array.isArray(generatedCommands)\n        ? generatedCommands\n        : [generatedCommands],\n      check: null,\n      post: [],\n    };\n  }\n}\n\nSchemaCompiler.prototype.dropTablePrefix = 'drop table ';\nSchemaCompiler.prototype.dropViewPrefix = 'drop view ';\nSchemaCompiler.prototype.dropMaterializedViewPrefix = 'drop materialized view ';\nSchemaCompiler.prototype.alterViewPrefix = 'alter view ';\n\nSchemaCompiler.prototype.alterTable = buildTable('alter');\nSchemaCompiler.prototype.createTable = buildTable('create');\nSchemaCompiler.prototype.createTableIfNotExists = buildTable('createIfNot');\nSchemaCompiler.prototype.createTableLike = buildTable('createLike');\n\nSchemaCompiler.prototype.createView = buildView('create');\nSchemaCompiler.prototype.createViewOrReplace = buildView('createOrReplace');\nSchemaCompiler.prototype.createMaterializedView = buildView(\n  'createMaterializedView'\n);\nSchemaCompiler.prototype.alterView = buildView('alter');\n\nSchemaCompiler.prototype.pushQuery = pushQuery;\nSchemaCompiler.prototype.pushAdditional = pushAdditional;\nSchemaCompiler.prototype.unshiftQuery = unshiftQuery;\n\nfunction build(builder) {\n  // pass queryContext down to tableBuilder but do not overwrite it if already set\n  const queryContext = this.builder.queryContext();\n  if (queryContext !== undefined && builder.queryContext() === undefined) {\n    builder.queryContext(queryContext);\n  }\n\n  builder.setSchema(this.schema);\n  const sql = builder.toSQL();\n\n  for (let i = 0, l = sql.length; i < l; i++) {\n    this.sequence.push(sql[i]);\n  }\n}\n\nfunction buildTable(type) {\n  if (type === 'createLike') {\n    return function (tableName, tableNameLike, fn) {\n      const builder = this.client.tableBuilder(\n        type,\n        tableName,\n        tableNameLike,\n        fn\n      );\n      build.call(this, builder);\n    };\n  } else {\n    return function (tableName, fn) {\n      const builder = this.client.tableBuilder(type, tableName, null, fn);\n      build.call(this, builder);\n    };\n  }\n}\n\nfunction buildView(type) {\n  return function (viewName, fn) {\n    const builder = this.client.viewBuilder(type, viewName, fn);\n    build.call(this, builder);\n  };\n}\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\n\nfunction throwOnlyPGError(operationName) {\n  throw new Error(\n    `${operationName} is not supported for this dialect (only PostgreSQL supports it currently).`\n  );\n}\n\nmodule.exports = SchemaCompiler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}