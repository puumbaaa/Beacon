{"ast":null,"code":"const {\n  EventEmitter\n} = require('events');\nconst {\n  Migrator\n} = require('../migrations/migrate/Migrator');\nconst Seeder = require('../migrations/seed/Seeder');\nconst FunctionHelper = require('./FunctionHelper');\nconst QueryInterface = require('../query/method-constants');\nconst merge = require('lodash/merge');\nconst batchInsert = require('../execution/batch-insert');\nconst {\n  isObject\n} = require('../util/is');\nconst {\n  setHiddenProperty\n} = require('../util/security');\n\n// Javascript does not officially support \"callable objects\".  Instead,\n// you must create a regular Function and inject properties/methods\n// into it.  In other words: you can't leverage Prototype Inheritance\n// to share the property/method definitions.\n//\n// To work around this, we're creating an Object Property Definition.\n// This allow us to quickly inject everything into the `knex` function\n// via the `Object.defineProperties(..)` function.  More importantly,\n// it allows the same definitions to be shared across `knex` instances.\nconst KNEX_PROPERTY_DEFINITIONS = {\n  client: {\n    get() {\n      return this.context.client;\n    },\n    set(client) {\n      this.context.client = client;\n    },\n    configurable: true\n  },\n  userParams: {\n    get() {\n      return this.context.userParams;\n    },\n    set(userParams) {\n      this.context.userParams = userParams;\n    },\n    configurable: true\n  },\n  schema: {\n    get() {\n      return this.client.schemaBuilder();\n    },\n    configurable: true\n  },\n  migrate: {\n    get() {\n      return new Migrator(this);\n    },\n    configurable: true\n  },\n  seed: {\n    get() {\n      return new Seeder(this);\n    },\n    configurable: true\n  },\n  fn: {\n    get() {\n      return new FunctionHelper(this.client);\n    },\n    configurable: true\n  }\n};\n\n// `knex` instances serve as proxies around `context` objects.  So, calling\n// any of these methods on the `knex` instance will forward the call to\n// the `knex.context` object. This ensures that `this` will correctly refer\n// to `context` within each of these methods.\nconst CONTEXT_METHODS = ['raw', 'batchInsert', 'transaction', 'transactionProvider', 'initialize', 'destroy', 'ref', 'withUserParams', 'queryBuilder', 'disableProcessing', 'enableProcessing'];\nfor (const m of CONTEXT_METHODS) {\n  KNEX_PROPERTY_DEFINITIONS[m] = {\n    value: function (...args) {\n      return this.context[m](...args);\n    },\n    configurable: true\n  };\n}\nfunction makeKnex(client) {\n  // The object we're potentially using to kick off an initial chain.\n  function knex(tableName, options) {\n    return createQueryBuilder(knex.context, tableName, options);\n  }\n  redefineProperties(knex, client);\n  return knex;\n}\nfunction initContext(knexFn) {\n  const knexContext = knexFn.context || {};\n  Object.assign(knexContext, {\n    queryBuilder() {\n      return this.client.queryBuilder();\n    },\n    raw() {\n      return this.client.raw.apply(this.client, arguments);\n    },\n    batchInsert(table, batch, chunkSize = 1000) {\n      return batchInsert(this, table, batch, chunkSize);\n    },\n    // Creates a new transaction.\n    // If container is provided, returns a promise for when the transaction is resolved.\n    // If container is not provided, returns a promise with a transaction that is resolved\n    // when transaction is ready to be used.\n    transaction(container, _config) {\n      // Overload support of `transaction(config)`\n      if (!_config && isObject(container)) {\n        _config = container;\n        container = null;\n      }\n      const config = Object.assign({}, _config);\n      config.userParams = this.userParams || {};\n      if (config.doNotRejectOnRollback === undefined) {\n        config.doNotRejectOnRollback = true;\n      }\n      return this._transaction(container, config);\n    },\n    // Internal method that actually establishes the Transaction.  It makes no assumptions\n    // about the `config` or `outerTx`, and expects the caller to handle these details.\n    _transaction(container, config, outerTx = null) {\n      if (container) {\n        const trx = this.client.transaction(container, config, outerTx);\n        return trx;\n      } else {\n        return new Promise((resolve, reject) => {\n          this.client.transaction(resolve, config, outerTx).catch(reject);\n        });\n      }\n    },\n    transactionProvider(config) {\n      let trx;\n      return () => {\n        if (!trx) {\n          trx = this.transaction(undefined, config);\n        }\n        return trx;\n      };\n    },\n    // Typically never needed, initializes the pool for a knex client.\n    initialize(config) {\n      return this.client.initializePool(config);\n    },\n    // Convenience method for tearing down the pool.\n    destroy(callback) {\n      return this.client.destroy(callback);\n    },\n    ref(ref) {\n      return this.client.ref(ref);\n    },\n    // Do not document this as public API until naming and API is improved for general consumption\n    // This method exists to disable processing of internal queries in migrations\n    disableProcessing() {\n      if (this.userParams.isProcessingDisabled) {\n        return;\n      }\n      this.userParams.wrapIdentifier = this.client.config.wrapIdentifier;\n      this.userParams.postProcessResponse = this.client.config.postProcessResponse;\n      this.client.config.wrapIdentifier = null;\n      this.client.config.postProcessResponse = null;\n      this.userParams.isProcessingDisabled = true;\n    },\n    // Do not document this as public API until naming and API is improved for general consumption\n    // This method exists to enable execution of non-internal queries with consistent identifier naming in migrations\n    enableProcessing() {\n      if (!this.userParams.isProcessingDisabled) {\n        return;\n      }\n      this.client.config.wrapIdentifier = this.userParams.wrapIdentifier;\n      this.client.config.postProcessResponse = this.userParams.postProcessResponse;\n      this.userParams.isProcessingDisabled = false;\n    },\n    withUserParams(params) {\n      const knexClone = shallowCloneFunction(knexFn); // We need to include getters in our clone\n      if (this.client) {\n        knexClone.client = Object.create(this.client.constructor.prototype); // Clone client to avoid leaking listeners that are set on it\n        merge(knexClone.client, this.client);\n        knexClone.client.config = Object.assign({}, this.client.config); // Clone client config to make sure they can be modified independently\n\n        if (this.client.config.password) {\n          setHiddenProperty(knexClone.client.config, this.client.config);\n        }\n      }\n      redefineProperties(knexClone, knexClone.client);\n      _copyEventListeners('query', knexFn, knexClone);\n      _copyEventListeners('query-error', knexFn, knexClone);\n      _copyEventListeners('query-response', knexFn, knexClone);\n      _copyEventListeners('start', knexFn, knexClone);\n      knexClone.userParams = params;\n      return knexClone;\n    }\n  });\n  if (!knexFn.context) {\n    knexFn.context = knexContext;\n  }\n}\nfunction _copyEventListeners(eventName, sourceKnex, targetKnex) {\n  const listeners = sourceKnex.listeners(eventName);\n  listeners.forEach(listener => {\n    targetKnex.on(eventName, listener);\n  });\n}\nfunction redefineProperties(knex, client) {\n  // Allow chaining methods from the root object, before\n  // any other information is specified.\n  //\n  // TODO: `QueryBuilder.extend(..)` allows new QueryBuilder\n  //       methods to be introduced via external components.\n  //       As a side-effect, it also pushes the new method names\n  //       into the `QueryInterface` array.\n  //\n  //       The Problem: due to the way the code is currently\n  //       structured, these new methods cannot be retroactively\n  //       injected into existing `knex` instances!  As a result,\n  //       some `knex` instances will support the methods, and\n  //       others will not.\n  //\n  //       We should revisit this once we figure out the desired\n  //       behavior / usage.  For instance: do we really want to\n  //       allow external components to directly manipulate `knex`\n  //       data structures?  Or, should we come up w/ a different\n  //       approach that avoids side-effects / mutation?\n  //\n  //      (FYI: I noticed this issue because I attempted to integrate\n  //       this logic directly into the `KNEX_PROPERTY_DEFINITIONS`\n  //       construction.  However, `KNEX_PROPERTY_DEFINITIONS` is\n  //       constructed before any `knex` instances are created.\n  //       As a result, the method extensions were missing from all\n  //       `knex` instances.)\n  for (let i = 0; i < QueryInterface.length; i++) {\n    const method = QueryInterface[i];\n    knex[method] = function () {\n      const builder = this.queryBuilder();\n      return builder[method].apply(builder, arguments);\n    };\n  }\n  Object.defineProperties(knex, KNEX_PROPERTY_DEFINITIONS);\n  initContext(knex);\n  knex.client = client;\n  knex.userParams = {};\n\n  // Hook up the \"knex\" object as an EventEmitter.\n  const ee = new EventEmitter();\n  for (const key in ee) {\n    knex[key] = ee[key];\n  }\n\n  // Unfortunately, something seems to be broken in Node 6 and removing events from a clone also mutates original Knex,\n  // which is highly undesirable\n  if (knex._internalListeners) {\n    knex._internalListeners.forEach(({\n      eventName,\n      listener\n    }) => {\n      knex.client.removeListener(eventName, listener); // Remove duplicates for copies\n    });\n  }\n  knex._internalListeners = [];\n\n  // Passthrough all \"start\" and \"query\" events to the knex object.\n  _addInternalListener(knex, 'start', obj => {\n    knex.emit('start', obj);\n  });\n  _addInternalListener(knex, 'query', obj => {\n    knex.emit('query', obj);\n  });\n  _addInternalListener(knex, 'query-error', (err, obj) => {\n    knex.emit('query-error', err, obj);\n  });\n  _addInternalListener(knex, 'query-response', (response, obj, builder) => {\n    knex.emit('query-response', response, obj, builder);\n  });\n}\nfunction _addInternalListener(knex, eventName, listener) {\n  knex.client.on(eventName, listener);\n  knex._internalListeners.push({\n    eventName,\n    listener\n  });\n}\nfunction createQueryBuilder(knexContext, tableName, options) {\n  const qb = knexContext.queryBuilder();\n  if (!tableName) knexContext.client.logger.warn('calling knex without a tableName is deprecated. Use knex.queryBuilder() instead.');\n  return tableName ? qb.table(tableName, options) : qb;\n}\nfunction shallowCloneFunction(originalFunction) {\n  const fnContext = Object.create(Object.getPrototypeOf(originalFunction), Object.getOwnPropertyDescriptors(originalFunction));\n  const knexContext = {};\n  const knexFnWrapper = (tableName, options) => {\n    return createQueryBuilder(knexContext, tableName, options);\n  };\n  const clonedFunction = knexFnWrapper.bind(fnContext);\n  Object.assign(clonedFunction, originalFunction);\n  clonedFunction.context = knexContext;\n  return clonedFunction;\n}\nmodule.exports = makeKnex;","map":{"version":3,"names":["EventEmitter","require","Migrator","Seeder","FunctionHelper","QueryInterface","merge","batchInsert","isObject","setHiddenProperty","KNEX_PROPERTY_DEFINITIONS","client","get","context","set","configurable","userParams","schema","schemaBuilder","migrate","seed","fn","CONTEXT_METHODS","m","value","args","makeKnex","knex","tableName","options","createQueryBuilder","redefineProperties","initContext","knexFn","knexContext","Object","assign","queryBuilder","raw","apply","arguments","table","batch","chunkSize","transaction","container","_config","config","doNotRejectOnRollback","undefined","_transaction","outerTx","trx","Promise","resolve","reject","catch","transactionProvider","initialize","initializePool","destroy","callback","ref","disableProcessing","isProcessingDisabled","wrapIdentifier","postProcessResponse","enableProcessing","withUserParams","params","knexClone","shallowCloneFunction","create","constructor","prototype","password","_copyEventListeners","eventName","sourceKnex","targetKnex","listeners","forEach","listener","on","i","length","method","builder","defineProperties","ee","key","_internalListeners","removeListener","_addInternalListener","obj","emit","err","response","push","qb","logger","warn","originalFunction","fnContext","getPrototypeOf","getOwnPropertyDescriptors","knexFnWrapper","clonedFunction","bind","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/knex-builder/make-knex.js"],"sourcesContent":["const { EventEmitter } = require('events');\n\nconst { Migrator } = require('../migrations/migrate/Migrator');\nconst Seeder = require('../migrations/seed/Seeder');\nconst FunctionHelper = require('./FunctionHelper');\nconst QueryInterface = require('../query/method-constants');\nconst merge = require('lodash/merge');\nconst batchInsert = require('../execution/batch-insert');\nconst { isObject } = require('../util/is');\nconst { setHiddenProperty } = require('../util/security');\n\n// Javascript does not officially support \"callable objects\".  Instead,\n// you must create a regular Function and inject properties/methods\n// into it.  In other words: you can't leverage Prototype Inheritance\n// to share the property/method definitions.\n//\n// To work around this, we're creating an Object Property Definition.\n// This allow us to quickly inject everything into the `knex` function\n// via the `Object.defineProperties(..)` function.  More importantly,\n// it allows the same definitions to be shared across `knex` instances.\nconst KNEX_PROPERTY_DEFINITIONS = {\n  client: {\n    get() {\n      return this.context.client;\n    },\n    set(client) {\n      this.context.client = client;\n    },\n    configurable: true,\n  },\n\n  userParams: {\n    get() {\n      return this.context.userParams;\n    },\n    set(userParams) {\n      this.context.userParams = userParams;\n    },\n    configurable: true,\n  },\n\n  schema: {\n    get() {\n      return this.client.schemaBuilder();\n    },\n    configurable: true,\n  },\n\n  migrate: {\n    get() {\n      return new Migrator(this);\n    },\n    configurable: true,\n  },\n\n  seed: {\n    get() {\n      return new Seeder(this);\n    },\n    configurable: true,\n  },\n\n  fn: {\n    get() {\n      return new FunctionHelper(this.client);\n    },\n    configurable: true,\n  },\n};\n\n// `knex` instances serve as proxies around `context` objects.  So, calling\n// any of these methods on the `knex` instance will forward the call to\n// the `knex.context` object. This ensures that `this` will correctly refer\n// to `context` within each of these methods.\nconst CONTEXT_METHODS = [\n  'raw',\n  'batchInsert',\n  'transaction',\n  'transactionProvider',\n  'initialize',\n  'destroy',\n  'ref',\n  'withUserParams',\n  'queryBuilder',\n  'disableProcessing',\n  'enableProcessing',\n];\n\nfor (const m of CONTEXT_METHODS) {\n  KNEX_PROPERTY_DEFINITIONS[m] = {\n    value: function (...args) {\n      return this.context[m](...args);\n    },\n    configurable: true,\n  };\n}\n\nfunction makeKnex(client) {\n  // The object we're potentially using to kick off an initial chain.\n  function knex(tableName, options) {\n    return createQueryBuilder(knex.context, tableName, options);\n  }\n\n  redefineProperties(knex, client);\n  return knex;\n}\n\nfunction initContext(knexFn) {\n  const knexContext = knexFn.context || {};\n  Object.assign(knexContext, {\n    queryBuilder() {\n      return this.client.queryBuilder();\n    },\n\n    raw() {\n      return this.client.raw.apply(this.client, arguments);\n    },\n\n    batchInsert(table, batch, chunkSize = 1000) {\n      return batchInsert(this, table, batch, chunkSize);\n    },\n\n    // Creates a new transaction.\n    // If container is provided, returns a promise for when the transaction is resolved.\n    // If container is not provided, returns a promise with a transaction that is resolved\n    // when transaction is ready to be used.\n    transaction(container, _config) {\n      // Overload support of `transaction(config)`\n      if (!_config && isObject(container)) {\n        _config = container;\n        container = null;\n      }\n\n      const config = Object.assign({}, _config);\n      config.userParams = this.userParams || {};\n      if (config.doNotRejectOnRollback === undefined) {\n        config.doNotRejectOnRollback = true;\n      }\n\n      return this._transaction(container, config);\n    },\n\n    // Internal method that actually establishes the Transaction.  It makes no assumptions\n    // about the `config` or `outerTx`, and expects the caller to handle these details.\n    _transaction(container, config, outerTx = null) {\n      if (container) {\n        const trx = this.client.transaction(container, config, outerTx);\n        return trx;\n      } else {\n        return new Promise((resolve, reject) => {\n          this.client.transaction(resolve, config, outerTx).catch(reject);\n        });\n      }\n    },\n\n    transactionProvider(config) {\n      let trx;\n      return () => {\n        if (!trx) {\n          trx = this.transaction(undefined, config);\n        }\n        return trx;\n      };\n    },\n\n    // Typically never needed, initializes the pool for a knex client.\n    initialize(config) {\n      return this.client.initializePool(config);\n    },\n\n    // Convenience method for tearing down the pool.\n    destroy(callback) {\n      return this.client.destroy(callback);\n    },\n\n    ref(ref) {\n      return this.client.ref(ref);\n    },\n\n    // Do not document this as public API until naming and API is improved for general consumption\n    // This method exists to disable processing of internal queries in migrations\n    disableProcessing() {\n      if (this.userParams.isProcessingDisabled) {\n        return;\n      }\n      this.userParams.wrapIdentifier = this.client.config.wrapIdentifier;\n      this.userParams.postProcessResponse =\n        this.client.config.postProcessResponse;\n      this.client.config.wrapIdentifier = null;\n      this.client.config.postProcessResponse = null;\n      this.userParams.isProcessingDisabled = true;\n    },\n\n    // Do not document this as public API until naming and API is improved for general consumption\n    // This method exists to enable execution of non-internal queries with consistent identifier naming in migrations\n    enableProcessing() {\n      if (!this.userParams.isProcessingDisabled) {\n        return;\n      }\n      this.client.config.wrapIdentifier = this.userParams.wrapIdentifier;\n      this.client.config.postProcessResponse =\n        this.userParams.postProcessResponse;\n      this.userParams.isProcessingDisabled = false;\n    },\n\n    withUserParams(params) {\n      const knexClone = shallowCloneFunction(knexFn); // We need to include getters in our clone\n      if (this.client) {\n        knexClone.client = Object.create(this.client.constructor.prototype); // Clone client to avoid leaking listeners that are set on it\n        merge(knexClone.client, this.client);\n        knexClone.client.config = Object.assign({}, this.client.config); // Clone client config to make sure they can be modified independently\n\n        if (this.client.config.password) {\n          setHiddenProperty(knexClone.client.config, this.client.config);\n        }\n      }\n\n      redefineProperties(knexClone, knexClone.client);\n      _copyEventListeners('query', knexFn, knexClone);\n      _copyEventListeners('query-error', knexFn, knexClone);\n      _copyEventListeners('query-response', knexFn, knexClone);\n      _copyEventListeners('start', knexFn, knexClone);\n      knexClone.userParams = params;\n      return knexClone;\n    },\n  });\n\n  if (!knexFn.context) {\n    knexFn.context = knexContext;\n  }\n}\n\nfunction _copyEventListeners(eventName, sourceKnex, targetKnex) {\n  const listeners = sourceKnex.listeners(eventName);\n  listeners.forEach((listener) => {\n    targetKnex.on(eventName, listener);\n  });\n}\n\nfunction redefineProperties(knex, client) {\n  // Allow chaining methods from the root object, before\n  // any other information is specified.\n  //\n  // TODO: `QueryBuilder.extend(..)` allows new QueryBuilder\n  //       methods to be introduced via external components.\n  //       As a side-effect, it also pushes the new method names\n  //       into the `QueryInterface` array.\n  //\n  //       The Problem: due to the way the code is currently\n  //       structured, these new methods cannot be retroactively\n  //       injected into existing `knex` instances!  As a result,\n  //       some `knex` instances will support the methods, and\n  //       others will not.\n  //\n  //       We should revisit this once we figure out the desired\n  //       behavior / usage.  For instance: do we really want to\n  //       allow external components to directly manipulate `knex`\n  //       data structures?  Or, should we come up w/ a different\n  //       approach that avoids side-effects / mutation?\n  //\n  //      (FYI: I noticed this issue because I attempted to integrate\n  //       this logic directly into the `KNEX_PROPERTY_DEFINITIONS`\n  //       construction.  However, `KNEX_PROPERTY_DEFINITIONS` is\n  //       constructed before any `knex` instances are created.\n  //       As a result, the method extensions were missing from all\n  //       `knex` instances.)\n  for (let i = 0; i < QueryInterface.length; i++) {\n    const method = QueryInterface[i];\n    knex[method] = function () {\n      const builder = this.queryBuilder();\n      return builder[method].apply(builder, arguments);\n    };\n  }\n\n  Object.defineProperties(knex, KNEX_PROPERTY_DEFINITIONS);\n\n  initContext(knex);\n  knex.client = client;\n  knex.userParams = {};\n\n  // Hook up the \"knex\" object as an EventEmitter.\n  const ee = new EventEmitter();\n  for (const key in ee) {\n    knex[key] = ee[key];\n  }\n\n  // Unfortunately, something seems to be broken in Node 6 and removing events from a clone also mutates original Knex,\n  // which is highly undesirable\n  if (knex._internalListeners) {\n    knex._internalListeners.forEach(({ eventName, listener }) => {\n      knex.client.removeListener(eventName, listener); // Remove duplicates for copies\n    });\n  }\n  knex._internalListeners = [];\n\n  // Passthrough all \"start\" and \"query\" events to the knex object.\n  _addInternalListener(knex, 'start', (obj) => {\n    knex.emit('start', obj);\n  });\n  _addInternalListener(knex, 'query', (obj) => {\n    knex.emit('query', obj);\n  });\n  _addInternalListener(knex, 'query-error', (err, obj) => {\n    knex.emit('query-error', err, obj);\n  });\n  _addInternalListener(knex, 'query-response', (response, obj, builder) => {\n    knex.emit('query-response', response, obj, builder);\n  });\n}\n\nfunction _addInternalListener(knex, eventName, listener) {\n  knex.client.on(eventName, listener);\n  knex._internalListeners.push({\n    eventName,\n    listener,\n  });\n}\n\nfunction createQueryBuilder(knexContext, tableName, options) {\n  const qb = knexContext.queryBuilder();\n  if (!tableName)\n    knexContext.client.logger.warn(\n      'calling knex without a tableName is deprecated. Use knex.queryBuilder() instead.'\n    );\n  return tableName ? qb.table(tableName, options) : qb;\n}\n\nfunction shallowCloneFunction(originalFunction) {\n  const fnContext = Object.create(\n    Object.getPrototypeOf(originalFunction),\n    Object.getOwnPropertyDescriptors(originalFunction)\n  );\n\n  const knexContext = {};\n  const knexFnWrapper = (tableName, options) => {\n    return createQueryBuilder(knexContext, tableName, options);\n  };\n\n  const clonedFunction = knexFnWrapper.bind(fnContext);\n  Object.assign(clonedFunction, originalFunction);\n  clonedFunction.context = knexContext;\n  return clonedFunction;\n}\n\nmodule.exports = makeKnex;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}