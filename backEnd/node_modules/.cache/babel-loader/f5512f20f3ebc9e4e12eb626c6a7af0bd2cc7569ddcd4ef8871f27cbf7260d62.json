{"ast":null,"code":"// MSSQL Client\n// -------\nconst map = require('lodash/map');\nconst isNil = require('lodash/isNil');\nconst Client = require('../../client');\nconst MSSQL_Formatter = require('./mssql-formatter');\nconst Transaction = require('./transaction');\nconst QueryCompiler = require('./query/mssql-querycompiler');\nconst SchemaCompiler = require('./schema/mssql-compiler');\nconst TableCompiler = require('./schema/mssql-tablecompiler');\nconst ViewCompiler = require('./schema/mssql-viewcompiler');\nconst ColumnCompiler = require('./schema/mssql-columncompiler');\nconst QueryBuilder = require('../../query/querybuilder');\nconst {\n  setHiddenProperty\n} = require('../../util/security');\nconst debug = require('debug')('knex:mssql');\nconst SQL_INT4 = {\n  MIN: -2147483648,\n  MAX: 2147483647\n};\nconst SQL_BIGINT_SAFE = {\n  MIN: -9007199254740991,\n  MAX: 9007199254740991\n};\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\" objects, which\n// extend the base 'lib/query/builder' and 'lib/query/compiler', respectively.\nclass Client_MSSQL extends Client {\n  constructor(config = {}) {\n    super(config);\n  }\n\n  /**\n   * @param {import('knex').Config} options\n   */\n  _generateConnection() {\n    const settings = this.connectionSettings;\n    settings.options = settings.options || {};\n\n    /** @type {import('tedious').ConnectionConfig} */\n    const cfg = {\n      authentication: {\n        type: settings.type || 'default',\n        options: {\n          userName: settings.userName || settings.user,\n          password: settings.password,\n          domain: settings.domain,\n          token: settings.token,\n          clientId: settings.clientId,\n          clientSecret: settings.clientSecret,\n          tenantId: settings.tenantId,\n          msiEndpoint: settings.msiEndpoint\n        }\n      },\n      server: settings.server || settings.host,\n      options: {\n        database: settings.database,\n        encrypt: settings.encrypt || false,\n        port: settings.port || 1433,\n        connectTimeout: settings.connectionTimeout || settings.timeout || 15000,\n        requestTimeout: !isNil(settings.requestTimeout) ? settings.requestTimeout : 15000,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        useColumnNames: false,\n        tdsVersion: settings.options.tdsVersion || '7_4',\n        appName: settings.options.appName || 'knex',\n        trustServerCertificate: false,\n        ...settings.options\n      }\n    };\n    if (cfg.authentication.options.password) {\n      setHiddenProperty(cfg.authentication.options);\n    }\n\n    // tedious always connect via tcp when port is specified\n    if (cfg.options.instanceName) delete cfg.options.port;\n    if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n    if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n    if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n    if (settings.debug) {\n      cfg.options.debug = {\n        packet: true,\n        token: true,\n        data: true,\n        payload: true\n      };\n    }\n    return cfg;\n  }\n  _driver() {\n    const tds = require('tedious');\n    return tds;\n  }\n  formatter() {\n    return new MSSQL_Formatter(this, ...arguments);\n  }\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n  queryCompiler() {\n    return new QueryCompiler(this, ...arguments);\n  }\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n  queryBuilder() {\n    const b = new QueryBuilder(this);\n    return b;\n  }\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n  wrapIdentifierImpl(value) {\n    if (value === '*') {\n      return '*';\n    }\n    return `[${value.replace(/[[\\]]+/g, '')}]`;\n  }\n\n  // Get a raw connection, called by the `pool` whenever a new\n  // connection needs to be added to the pool.\n  acquireRawConnection() {\n    return new Promise((resolver, rejecter) => {\n      debug('connection::connection new connection requested');\n      const Driver = this._driver();\n      const settings = Object.assign({}, this._generateConnection());\n      const connection = new Driver.Connection(settings);\n      connection.connect(err => {\n        if (err) {\n          debug('connection::connect error: %s', err.message);\n          return rejecter(err);\n        }\n        debug('connection::connect connected to server');\n        connection.connected = true;\n        connection.on('error', e => {\n          debug('connection::error message=%s', e.message);\n          connection.__knex__disposed = e;\n          connection.connected = false;\n        });\n        connection.once('end', () => {\n          connection.connected = false;\n          connection.__knex__disposed = 'Connection to server was terminated.';\n          debug('connection::end connection ended.');\n        });\n        return resolver(connection);\n      });\n    });\n  }\n  validateConnection(connection) {\n    return connection && connection.connected;\n  }\n\n  // Used to explicitly close a connection, called internally by the pool\n  // when a connection times out or the pool is shutdown.\n  destroyRawConnection(connection) {\n    debug('connection::destroy');\n    return new Promise(resolve => {\n      connection.once('end', () => {\n        resolve();\n      });\n      connection.close();\n    });\n  }\n\n  // Position the bindings for the query.\n  positionBindings(sql) {\n    let questionCount = -1;\n    return sql.replace(/\\\\?\\?/g, match => {\n      if (match === '\\\\?') {\n        return '?';\n      }\n      questionCount += 1;\n      return `@p${questionCount}`;\n    });\n  }\n  _chomp(connection) {\n    if (connection.state.name === 'LoggedIn') {\n      const nextRequest = this.requestQueue.pop();\n      if (nextRequest) {\n        debug('connection::query executing query, %d more in queue', this.requestQueue.length);\n        connection.execSql(nextRequest);\n      }\n    }\n  }\n  _enqueueRequest(request, connection) {\n    this.requestQueue.push(request);\n    this._chomp(connection);\n  }\n  _makeRequest(query, callback) {\n    const Driver = this._driver();\n    const sql = typeof query === 'string' ? query : query.sql;\n    let rowCount = 0;\n    if (!sql) throw new Error('The query is empty');\n    debug('request::request sql=%s', sql);\n    const request = new Driver.Request(sql, (err, remoteRowCount) => {\n      if (err) {\n        debug('request::error message=%s', err.message);\n        return callback(err);\n      }\n      rowCount = remoteRowCount;\n      debug('request::callback rowCount=%d', rowCount);\n    });\n    request.on('prepared', () => {\n      debug('request %s::request prepared', this.id);\n    });\n    request.on('done', (rowCount, more) => {\n      debug('request::done rowCount=%d more=%s', rowCount, more);\n    });\n    request.on('doneProc', (rowCount, more) => {\n      debug('request::doneProc id=%s rowCount=%d more=%s', request.id, rowCount, more);\n    });\n    request.on('doneInProc', (rowCount, more) => {\n      debug('request::doneInProc id=%s rowCount=%d more=%s', request.id, rowCount, more);\n    });\n    request.once('requestCompleted', () => {\n      debug('request::completed id=%s', request.id);\n      return callback(null, rowCount);\n    });\n    request.on('error', err => {\n      debug('request::error id=%s message=%s', request.id, err.message);\n      return callback(err);\n    });\n    return request;\n  }\n\n  // Grab a connection, run the query via the MSSQL streaming interface,\n  // and pass that through to the stream we've sent back to the client.\n  _stream(connection, query, /** @type {NodeJS.ReadWriteStream} */stream) {\n    return new Promise((resolve, reject) => {\n      const request = this._makeRequest(query, err => {\n        if (err) {\n          stream.emit('error', err);\n          return reject(err);\n        }\n        resolve();\n      });\n      request.on('row', row => {\n        stream.write(row.reduce((prev, curr) => ({\n          ...prev,\n          [curr.metadata.colName]: curr.value\n        }), {}));\n      });\n      request.on('error', err => {\n        stream.emit('error', err);\n        reject(err);\n      });\n      request.once('requestCompleted', () => {\n        stream.end();\n        resolve();\n      });\n      this._assignBindings(request, query.bindings);\n      this._enqueueRequest(request, connection);\n    });\n  }\n  _assignBindings(request, bindings) {\n    if (Array.isArray(bindings)) {\n      for (let i = 0; i < bindings.length; i++) {\n        const binding = bindings[i];\n        this._setReqInput(request, i, binding);\n      }\n    }\n  }\n  _scaleForBinding(binding) {\n    if (binding % 1 === 0) {\n      throw new Error(`The binding value ${binding} must be a decimal number.`);\n    }\n    return {\n      scale: 10\n    };\n  }\n  _typeForBinding(binding) {\n    const Driver = this._driver();\n    if (this.connectionSettings.options && this.connectionSettings.options.mapBinding) {\n      const result = this.connectionSettings.options.mapBinding(binding);\n      if (result) {\n        return [result.value, result.type];\n      }\n    }\n    switch (typeof binding) {\n      case 'string':\n        return [binding, Driver.TYPES.NVarChar];\n      case 'boolean':\n        return [binding, Driver.TYPES.Bit];\n      case 'number':\n        {\n          if (binding % 1 !== 0) {\n            return [binding, Driver.TYPES.Float];\n          }\n          if (binding < SQL_INT4.MIN || binding > SQL_INT4.MAX) {\n            if (binding < SQL_BIGINT_SAFE.MIN || binding > SQL_BIGINT_SAFE.MAX) {\n              throw new Error(`Bigint must be safe integer or must be passed as string, saw ${binding}`);\n            }\n            return [binding, Driver.TYPES.BigInt];\n          }\n          return [binding, Driver.TYPES.Int];\n        }\n      default:\n        {\n          if (binding instanceof Date) {\n            return [binding, Driver.TYPES.DateTime];\n          }\n          if (binding instanceof Buffer) {\n            return [binding, Driver.TYPES.VarBinary];\n          }\n          return [binding, Driver.TYPES.NVarChar];\n        }\n    }\n  }\n\n  // Runs the query on the specified connection, providing the bindings\n  // and any other necessary prep work.\n  _query(connection, query) {\n    return new Promise((resolve, reject) => {\n      const rows = [];\n      const request = this._makeRequest(query, (err, count) => {\n        if (err) {\n          return reject(err);\n        }\n        query.response = rows;\n        process.nextTick(() => this._chomp(connection));\n        resolve(query);\n      });\n      request.on('row', row => {\n        debug('request::row');\n        rows.push(row);\n      });\n      this._assignBindings(request, query.bindings);\n      this._enqueueRequest(request, connection);\n    });\n  }\n\n  // sets a request input parameter. Detects bigints and decimals and sets type appropriately.\n  _setReqInput(req, i, inputBinding) {\n    const [binding, tediousType] = this._typeForBinding(inputBinding);\n    const bindingName = 'p'.concat(i);\n    let options;\n    if (typeof binding === 'number' && binding % 1 !== 0) {\n      options = this._scaleForBinding(binding);\n    }\n    debug('request::binding pos=%d type=%s value=%s', i, tediousType.name, binding);\n    if (Buffer.isBuffer(binding)) {\n      options = {\n        length: 'max'\n      };\n    }\n    req.addParameter(bindingName, tediousType, binding, options);\n  }\n\n  // Process the response as returned from the query.\n  processResponse(query, runner) {\n    if (query == null) return;\n    let {\n      response\n    } = query;\n    const {\n      method\n    } = query;\n    if (query.output) {\n      return query.output.call(runner, response);\n    }\n    response = response.map(row => row.reduce((columns, r) => {\n      const colName = r.metadata.colName;\n      if (columns[colName]) {\n        if (!Array.isArray(columns[colName])) {\n          columns[colName] = [columns[colName]];\n        }\n        columns[colName].push(r.value);\n      } else {\n        columns[colName] = r.value;\n      }\n      return columns;\n    }, {}));\n    if (query.output) return query.output.call(runner, response);\n    switch (method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, query.pluck);\n      case 'insert':\n      case 'del':\n      case 'update':\n      case 'counter':\n        if (query.returning) {\n          if (query.returning === '@@rowcount') {\n            return response[0][''];\n          }\n        }\n        return response;\n      default:\n        return response;\n    }\n  }\n}\nObject.assign(Client_MSSQL.prototype, {\n  requestQueue: [],\n  dialect: 'mssql',\n  driverName: 'mssql'\n});\nmodule.exports = Client_MSSQL;","map":{"version":3,"names":["map","require","isNil","Client","MSSQL_Formatter","Transaction","QueryCompiler","SchemaCompiler","TableCompiler","ViewCompiler","ColumnCompiler","QueryBuilder","setHiddenProperty","debug","SQL_INT4","MIN","MAX","SQL_BIGINT_SAFE","Client_MSSQL","constructor","config","_generateConnection","settings","connectionSettings","options","cfg","authentication","type","userName","user","password","domain","token","clientId","clientSecret","tenantId","msiEndpoint","server","host","database","encrypt","port","connectTimeout","connectionTimeout","timeout","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","useColumnNames","tdsVersion","appName","trustServerCertificate","instanceName","isNaN","Infinity","packet","data","payload","_driver","tds","formatter","arguments","transaction","queryCompiler","schemaCompiler","tableCompiler","viewCompiler","queryBuilder","b","columnCompiler","wrapIdentifierImpl","value","replace","acquireRawConnection","Promise","resolver","rejecter","Driver","Object","assign","connection","Connection","connect","err","message","connected","on","e","__knex__disposed","once","validateConnection","destroyRawConnection","resolve","close","positionBindings","sql","questionCount","match","_chomp","state","name","nextRequest","requestQueue","pop","length","execSql","_enqueueRequest","request","push","_makeRequest","query","callback","rowCount","Error","Request","remoteRowCount","id","more","_stream","stream","reject","emit","row","write","reduce","prev","curr","metadata","colName","end","_assignBindings","bindings","Array","isArray","i","binding","_setReqInput","_scaleForBinding","scale","_typeForBinding","mapBinding","result","TYPES","NVarChar","Bit","Float","BigInt","Int","Date","DateTime","Buffer","VarBinary","_query","rows","count","response","process","nextTick","req","inputBinding","tediousType","bindingName","concat","isBuffer","addParameter","processResponse","runner","method","output","call","columns","r","pluck","returning","prototype","dialect","driverName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/mssql/index.js"],"sourcesContent":["// MSSQL Client\n// -------\nconst map = require('lodash/map');\nconst isNil = require('lodash/isNil');\n\nconst Client = require('../../client');\nconst MSSQL_Formatter = require('./mssql-formatter');\nconst Transaction = require('./transaction');\nconst QueryCompiler = require('./query/mssql-querycompiler');\nconst SchemaCompiler = require('./schema/mssql-compiler');\nconst TableCompiler = require('./schema/mssql-tablecompiler');\nconst ViewCompiler = require('./schema/mssql-viewcompiler');\nconst ColumnCompiler = require('./schema/mssql-columncompiler');\nconst QueryBuilder = require('../../query/querybuilder');\nconst { setHiddenProperty } = require('../../util/security');\n\nconst debug = require('debug')('knex:mssql');\n\nconst SQL_INT4 = { MIN: -2147483648, MAX: 2147483647 };\nconst SQL_BIGINT_SAFE = { MIN: -9007199254740991, MAX: 9007199254740991 };\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\" objects, which\n// extend the base 'lib/query/builder' and 'lib/query/compiler', respectively.\nclass Client_MSSQL extends Client {\n  constructor(config = {}) {\n    super(config);\n  }\n\n  /**\n   * @param {import('knex').Config} options\n   */\n  _generateConnection() {\n    const settings = this.connectionSettings;\n    settings.options = settings.options || {};\n\n    /** @type {import('tedious').ConnectionConfig} */\n    const cfg = {\n      authentication: {\n        type: settings.type || 'default',\n        options: {\n          userName: settings.userName || settings.user,\n          password: settings.password,\n          domain: settings.domain,\n          token: settings.token,\n          clientId: settings.clientId,\n          clientSecret: settings.clientSecret,\n          tenantId: settings.tenantId,\n          msiEndpoint: settings.msiEndpoint,\n        },\n      },\n      server: settings.server || settings.host,\n      options: {\n        database: settings.database,\n        encrypt: settings.encrypt || false,\n        port: settings.port || 1433,\n        connectTimeout: settings.connectionTimeout || settings.timeout || 15000,\n        requestTimeout: !isNil(settings.requestTimeout)\n          ? settings.requestTimeout\n          : 15000,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        useColumnNames: false,\n        tdsVersion: settings.options.tdsVersion || '7_4',\n        appName: settings.options.appName || 'knex',\n        trustServerCertificate: false,\n        ...settings.options,\n      },\n    };\n\n    if (cfg.authentication.options.password) {\n      setHiddenProperty(cfg.authentication.options);\n    }\n\n    // tedious always connect via tcp when port is specified\n    if (cfg.options.instanceName) delete cfg.options.port;\n\n    if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n    if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n    if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n    if (settings.debug) {\n      cfg.options.debug = {\n        packet: true,\n        token: true,\n        data: true,\n        payload: true,\n      };\n    }\n\n    return cfg;\n  }\n\n  _driver() {\n    const tds = require('tedious');\n\n    return tds;\n  }\n\n  formatter() {\n    return new MSSQL_Formatter(this, ...arguments);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler() {\n    return new QueryCompiler(this, ...arguments);\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n  queryBuilder() {\n    const b = new QueryBuilder(this);\n    return b;\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  wrapIdentifierImpl(value) {\n    if (value === '*') {\n      return '*';\n    }\n\n    return `[${value.replace(/[[\\]]+/g, '')}]`;\n  }\n\n  // Get a raw connection, called by the `pool` whenever a new\n  // connection needs to be added to the pool.\n  acquireRawConnection() {\n    return new Promise((resolver, rejecter) => {\n      debug('connection::connection new connection requested');\n      const Driver = this._driver();\n      const settings = Object.assign({}, this._generateConnection());\n\n      const connection = new Driver.Connection(settings);\n\n      connection.connect((err) => {\n        if (err) {\n          debug('connection::connect error: %s', err.message);\n          return rejecter(err);\n        }\n\n        debug('connection::connect connected to server');\n\n        connection.connected = true;\n        connection.on('error', (e) => {\n          debug('connection::error message=%s', e.message);\n          connection.__knex__disposed = e;\n          connection.connected = false;\n        });\n\n        connection.once('end', () => {\n          connection.connected = false;\n          connection.__knex__disposed = 'Connection to server was terminated.';\n          debug('connection::end connection ended.');\n        });\n\n        return resolver(connection);\n      });\n    });\n  }\n\n  validateConnection(connection) {\n    return connection && connection.connected;\n  }\n\n  // Used to explicitly close a connection, called internally by the pool\n  // when a connection times out or the pool is shutdown.\n  destroyRawConnection(connection) {\n    debug('connection::destroy');\n\n    return new Promise((resolve) => {\n      connection.once('end', () => {\n        resolve();\n      });\n\n      connection.close();\n    });\n  }\n\n  // Position the bindings for the query.\n  positionBindings(sql) {\n    let questionCount = -1;\n    return sql.replace(/\\\\?\\?/g, (match) => {\n      if (match === '\\\\?') {\n        return '?';\n      }\n\n      questionCount += 1;\n      return `@p${questionCount}`;\n    });\n  }\n\n  _chomp(connection) {\n    if (connection.state.name === 'LoggedIn') {\n      const nextRequest = this.requestQueue.pop();\n      if (nextRequest) {\n        debug(\n          'connection::query executing query, %d more in queue',\n          this.requestQueue.length\n        );\n\n        connection.execSql(nextRequest);\n      }\n    }\n  }\n\n  _enqueueRequest(request, connection) {\n    this.requestQueue.push(request);\n    this._chomp(connection);\n  }\n\n  _makeRequest(query, callback) {\n    const Driver = this._driver();\n    const sql = typeof query === 'string' ? query : query.sql;\n    let rowCount = 0;\n\n    if (!sql) throw new Error('The query is empty');\n\n    debug('request::request sql=%s', sql);\n\n    const request = new Driver.Request(sql, (err, remoteRowCount) => {\n      if (err) {\n        debug('request::error message=%s', err.message);\n        return callback(err);\n      }\n\n      rowCount = remoteRowCount;\n      debug('request::callback rowCount=%d', rowCount);\n    });\n\n    request.on('prepared', () => {\n      debug('request %s::request prepared', this.id);\n    });\n\n    request.on('done', (rowCount, more) => {\n      debug('request::done rowCount=%d more=%s', rowCount, more);\n    });\n\n    request.on('doneProc', (rowCount, more) => {\n      debug(\n        'request::doneProc id=%s rowCount=%d more=%s',\n        request.id,\n        rowCount,\n        more\n      );\n    });\n\n    request.on('doneInProc', (rowCount, more) => {\n      debug(\n        'request::doneInProc id=%s rowCount=%d more=%s',\n        request.id,\n        rowCount,\n        more\n      );\n    });\n\n    request.once('requestCompleted', () => {\n      debug('request::completed id=%s', request.id);\n      return callback(null, rowCount);\n    });\n\n    request.on('error', (err) => {\n      debug('request::error id=%s message=%s', request.id, err.message);\n      return callback(err);\n    });\n\n    return request;\n  }\n\n  // Grab a connection, run the query via the MSSQL streaming interface,\n  // and pass that through to the stream we've sent back to the client.\n  _stream(connection, query, /** @type {NodeJS.ReadWriteStream} */ stream) {\n    return new Promise((resolve, reject) => {\n      const request = this._makeRequest(query, (err) => {\n        if (err) {\n          stream.emit('error', err);\n          return reject(err);\n        }\n\n        resolve();\n      });\n\n      request.on('row', (row) => {\n        stream.write(\n          row.reduce(\n            (prev, curr) => ({\n              ...prev,\n              [curr.metadata.colName]: curr.value,\n            }),\n            {}\n          )\n        );\n      });\n      request.on('error', (err) => {\n        stream.emit('error', err);\n        reject(err);\n      });\n      request.once('requestCompleted', () => {\n        stream.end();\n        resolve();\n      });\n\n      this._assignBindings(request, query.bindings);\n      this._enqueueRequest(request, connection);\n    });\n  }\n\n  _assignBindings(request, bindings) {\n    if (Array.isArray(bindings)) {\n      for (let i = 0; i < bindings.length; i++) {\n        const binding = bindings[i];\n        this._setReqInput(request, i, binding);\n      }\n    }\n  }\n\n  _scaleForBinding(binding) {\n    if (binding % 1 === 0) {\n      throw new Error(`The binding value ${binding} must be a decimal number.`);\n    }\n\n    return { scale: 10 };\n  }\n\n  _typeForBinding(binding) {\n    const Driver = this._driver();\n\n    if (\n      this.connectionSettings.options &&\n      this.connectionSettings.options.mapBinding\n    ) {\n      const result = this.connectionSettings.options.mapBinding(binding);\n      if (result) {\n        return [result.value, result.type];\n      }\n    }\n\n    switch (typeof binding) {\n      case 'string':\n        return [binding, Driver.TYPES.NVarChar];\n      case 'boolean':\n        return [binding, Driver.TYPES.Bit];\n      case 'number': {\n        if (binding % 1 !== 0) {\n          return [binding, Driver.TYPES.Float];\n        }\n\n        if (binding < SQL_INT4.MIN || binding > SQL_INT4.MAX) {\n          if (binding < SQL_BIGINT_SAFE.MIN || binding > SQL_BIGINT_SAFE.MAX) {\n            throw new Error(\n              `Bigint must be safe integer or must be passed as string, saw ${binding}`\n            );\n          }\n\n          return [binding, Driver.TYPES.BigInt];\n        }\n\n        return [binding, Driver.TYPES.Int];\n      }\n      default: {\n        if (binding instanceof Date) {\n          return [binding, Driver.TYPES.DateTime];\n        }\n\n        if (binding instanceof Buffer) {\n          return [binding, Driver.TYPES.VarBinary];\n        }\n\n        return [binding, Driver.TYPES.NVarChar];\n      }\n    }\n  }\n\n  // Runs the query on the specified connection, providing the bindings\n  // and any other necessary prep work.\n  _query(connection, query) {\n    return new Promise((resolve, reject) => {\n      const rows = [];\n      const request = this._makeRequest(query, (err, count) => {\n        if (err) {\n          return reject(err);\n        }\n\n        query.response = rows;\n\n        process.nextTick(() => this._chomp(connection));\n\n        resolve(query);\n      });\n\n      request.on('row', (row) => {\n        debug('request::row');\n        rows.push(row);\n      });\n\n      this._assignBindings(request, query.bindings);\n      this._enqueueRequest(request, connection);\n    });\n  }\n\n  // sets a request input parameter. Detects bigints and decimals and sets type appropriately.\n  _setReqInput(req, i, inputBinding) {\n    const [binding, tediousType] = this._typeForBinding(inputBinding);\n    const bindingName = 'p'.concat(i);\n    let options;\n\n    if (typeof binding === 'number' && binding % 1 !== 0) {\n      options = this._scaleForBinding(binding);\n    }\n\n    debug(\n      'request::binding pos=%d type=%s value=%s',\n      i,\n      tediousType.name,\n      binding\n    );\n\n    if (Buffer.isBuffer(binding)) {\n      options = {\n        length: 'max',\n      };\n    }\n\n    req.addParameter(bindingName, tediousType, binding, options);\n  }\n\n  // Process the response as returned from the query.\n  processResponse(query, runner) {\n    if (query == null) return;\n    let { response } = query;\n    const { method } = query;\n\n    if (query.output) {\n      return query.output.call(runner, response);\n    }\n\n    response = response.map((row) =>\n      row.reduce((columns, r) => {\n        const colName = r.metadata.colName;\n\n        if (columns[colName]) {\n          if (!Array.isArray(columns[colName])) {\n            columns[colName] = [columns[colName]];\n          }\n\n          columns[colName].push(r.value);\n        } else {\n          columns[colName] = r.value;\n        }\n\n        return columns;\n      }, {})\n    );\n\n    if (query.output) return query.output.call(runner, response);\n    switch (method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, query.pluck);\n      case 'insert':\n      case 'del':\n      case 'update':\n      case 'counter':\n        if (query.returning) {\n          if (query.returning === '@@rowcount') {\n            return response[0][''];\n          }\n        }\n        return response;\n      default:\n        return response;\n    }\n  }\n}\n\nObject.assign(Client_MSSQL.prototype, {\n  requestQueue: [],\n\n  dialect: 'mssql',\n\n  driverName: 'mssql',\n});\n\nmodule.exports = Client_MSSQL;\n"],"mappings":"AAAA;AACA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAY,CAAC;AACjC,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAc,CAAC;AAErC,MAAME,MAAM,GAAGF,OAAO,CAAC,cAAc,CAAC;AACtC,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAMI,WAAW,GAAGJ,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMK,aAAa,GAAGL,OAAO,CAAC,6BAA6B,CAAC;AAC5D,MAAMM,cAAc,GAAGN,OAAO,CAAC,yBAAyB,CAAC;AACzD,MAAMO,aAAa,GAAGP,OAAO,CAAC,8BAA8B,CAAC;AAC7D,MAAMQ,YAAY,GAAGR,OAAO,CAAC,6BAA6B,CAAC;AAC3D,MAAMS,cAAc,GAAGT,OAAO,CAAC,+BAA+B,CAAC;AAC/D,MAAMU,YAAY,GAAGV,OAAO,CAAC,0BAA0B,CAAC;AACxD,MAAM;EAAEW;AAAkB,CAAC,GAAGX,OAAO,CAAC,qBAAqB,CAAC;AAE5D,MAAMY,KAAK,GAAGZ,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;AAE5C,MAAMa,QAAQ,GAAG;EAAEC,GAAG,EAAE,CAAC,UAAU;EAAEC,GAAG,EAAE;AAAW,CAAC;AACtD,MAAMC,eAAe,GAAG;EAAEF,GAAG,EAAE,CAAC,gBAAgB;EAAEC,GAAG,EAAE;AAAiB,CAAC;;AAEzE;AACA;AACA,MAAME,YAAY,SAASf,MAAM,CAAC;EAChCgB,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACvB,KAAK,CAACA,MAAM,CAAC;EACf;;EAEA;AACF;AACA;EACEC,mBAAmBA,CAAA,EAAG;IACpB,MAAMC,QAAQ,GAAG,IAAI,CAACC,kBAAkB;IACxCD,QAAQ,CAACE,OAAO,GAAGF,QAAQ,CAACE,OAAO,IAAI,CAAC,CAAC;;IAEzC;IACA,MAAMC,GAAG,GAAG;MACVC,cAAc,EAAE;QACdC,IAAI,EAAEL,QAAQ,CAACK,IAAI,IAAI,SAAS;QAChCH,OAAO,EAAE;UACPI,QAAQ,EAAEN,QAAQ,CAACM,QAAQ,IAAIN,QAAQ,CAACO,IAAI;UAC5CC,QAAQ,EAAER,QAAQ,CAACQ,QAAQ;UAC3BC,MAAM,EAAET,QAAQ,CAACS,MAAM;UACvBC,KAAK,EAAEV,QAAQ,CAACU,KAAK;UACrBC,QAAQ,EAAEX,QAAQ,CAACW,QAAQ;UAC3BC,YAAY,EAAEZ,QAAQ,CAACY,YAAY;UACnCC,QAAQ,EAAEb,QAAQ,CAACa,QAAQ;UAC3BC,WAAW,EAAEd,QAAQ,CAACc;QACxB;MACF,CAAC;MACDC,MAAM,EAAEf,QAAQ,CAACe,MAAM,IAAIf,QAAQ,CAACgB,IAAI;MACxCd,OAAO,EAAE;QACPe,QAAQ,EAAEjB,QAAQ,CAACiB,QAAQ;QAC3BC,OAAO,EAAElB,QAAQ,CAACkB,OAAO,IAAI,KAAK;QAClCC,IAAI,EAAEnB,QAAQ,CAACmB,IAAI,IAAI,IAAI;QAC3BC,cAAc,EAAEpB,QAAQ,CAACqB,iBAAiB,IAAIrB,QAAQ,CAACsB,OAAO,IAAI,KAAK;QACvEC,cAAc,EAAE,CAAC3C,KAAK,CAACoB,QAAQ,CAACuB,cAAc,CAAC,GAC3CvB,QAAQ,CAACuB,cAAc,GACvB,KAAK;QACTC,mBAAmB,EAAE,KAAK;QAC1BC,gCAAgC,EAAE,KAAK;QACvCC,cAAc,EAAE,KAAK;QACrBC,UAAU,EAAE3B,QAAQ,CAACE,OAAO,CAACyB,UAAU,IAAI,KAAK;QAChDC,OAAO,EAAE5B,QAAQ,CAACE,OAAO,CAAC0B,OAAO,IAAI,MAAM;QAC3CC,sBAAsB,EAAE,KAAK;QAC7B,GAAG7B,QAAQ,CAACE;MACd;IACF,CAAC;IAED,IAAIC,GAAG,CAACC,cAAc,CAACF,OAAO,CAACM,QAAQ,EAAE;MACvClB,iBAAiB,CAACa,GAAG,CAACC,cAAc,CAACF,OAAO,CAAC;IAC/C;;IAEA;IACA,IAAIC,GAAG,CAACD,OAAO,CAAC4B,YAAY,EAAE,OAAO3B,GAAG,CAACD,OAAO,CAACiB,IAAI;IAErD,IAAIY,KAAK,CAAC5B,GAAG,CAACD,OAAO,CAACqB,cAAc,CAAC,EAAEpB,GAAG,CAACD,OAAO,CAACqB,cAAc,GAAG,KAAK;IACzE,IAAIpB,GAAG,CAACD,OAAO,CAACqB,cAAc,KAAKS,QAAQ,EAAE7B,GAAG,CAACD,OAAO,CAACqB,cAAc,GAAG,CAAC;IAC3E,IAAIpB,GAAG,CAACD,OAAO,CAACqB,cAAc,GAAG,CAAC,EAAEpB,GAAG,CAACD,OAAO,CAACqB,cAAc,GAAG,CAAC;IAElE,IAAIvB,QAAQ,CAACT,KAAK,EAAE;MAClBY,GAAG,CAACD,OAAO,CAACX,KAAK,GAAG;QAClB0C,MAAM,EAAE,IAAI;QACZvB,KAAK,EAAE,IAAI;QACXwB,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,OAAOhC,GAAG;EACZ;EAEAiC,OAAOA,CAAA,EAAG;IACR,MAAMC,GAAG,GAAG1D,OAAO,CAAC,SAAS,CAAC;IAE9B,OAAO0D,GAAG;EACZ;EAEAC,SAASA,CAAA,EAAG;IACV,OAAO,IAAIxD,eAAe,CAAC,IAAI,EAAE,GAAGyD,SAAS,CAAC;EAChD;EAEAC,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAIzD,WAAW,CAAC,IAAI,EAAE,GAAGwD,SAAS,CAAC;EAC5C;EAEAE,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIzD,aAAa,CAAC,IAAI,EAAE,GAAGuD,SAAS,CAAC;EAC9C;EAEAG,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIzD,cAAc,CAAC,IAAI,EAAE,GAAGsD,SAAS,CAAC;EAC/C;EAEAI,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIzD,aAAa,CAAC,IAAI,EAAE,GAAGqD,SAAS,CAAC;EAC9C;EAEAK,YAAYA,CAAA,EAAG;IACb,OAAO,IAAIzD,YAAY,CAAC,IAAI,EAAE,GAAGoD,SAAS,CAAC;EAC7C;EACAM,YAAYA,CAAA,EAAG;IACb,MAAMC,CAAC,GAAG,IAAIzD,YAAY,CAAC,IAAI,CAAC;IAChC,OAAOyD,CAAC;EACV;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI3D,cAAc,CAAC,IAAI,EAAE,GAAGmD,SAAS,CAAC;EAC/C;EAEAS,kBAAkBA,CAACC,KAAK,EAAE;IACxB,IAAIA,KAAK,KAAK,GAAG,EAAE;MACjB,OAAO,GAAG;IACZ;IAEA,OAAO,IAAIA,KAAK,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG;EAC5C;;EAEA;EACA;EACAC,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAIC,OAAO,CAAC,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MACzC/D,KAAK,CAAC,iDAAiD,CAAC;MACxD,MAAMgE,MAAM,GAAG,IAAI,CAACnB,OAAO,CAAC,CAAC;MAC7B,MAAMpC,QAAQ,GAAGwD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC1D,mBAAmB,CAAC,CAAC,CAAC;MAE9D,MAAM2D,UAAU,GAAG,IAAIH,MAAM,CAACI,UAAU,CAAC3D,QAAQ,CAAC;MAElD0D,UAAU,CAACE,OAAO,CAAEC,GAAG,IAAK;QAC1B,IAAIA,GAAG,EAAE;UACPtE,KAAK,CAAC,+BAA+B,EAAEsE,GAAG,CAACC,OAAO,CAAC;UACnD,OAAOR,QAAQ,CAACO,GAAG,CAAC;QACtB;QAEAtE,KAAK,CAAC,yCAAyC,CAAC;QAEhDmE,UAAU,CAACK,SAAS,GAAG,IAAI;QAC3BL,UAAU,CAACM,EAAE,CAAC,OAAO,EAAGC,CAAC,IAAK;UAC5B1E,KAAK,CAAC,8BAA8B,EAAE0E,CAAC,CAACH,OAAO,CAAC;UAChDJ,UAAU,CAACQ,gBAAgB,GAAGD,CAAC;UAC/BP,UAAU,CAACK,SAAS,GAAG,KAAK;QAC9B,CAAC,CAAC;QAEFL,UAAU,CAACS,IAAI,CAAC,KAAK,EAAE,MAAM;UAC3BT,UAAU,CAACK,SAAS,GAAG,KAAK;UAC5BL,UAAU,CAACQ,gBAAgB,GAAG,sCAAsC;UACpE3E,KAAK,CAAC,mCAAmC,CAAC;QAC5C,CAAC,CAAC;QAEF,OAAO8D,QAAQ,CAACK,UAAU,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAU,kBAAkBA,CAACV,UAAU,EAAE;IAC7B,OAAOA,UAAU,IAAIA,UAAU,CAACK,SAAS;EAC3C;;EAEA;EACA;EACAM,oBAAoBA,CAACX,UAAU,EAAE;IAC/BnE,KAAK,CAAC,qBAAqB,CAAC;IAE5B,OAAO,IAAI6D,OAAO,CAAEkB,OAAO,IAAK;MAC9BZ,UAAU,CAACS,IAAI,CAAC,KAAK,EAAE,MAAM;QAC3BG,OAAO,CAAC,CAAC;MACX,CAAC,CAAC;MAEFZ,UAAU,CAACa,KAAK,CAAC,CAAC;IACpB,CAAC,CAAC;EACJ;;EAEA;EACAC,gBAAgBA,CAACC,GAAG,EAAE;IACpB,IAAIC,aAAa,GAAG,CAAC,CAAC;IACtB,OAAOD,GAAG,CAACvB,OAAO,CAAC,QAAQ,EAAGyB,KAAK,IAAK;MACtC,IAAIA,KAAK,KAAK,KAAK,EAAE;QACnB,OAAO,GAAG;MACZ;MAEAD,aAAa,IAAI,CAAC;MAClB,OAAO,KAAKA,aAAa,EAAE;IAC7B,CAAC,CAAC;EACJ;EAEAE,MAAMA,CAAClB,UAAU,EAAE;IACjB,IAAIA,UAAU,CAACmB,KAAK,CAACC,IAAI,KAAK,UAAU,EAAE;MACxC,MAAMC,WAAW,GAAG,IAAI,CAACC,YAAY,CAACC,GAAG,CAAC,CAAC;MAC3C,IAAIF,WAAW,EAAE;QACfxF,KAAK,CACH,qDAAqD,EACrD,IAAI,CAACyF,YAAY,CAACE,MACpB,CAAC;QAEDxB,UAAU,CAACyB,OAAO,CAACJ,WAAW,CAAC;MACjC;IACF;EACF;EAEAK,eAAeA,CAACC,OAAO,EAAE3B,UAAU,EAAE;IACnC,IAAI,CAACsB,YAAY,CAACM,IAAI,CAACD,OAAO,CAAC;IAC/B,IAAI,CAACT,MAAM,CAAClB,UAAU,CAAC;EACzB;EAEA6B,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC5B,MAAMlC,MAAM,GAAG,IAAI,CAACnB,OAAO,CAAC,CAAC;IAC7B,MAAMqC,GAAG,GAAG,OAAOe,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACf,GAAG;IACzD,IAAIiB,QAAQ,GAAG,CAAC;IAEhB,IAAI,CAACjB,GAAG,EAAE,MAAM,IAAIkB,KAAK,CAAC,oBAAoB,CAAC;IAE/CpG,KAAK,CAAC,yBAAyB,EAAEkF,GAAG,CAAC;IAErC,MAAMY,OAAO,GAAG,IAAI9B,MAAM,CAACqC,OAAO,CAACnB,GAAG,EAAE,CAACZ,GAAG,EAAEgC,cAAc,KAAK;MAC/D,IAAIhC,GAAG,EAAE;QACPtE,KAAK,CAAC,2BAA2B,EAAEsE,GAAG,CAACC,OAAO,CAAC;QAC/C,OAAO2B,QAAQ,CAAC5B,GAAG,CAAC;MACtB;MAEA6B,QAAQ,GAAGG,cAAc;MACzBtG,KAAK,CAAC,+BAA+B,EAAEmG,QAAQ,CAAC;IAClD,CAAC,CAAC;IAEFL,OAAO,CAACrB,EAAE,CAAC,UAAU,EAAE,MAAM;MAC3BzE,KAAK,CAAC,8BAA8B,EAAE,IAAI,CAACuG,EAAE,CAAC;IAChD,CAAC,CAAC;IAEFT,OAAO,CAACrB,EAAE,CAAC,MAAM,EAAE,CAAC0B,QAAQ,EAAEK,IAAI,KAAK;MACrCxG,KAAK,CAAC,mCAAmC,EAAEmG,QAAQ,EAAEK,IAAI,CAAC;IAC5D,CAAC,CAAC;IAEFV,OAAO,CAACrB,EAAE,CAAC,UAAU,EAAE,CAAC0B,QAAQ,EAAEK,IAAI,KAAK;MACzCxG,KAAK,CACH,6CAA6C,EAC7C8F,OAAO,CAACS,EAAE,EACVJ,QAAQ,EACRK,IACF,CAAC;IACH,CAAC,CAAC;IAEFV,OAAO,CAACrB,EAAE,CAAC,YAAY,EAAE,CAAC0B,QAAQ,EAAEK,IAAI,KAAK;MAC3CxG,KAAK,CACH,+CAA+C,EAC/C8F,OAAO,CAACS,EAAE,EACVJ,QAAQ,EACRK,IACF,CAAC;IACH,CAAC,CAAC;IAEFV,OAAO,CAAClB,IAAI,CAAC,kBAAkB,EAAE,MAAM;MACrC5E,KAAK,CAAC,0BAA0B,EAAE8F,OAAO,CAACS,EAAE,CAAC;MAC7C,OAAOL,QAAQ,CAAC,IAAI,EAAEC,QAAQ,CAAC;IACjC,CAAC,CAAC;IAEFL,OAAO,CAACrB,EAAE,CAAC,OAAO,EAAGH,GAAG,IAAK;MAC3BtE,KAAK,CAAC,iCAAiC,EAAE8F,OAAO,CAACS,EAAE,EAAEjC,GAAG,CAACC,OAAO,CAAC;MACjE,OAAO2B,QAAQ,CAAC5B,GAAG,CAAC;IACtB,CAAC,CAAC;IAEF,OAAOwB,OAAO;EAChB;;EAEA;EACA;EACAW,OAAOA,CAACtC,UAAU,EAAE8B,KAAK,EAAE,qCAAsCS,MAAM,EAAE;IACvE,OAAO,IAAI7C,OAAO,CAAC,CAACkB,OAAO,EAAE4B,MAAM,KAAK;MACtC,MAAMb,OAAO,GAAG,IAAI,CAACE,YAAY,CAACC,KAAK,EAAG3B,GAAG,IAAK;QAChD,IAAIA,GAAG,EAAE;UACPoC,MAAM,CAACE,IAAI,CAAC,OAAO,EAAEtC,GAAG,CAAC;UACzB,OAAOqC,MAAM,CAACrC,GAAG,CAAC;QACpB;QAEAS,OAAO,CAAC,CAAC;MACX,CAAC,CAAC;MAEFe,OAAO,CAACrB,EAAE,CAAC,KAAK,EAAGoC,GAAG,IAAK;QACzBH,MAAM,CAACI,KAAK,CACVD,GAAG,CAACE,MAAM,CACR,CAACC,IAAI,EAAEC,IAAI,MAAM;UACf,GAAGD,IAAI;UACP,CAACC,IAAI,CAACC,QAAQ,CAACC,OAAO,GAAGF,IAAI,CAACvD;QAChC,CAAC,CAAC,EACF,CAAC,CACH,CACF,CAAC;MACH,CAAC,CAAC;MACFoC,OAAO,CAACrB,EAAE,CAAC,OAAO,EAAGH,GAAG,IAAK;QAC3BoC,MAAM,CAACE,IAAI,CAAC,OAAO,EAAEtC,GAAG,CAAC;QACzBqC,MAAM,CAACrC,GAAG,CAAC;MACb,CAAC,CAAC;MACFwB,OAAO,CAAClB,IAAI,CAAC,kBAAkB,EAAE,MAAM;QACrC8B,MAAM,CAACU,GAAG,CAAC,CAAC;QACZrC,OAAO,CAAC,CAAC;MACX,CAAC,CAAC;MAEF,IAAI,CAACsC,eAAe,CAACvB,OAAO,EAAEG,KAAK,CAACqB,QAAQ,CAAC;MAC7C,IAAI,CAACzB,eAAe,CAACC,OAAO,EAAE3B,UAAU,CAAC;IAC3C,CAAC,CAAC;EACJ;EAEAkD,eAAeA,CAACvB,OAAO,EAAEwB,QAAQ,EAAE;IACjC,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC3B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAAC3B,MAAM,EAAE8B,CAAC,EAAE,EAAE;QACxC,MAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAC,CAAC;QAC3B,IAAI,CAACE,YAAY,CAAC7B,OAAO,EAAE2B,CAAC,EAAEC,OAAO,CAAC;MACxC;IACF;EACF;EAEAE,gBAAgBA,CAACF,OAAO,EAAE;IACxB,IAAIA,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE;MACrB,MAAM,IAAItB,KAAK,CAAC,qBAAqBsB,OAAO,4BAA4B,CAAC;IAC3E;IAEA,OAAO;MAAEG,KAAK,EAAE;IAAG,CAAC;EACtB;EAEAC,eAAeA,CAACJ,OAAO,EAAE;IACvB,MAAM1D,MAAM,GAAG,IAAI,CAACnB,OAAO,CAAC,CAAC;IAE7B,IACE,IAAI,CAACnC,kBAAkB,CAACC,OAAO,IAC/B,IAAI,CAACD,kBAAkB,CAACC,OAAO,CAACoH,UAAU,EAC1C;MACA,MAAMC,MAAM,GAAG,IAAI,CAACtH,kBAAkB,CAACC,OAAO,CAACoH,UAAU,CAACL,OAAO,CAAC;MAClE,IAAIM,MAAM,EAAE;QACV,OAAO,CAACA,MAAM,CAACtE,KAAK,EAAEsE,MAAM,CAAClH,IAAI,CAAC;MACpC;IACF;IAEA,QAAQ,OAAO4G,OAAO;MACpB,KAAK,QAAQ;QACX,OAAO,CAACA,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACC,QAAQ,CAAC;MACzC,KAAK,SAAS;QACZ,OAAO,CAACR,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACE,GAAG,CAAC;MACpC,KAAK,QAAQ;QAAE;UACb,IAAIT,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE;YACrB,OAAO,CAACA,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACG,KAAK,CAAC;UACtC;UAEA,IAAIV,OAAO,GAAGzH,QAAQ,CAACC,GAAG,IAAIwH,OAAO,GAAGzH,QAAQ,CAACE,GAAG,EAAE;YACpD,IAAIuH,OAAO,GAAGtH,eAAe,CAACF,GAAG,IAAIwH,OAAO,GAAGtH,eAAe,CAACD,GAAG,EAAE;cAClE,MAAM,IAAIiG,KAAK,CACb,gEAAgEsB,OAAO,EACzE,CAAC;YACH;YAEA,OAAO,CAACA,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACI,MAAM,CAAC;UACvC;UAEA,OAAO,CAACX,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACK,GAAG,CAAC;QACpC;MACA;QAAS;UACP,IAAIZ,OAAO,YAAYa,IAAI,EAAE;YAC3B,OAAO,CAACb,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACO,QAAQ,CAAC;UACzC;UAEA,IAAId,OAAO,YAAYe,MAAM,EAAE;YAC7B,OAAO,CAACf,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACS,SAAS,CAAC;UAC1C;UAEA,OAAO,CAAChB,OAAO,EAAE1D,MAAM,CAACiE,KAAK,CAACC,QAAQ,CAAC;QACzC;IACF;EACF;;EAEA;EACA;EACAS,MAAMA,CAACxE,UAAU,EAAE8B,KAAK,EAAE;IACxB,OAAO,IAAIpC,OAAO,CAAC,CAACkB,OAAO,EAAE4B,MAAM,KAAK;MACtC,MAAMiC,IAAI,GAAG,EAAE;MACf,MAAM9C,OAAO,GAAG,IAAI,CAACE,YAAY,CAACC,KAAK,EAAE,CAAC3B,GAAG,EAAEuE,KAAK,KAAK;QACvD,IAAIvE,GAAG,EAAE;UACP,OAAOqC,MAAM,CAACrC,GAAG,CAAC;QACpB;QAEA2B,KAAK,CAAC6C,QAAQ,GAAGF,IAAI;QAErBG,OAAO,CAACC,QAAQ,CAAC,MAAM,IAAI,CAAC3D,MAAM,CAAClB,UAAU,CAAC,CAAC;QAE/CY,OAAO,CAACkB,KAAK,CAAC;MAChB,CAAC,CAAC;MAEFH,OAAO,CAACrB,EAAE,CAAC,KAAK,EAAGoC,GAAG,IAAK;QACzB7G,KAAK,CAAC,cAAc,CAAC;QACrB4I,IAAI,CAAC7C,IAAI,CAACc,GAAG,CAAC;MAChB,CAAC,CAAC;MAEF,IAAI,CAACQ,eAAe,CAACvB,OAAO,EAAEG,KAAK,CAACqB,QAAQ,CAAC;MAC7C,IAAI,CAACzB,eAAe,CAACC,OAAO,EAAE3B,UAAU,CAAC;IAC3C,CAAC,CAAC;EACJ;;EAEA;EACAwD,YAAYA,CAACsB,GAAG,EAAExB,CAAC,EAAEyB,YAAY,EAAE;IACjC,MAAM,CAACxB,OAAO,EAAEyB,WAAW,CAAC,GAAG,IAAI,CAACrB,eAAe,CAACoB,YAAY,CAAC;IACjE,MAAME,WAAW,GAAG,GAAG,CAACC,MAAM,CAAC5B,CAAC,CAAC;IACjC,IAAI9G,OAAO;IAEX,IAAI,OAAO+G,OAAO,KAAK,QAAQ,IAAIA,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE;MACpD/G,OAAO,GAAG,IAAI,CAACiH,gBAAgB,CAACF,OAAO,CAAC;IAC1C;IAEA1H,KAAK,CACH,0CAA0C,EAC1CyH,CAAC,EACD0B,WAAW,CAAC5D,IAAI,EAChBmC,OACF,CAAC;IAED,IAAIe,MAAM,CAACa,QAAQ,CAAC5B,OAAO,CAAC,EAAE;MAC5B/G,OAAO,GAAG;QACRgF,MAAM,EAAE;MACV,CAAC;IACH;IAEAsD,GAAG,CAACM,YAAY,CAACH,WAAW,EAAED,WAAW,EAAEzB,OAAO,EAAE/G,OAAO,CAAC;EAC9D;;EAEA;EACA6I,eAAeA,CAACvD,KAAK,EAAEwD,MAAM,EAAE;IAC7B,IAAIxD,KAAK,IAAI,IAAI,EAAE;IACnB,IAAI;MAAE6C;IAAS,CAAC,GAAG7C,KAAK;IACxB,MAAM;MAAEyD;IAAO,CAAC,GAAGzD,KAAK;IAExB,IAAIA,KAAK,CAAC0D,MAAM,EAAE;MAChB,OAAO1D,KAAK,CAAC0D,MAAM,CAACC,IAAI,CAACH,MAAM,EAAEX,QAAQ,CAAC;IAC5C;IAEAA,QAAQ,GAAGA,QAAQ,CAAC3J,GAAG,CAAE0H,GAAG,IAC1BA,GAAG,CAACE,MAAM,CAAC,CAAC8C,OAAO,EAAEC,CAAC,KAAK;MACzB,MAAM3C,OAAO,GAAG2C,CAAC,CAAC5C,QAAQ,CAACC,OAAO;MAElC,IAAI0C,OAAO,CAAC1C,OAAO,CAAC,EAAE;QACpB,IAAI,CAACI,KAAK,CAACC,OAAO,CAACqC,OAAO,CAAC1C,OAAO,CAAC,CAAC,EAAE;UACpC0C,OAAO,CAAC1C,OAAO,CAAC,GAAG,CAAC0C,OAAO,CAAC1C,OAAO,CAAC,CAAC;QACvC;QAEA0C,OAAO,CAAC1C,OAAO,CAAC,CAACpB,IAAI,CAAC+D,CAAC,CAACpG,KAAK,CAAC;MAChC,CAAC,MAAM;QACLmG,OAAO,CAAC1C,OAAO,CAAC,GAAG2C,CAAC,CAACpG,KAAK;MAC5B;MAEA,OAAOmG,OAAO;IAChB,CAAC,EAAE,CAAC,CAAC,CACP,CAAC;IAED,IAAI5D,KAAK,CAAC0D,MAAM,EAAE,OAAO1D,KAAK,CAAC0D,MAAM,CAACC,IAAI,CAACH,MAAM,EAAEX,QAAQ,CAAC;IAC5D,QAAQY,MAAM;MACZ,KAAK,QAAQ;QACX,OAAOZ,QAAQ;MACjB,KAAK,OAAO;QACV,OAAOA,QAAQ,CAAC,CAAC,CAAC;MACpB,KAAK,OAAO;QACV,OAAO3J,GAAG,CAAC2J,QAAQ,EAAE7C,KAAK,CAAC8D,KAAK,CAAC;MACnC,KAAK,QAAQ;MACb,KAAK,KAAK;MACV,KAAK,QAAQ;MACb,KAAK,SAAS;QACZ,IAAI9D,KAAK,CAAC+D,SAAS,EAAE;UACnB,IAAI/D,KAAK,CAAC+D,SAAS,KAAK,YAAY,EAAE;YACpC,OAAOlB,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;UACxB;QACF;QACA,OAAOA,QAAQ;MACjB;QACE,OAAOA,QAAQ;IACnB;EACF;AACF;AAEA7E,MAAM,CAACC,MAAM,CAAC7D,YAAY,CAAC4J,SAAS,EAAE;EACpCxE,YAAY,EAAE,EAAE;EAEhByE,OAAO,EAAE,OAAO;EAEhBC,UAAU,EAAE;AACd,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGhK,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}