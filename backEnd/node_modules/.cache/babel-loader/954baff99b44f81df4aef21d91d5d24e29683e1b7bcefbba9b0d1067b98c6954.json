{"ast":null,"code":"const assert = require('assert');\n\n// Analytic\n// -------\n\n// The \"Analytic\" is an object holding any necessary info about a analytic function\n// e.g row_number, rank, dense_rank,\nclass Analytic {\n  constructor(method, schema, alias, orderBy, partitions) {\n    this.schema = schema;\n    this.type = 'analytic';\n    this.method = method;\n    this.order = orderBy || [];\n    this.partitions = partitions || [];\n    this.alias = alias;\n    this.and = this;\n    this.grouping = 'columns';\n  }\n  partitionBy(column, direction) {\n    assert(Array.isArray(column) || typeof column === 'string', `The argument to an analytic partitionBy function must be either a string\n            or an array of string.`);\n    if (Array.isArray(column)) {\n      this.partitions = this.partitions.concat(column);\n    } else {\n      this.partitions.push({\n        column: column,\n        order: direction\n      });\n    }\n    return this;\n  }\n  orderBy(column, direction) {\n    assert(Array.isArray(column) || typeof column === 'string', `The argument to an analytic orderBy function must be either a string\n            or an array of string.`);\n    if (Array.isArray(column)) {\n      this.order = this.order.concat(column);\n    } else {\n      this.order.push({\n        column: column,\n        order: direction\n      });\n    }\n    return this;\n  }\n}\nmodule.exports = Analytic;","map":{"version":3,"names":["assert","require","Analytic","constructor","method","schema","alias","orderBy","partitions","type","order","and","grouping","partitionBy","column","direction","Array","isArray","concat","push","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/query/analytic.js"],"sourcesContent":["const assert = require('assert');\n\n// Analytic\n// -------\n\n// The \"Analytic\" is an object holding any necessary info about a analytic function\n// e.g row_number, rank, dense_rank,\nclass Analytic {\n  constructor(method, schema, alias, orderBy, partitions) {\n    this.schema = schema;\n    this.type = 'analytic';\n    this.method = method;\n    this.order = orderBy || [];\n    this.partitions = partitions || [];\n    this.alias = alias;\n    this.and = this;\n\n    this.grouping = 'columns';\n  }\n\n  partitionBy(column, direction) {\n    assert(\n      Array.isArray(column) || typeof column === 'string',\n      `The argument to an analytic partitionBy function must be either a string\n            or an array of string.`\n    );\n\n    if (Array.isArray(column)) {\n      this.partitions = this.partitions.concat(column);\n    } else {\n      this.partitions.push({ column: column, order: direction });\n    }\n    return this;\n  }\n\n  orderBy(column, direction) {\n    assert(\n      Array.isArray(column) || typeof column === 'string',\n      `The argument to an analytic orderBy function must be either a string\n            or an array of string.`\n    );\n\n    if (Array.isArray(column)) {\n      this.order = this.order.concat(column);\n    } else {\n      this.order.push({ column: column, order: direction });\n    }\n    return this;\n  }\n}\n\nmodule.exports = Analytic;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA;;AAEA;AACA;AACA,MAAMC,QAAQ,CAAC;EACbC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAE;IACtD,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,IAAI,GAAG,UAAU;IACtB,IAAI,CAACL,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACM,KAAK,GAAGH,OAAO,IAAI,EAAE;IAC1B,IAAI,CAACC,UAAU,GAAGA,UAAU,IAAI,EAAE;IAClC,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACK,GAAG,GAAG,IAAI;IAEf,IAAI,CAACC,QAAQ,GAAG,SAAS;EAC3B;EAEAC,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAE;IAC7Bf,MAAM,CACJgB,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EACnD;AACN,mCACI,CAAC;IAED,IAAIE,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;MACzB,IAAI,CAACN,UAAU,GAAG,IAAI,CAACA,UAAU,CAACU,MAAM,CAACJ,MAAM,CAAC;IAClD,CAAC,MAAM;MACL,IAAI,CAACN,UAAU,CAACW,IAAI,CAAC;QAAEL,MAAM,EAAEA,MAAM;QAAEJ,KAAK,EAAEK;MAAU,CAAC,CAAC;IAC5D;IACA,OAAO,IAAI;EACb;EAEAR,OAAOA,CAACO,MAAM,EAAEC,SAAS,EAAE;IACzBf,MAAM,CACJgB,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EACnD;AACN,mCACI,CAAC;IAED,IAAIE,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;MACzB,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACQ,MAAM,CAACJ,MAAM,CAAC;IACxC,CAAC,MAAM;MACL,IAAI,CAACJ,KAAK,CAACS,IAAI,CAAC;QAAEL,MAAM,EAAEA,MAAM;QAAEJ,KAAK,EAAEK;MAAU,CAAC,CAAC;IACvD;IACA,OAAO,IAAI;EACb;AACF;AAEAK,MAAM,CAACC,OAAO,GAAGnB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}