{"ast":null,"code":"/* eslint max-len:0 */\n\n// View Compiler\n// -------\nconst {\n  pushQuery\n} = require('./internal/helpers');\nconst groupBy = require('lodash/groupBy');\nconst {\n  columnize: columnize_\n} = require('../formatter/wrappingFormatter');\nclass ViewCompiler {\n  constructor(client, viewBuilder) {\n    this.client = client;\n    this.viewBuilder = viewBuilder;\n    this._commonBuilder = this.viewBuilder;\n    this.method = viewBuilder._method;\n    this.schemaNameRaw = viewBuilder._schemaName;\n    this.viewNameRaw = viewBuilder._viewName;\n    this.single = viewBuilder._single;\n    this.selectQuery = viewBuilder._selectQuery;\n    this.columns = viewBuilder._columns;\n    this.grouped = groupBy(viewBuilder._statements, 'grouping');\n    this.formatter = client.formatter(viewBuilder);\n    this.bindings = [];\n    this.formatter.bindings = this.bindings;\n    this.bindingsHolder = this;\n    this.sequence = [];\n  }\n\n  // Convert the tableCompiler toSQL\n  toSQL() {\n    this[this.method]();\n    return this.sequence;\n  }\n\n  // Column Compilation\n  // -------\n\n  create() {\n    this.createQuery(this.columns, this.selectQuery);\n  }\n  createOrReplace() {\n    throw new Error('replace views is not supported by this dialect.');\n  }\n  createMaterializedView() {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n  createQuery(columns, selectQuery, materialized, replace) {\n    const createStatement = 'create ' + (materialized ? 'materialized ' : '') + (replace ? 'or replace ' : '') + 'view ';\n    const columnList = columns ? ' (' + columnize_(columns, this.viewBuilder, this.client, this.bindingsHolder) + ')' : '';\n    let sql = createStatement + this.viewName() + columnList;\n    sql += ' as ';\n    sql += selectQuery.toString();\n    switch (this.single.checkOption) {\n      case 'default_option':\n        sql += ' with check option';\n        break;\n      case 'local':\n        sql += ' with local check option';\n        break;\n      case 'cascaded':\n        sql += ' with cascaded check option';\n        break;\n      default:\n        break;\n    }\n    this.pushQuery({\n      sql\n    });\n  }\n  renameView(from, to) {\n    throw new Error('rename view is not supported by this dialect (instead drop, then create another view).');\n  }\n  refreshMaterializedView() {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n  alter() {\n    this.alterView();\n  }\n  alterView() {\n    const alterView = this.grouped.alterView || [];\n    for (let i = 0, l = alterView.length; i < l; i++) {\n      const statement = alterView[i];\n      if (this[statement.method]) {\n        this[statement.method].apply(this, statement.args);\n      } else {\n        this.client.logger.error(`Debug: ${statement.method} does not exist`);\n      }\n    }\n    for (const item in this.single) {\n      if (typeof this[item] === 'function') this[item](this.single[item]);\n    }\n  }\n  renameColumn(from, to) {\n    throw new Error('rename column of views is not supported by this dialect.');\n  }\n  defaultTo(column, defaultValue) {\n    throw new Error('change default values of views is not supported by this dialect.');\n  }\n  viewName() {\n    const name = this.schemaNameRaw ? `${this.schemaNameRaw}.${this.viewNameRaw}` : this.viewNameRaw;\n    return this.formatter.wrap(name);\n  }\n}\nViewCompiler.prototype.pushQuery = pushQuery;\nmodule.exports = ViewCompiler;","map":{"version":3,"names":["pushQuery","require","groupBy","columnize","columnize_","ViewCompiler","constructor","client","viewBuilder","_commonBuilder","method","_method","schemaNameRaw","_schemaName","viewNameRaw","_viewName","single","_single","selectQuery","_selectQuery","columns","_columns","grouped","_statements","formatter","bindings","bindingsHolder","sequence","toSQL","create","createQuery","createOrReplace","Error","createMaterializedView","materialized","replace","createStatement","columnList","sql","viewName","toString","checkOption","renameView","from","to","refreshMaterializedView","alter","alterView","i","l","length","statement","apply","args","logger","error","item","renameColumn","defaultTo","column","defaultValue","name","wrap","prototype","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/schema/viewcompiler.js"],"sourcesContent":["/* eslint max-len:0 */\n\n// View Compiler\n// -------\nconst { pushQuery } = require('./internal/helpers');\nconst groupBy = require('lodash/groupBy');\nconst { columnize: columnize_ } = require('../formatter/wrappingFormatter');\n\nclass ViewCompiler {\n  constructor(client, viewBuilder) {\n    this.client = client;\n    this.viewBuilder = viewBuilder;\n    this._commonBuilder = this.viewBuilder;\n    this.method = viewBuilder._method;\n    this.schemaNameRaw = viewBuilder._schemaName;\n    this.viewNameRaw = viewBuilder._viewName;\n    this.single = viewBuilder._single;\n    this.selectQuery = viewBuilder._selectQuery;\n    this.columns = viewBuilder._columns;\n    this.grouped = groupBy(viewBuilder._statements, 'grouping');\n\n    this.formatter = client.formatter(viewBuilder);\n    this.bindings = [];\n    this.formatter.bindings = this.bindings;\n    this.bindingsHolder = this;\n\n    this.sequence = [];\n  }\n\n  // Convert the tableCompiler toSQL\n  toSQL() {\n    this[this.method]();\n    return this.sequence;\n  }\n\n  // Column Compilation\n  // -------\n\n  create() {\n    this.createQuery(this.columns, this.selectQuery);\n  }\n\n  createOrReplace() {\n    throw new Error('replace views is not supported by this dialect.');\n  }\n\n  createMaterializedView() {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n\n  createQuery(columns, selectQuery, materialized, replace) {\n    const createStatement =\n      'create ' +\n      (materialized ? 'materialized ' : '') +\n      (replace ? 'or replace ' : '') +\n      'view ';\n    const columnList = columns\n      ? ' (' +\n        columnize_(\n          columns,\n          this.viewBuilder,\n          this.client,\n          this.bindingsHolder\n        ) +\n        ')'\n      : '';\n    let sql = createStatement + this.viewName() + columnList;\n    sql += ' as ';\n    sql += selectQuery.toString();\n    switch (this.single.checkOption) {\n      case 'default_option':\n        sql += ' with check option';\n        break;\n      case 'local':\n        sql += ' with local check option';\n        break;\n      case 'cascaded':\n        sql += ' with cascaded check option';\n        break;\n      default:\n        break;\n    }\n    this.pushQuery({\n      sql,\n    });\n  }\n\n  renameView(from, to) {\n    throw new Error(\n      'rename view is not supported by this dialect (instead drop, then create another view).'\n    );\n  }\n\n  refreshMaterializedView() {\n    throw new Error('materialized views are not supported by this dialect.');\n  }\n\n  alter() {\n    this.alterView();\n  }\n\n  alterView() {\n    const alterView = this.grouped.alterView || [];\n    for (let i = 0, l = alterView.length; i < l; i++) {\n      const statement = alterView[i];\n      if (this[statement.method]) {\n        this[statement.method].apply(this, statement.args);\n      } else {\n        this.client.logger.error(`Debug: ${statement.method} does not exist`);\n      }\n    }\n    for (const item in this.single) {\n      if (typeof this[item] === 'function') this[item](this.single[item]);\n    }\n  }\n\n  renameColumn(from, to) {\n    throw new Error('rename column of views is not supported by this dialect.');\n  }\n\n  defaultTo(column, defaultValue) {\n    throw new Error(\n      'change default values of views is not supported by this dialect.'\n    );\n  }\n\n  viewName() {\n    const name = this.schemaNameRaw\n      ? `${this.schemaNameRaw}.${this.viewNameRaw}`\n      : this.viewNameRaw;\n\n    return this.formatter.wrap(name);\n  }\n}\n\nViewCompiler.prototype.pushQuery = pushQuery;\n\nmodule.exports = ViewCompiler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}