{"ast":null,"code":"const color = require('colorette');\nconst {\n  inspect\n} = require('util');\nconst {\n  isString,\n  isFunction\n} = require('./util/is');\nclass Logger {\n  constructor(config = {}) {\n    const {\n      log: {\n        debug,\n        warn,\n        error,\n        deprecate,\n        inspectionDepth,\n        enableColors\n      } = {}\n    } = config;\n    this._inspectionDepth = inspectionDepth || 5;\n    this._enableColors = resolveIsEnabledColors(enableColors);\n    this._debug = debug;\n    this._warn = warn;\n    this._error = error;\n    this._deprecate = deprecate;\n  }\n  _log(message, userFn, colorFn) {\n    if (userFn != null && !isFunction(userFn)) {\n      throw new TypeError('Extensions to knex logger must be functions!');\n    }\n    if (isFunction(userFn)) {\n      userFn(message);\n      return;\n    }\n    if (!isString(message)) {\n      message = inspect(message, {\n        depth: this._inspectionDepth,\n        colors: this._enableColors\n      });\n    }\n    console.log(colorFn ? colorFn(message) : message);\n  }\n  debug(message) {\n    this._log(message, this._debug);\n  }\n  warn(message) {\n    this._log(message, this._warn, color.yellow);\n  }\n  error(message) {\n    this._log(message, this._error, color.red);\n  }\n  deprecate(method, alternative) {\n    const message = `${method} is deprecated, please use ${alternative}`;\n    this._log(message, this._deprecate, color.yellow);\n  }\n}\nfunction resolveIsEnabledColors(enableColorsParam) {\n  if (enableColorsParam != null) {\n    return enableColorsParam;\n  }\n  if (process && process.stdout) {\n    return process.stdout.isTTY;\n  }\n  return false;\n}\nmodule.exports = Logger;","map":{"version":3,"names":["color","require","inspect","isString","isFunction","Logger","constructor","config","log","debug","warn","error","deprecate","inspectionDepth","enableColors","_inspectionDepth","_enableColors","resolveIsEnabledColors","_debug","_warn","_error","_deprecate","_log","message","userFn","colorFn","TypeError","depth","colors","console","yellow","red","method","alternative","enableColorsParam","process","stdout","isTTY","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/logger.js"],"sourcesContent":["const color = require('colorette');\nconst { inspect } = require('util');\nconst { isString, isFunction } = require('./util/is');\n\nclass Logger {\n  constructor(config = {}) {\n    const {\n      log: {\n        debug,\n        warn,\n        error,\n        deprecate,\n        inspectionDepth,\n        enableColors,\n      } = {},\n    } = config;\n    this._inspectionDepth = inspectionDepth || 5;\n    this._enableColors = resolveIsEnabledColors(enableColors);\n    this._debug = debug;\n    this._warn = warn;\n    this._error = error;\n    this._deprecate = deprecate;\n  }\n\n  _log(message, userFn, colorFn) {\n    if (userFn != null && !isFunction(userFn)) {\n      throw new TypeError('Extensions to knex logger must be functions!');\n    }\n\n    if (isFunction(userFn)) {\n      userFn(message);\n      return;\n    }\n\n    if (!isString(message)) {\n      message = inspect(message, {\n        depth: this._inspectionDepth,\n        colors: this._enableColors,\n      });\n    }\n\n    console.log(colorFn ? colorFn(message) : message);\n  }\n\n  debug(message) {\n    this._log(message, this._debug);\n  }\n\n  warn(message) {\n    this._log(message, this._warn, color.yellow);\n  }\n\n  error(message) {\n    this._log(message, this._error, color.red);\n  }\n\n  deprecate(method, alternative) {\n    const message = `${method} is deprecated, please use ${alternative}`;\n\n    this._log(message, this._deprecate, color.yellow);\n  }\n}\n\nfunction resolveIsEnabledColors(enableColorsParam) {\n  if (enableColorsParam != null) {\n    return enableColorsParam;\n  }\n\n  if (process && process.stdout) {\n    return process.stdout.isTTY;\n  }\n\n  return false;\n}\n\nmodule.exports = Logger;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,WAAW,CAAC;AAClC,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AACnC,MAAM;EAAEE,QAAQ;EAAEC;AAAW,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;AAErD,MAAMI,MAAM,CAAC;EACXC,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACvB,MAAM;MACJC,GAAG,EAAE;QACHC,KAAK;QACLC,IAAI;QACJC,KAAK;QACLC,SAAS;QACTC,eAAe;QACfC;MACF,CAAC,GAAG,CAAC;IACP,CAAC,GAAGP,MAAM;IACV,IAAI,CAACQ,gBAAgB,GAAGF,eAAe,IAAI,CAAC;IAC5C,IAAI,CAACG,aAAa,GAAGC,sBAAsB,CAACH,YAAY,CAAC;IACzD,IAAI,CAACI,MAAM,GAAGT,KAAK;IACnB,IAAI,CAACU,KAAK,GAAGT,IAAI;IACjB,IAAI,CAACU,MAAM,GAAGT,KAAK;IACnB,IAAI,CAACU,UAAU,GAAGT,SAAS;EAC7B;EAEAU,IAAIA,CAACC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAE;IAC7B,IAAID,MAAM,IAAI,IAAI,IAAI,CAACpB,UAAU,CAACoB,MAAM,CAAC,EAAE;MACzC,MAAM,IAAIE,SAAS,CAAC,8CAA8C,CAAC;IACrE;IAEA,IAAItB,UAAU,CAACoB,MAAM,CAAC,EAAE;MACtBA,MAAM,CAACD,OAAO,CAAC;MACf;IACF;IAEA,IAAI,CAACpB,QAAQ,CAACoB,OAAO,CAAC,EAAE;MACtBA,OAAO,GAAGrB,OAAO,CAACqB,OAAO,EAAE;QACzBI,KAAK,EAAE,IAAI,CAACZ,gBAAgB;QAC5Ba,MAAM,EAAE,IAAI,CAACZ;MACf,CAAC,CAAC;IACJ;IAEAa,OAAO,CAACrB,GAAG,CAACiB,OAAO,GAAGA,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,CAAC;EACnD;EAEAd,KAAKA,CAACc,OAAO,EAAE;IACb,IAAI,CAACD,IAAI,CAACC,OAAO,EAAE,IAAI,CAACL,MAAM,CAAC;EACjC;EAEAR,IAAIA,CAACa,OAAO,EAAE;IACZ,IAAI,CAACD,IAAI,CAACC,OAAO,EAAE,IAAI,CAACJ,KAAK,EAAEnB,KAAK,CAAC8B,MAAM,CAAC;EAC9C;EAEAnB,KAAKA,CAACY,OAAO,EAAE;IACb,IAAI,CAACD,IAAI,CAACC,OAAO,EAAE,IAAI,CAACH,MAAM,EAAEpB,KAAK,CAAC+B,GAAG,CAAC;EAC5C;EAEAnB,SAASA,CAACoB,MAAM,EAAEC,WAAW,EAAE;IAC7B,MAAMV,OAAO,GAAG,GAAGS,MAAM,8BAA8BC,WAAW,EAAE;IAEpE,IAAI,CAACX,IAAI,CAACC,OAAO,EAAE,IAAI,CAACF,UAAU,EAAErB,KAAK,CAAC8B,MAAM,CAAC;EACnD;AACF;AAEA,SAASb,sBAAsBA,CAACiB,iBAAiB,EAAE;EACjD,IAAIA,iBAAiB,IAAI,IAAI,EAAE;IAC7B,OAAOA,iBAAiB;EAC1B;EAEA,IAAIC,OAAO,IAAIA,OAAO,CAACC,MAAM,EAAE;IAC7B,OAAOD,OAAO,CAACC,MAAM,CAACC,KAAK;EAC7B;EAEA,OAAO,KAAK;AACd;AAEAC,MAAM,CAACC,OAAO,GAAGlC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}