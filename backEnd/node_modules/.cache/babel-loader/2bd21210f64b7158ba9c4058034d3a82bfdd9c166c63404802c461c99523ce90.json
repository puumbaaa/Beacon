{"ast":null,"code":"// SQLite3\n// -------\nconst defaults = require('lodash/defaults');\nconst map = require('lodash/map');\nconst {\n  promisify\n} = require('util');\nconst Client = require('../../client');\nconst Raw = require('../../raw');\nconst Transaction = require('./execution/sqlite-transaction');\nconst SqliteQueryCompiler = require('./query/sqlite-querycompiler');\nconst SchemaCompiler = require('./schema/sqlite-compiler');\nconst ColumnCompiler = require('./schema/sqlite-columncompiler');\nconst TableCompiler = require('./schema/sqlite-tablecompiler');\nconst ViewCompiler = require('./schema/sqlite-viewcompiler');\nconst SQLite3_DDL = require('./schema/ddl');\nconst Formatter = require('../../formatter');\nconst QueryBuilder = require('./query/sqlite-querybuilder');\nclass Client_SQLite3 extends Client {\n  constructor(config) {\n    super(config);\n    if (config.connection && config.connection.filename === undefined) {\n      this.logger.warn('Could not find `connection.filename` in config. Please specify ' + 'the database path and name to avoid errors. ' + '(see docs https://knexjs.org/guide/#configuration-options)');\n    }\n    if (config.useNullAsDefault === undefined) {\n      this.logger.warn('sqlite does not support inserting default values. Set the ' + '`useNullAsDefault` flag to hide this warning. ' + '(see docs https://knexjs.org/guide/query-builder.html#insert).');\n    }\n  }\n  _driver() {\n    return require('sqlite3');\n  }\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n  queryCompiler(builder, formatter) {\n    return new SqliteQueryCompiler(this, builder, formatter);\n  }\n  queryBuilder() {\n    return new QueryBuilder(this);\n  }\n  viewCompiler(builder, formatter) {\n    return new ViewCompiler(this, builder, formatter);\n  }\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n  ddl(compiler, pragma, connection) {\n    return new SQLite3_DDL(this, compiler, pragma, connection);\n  }\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\\`${value.replace(/`/g, '``')}\\`` : '*';\n  }\n\n  // Get a raw connection from the database, returning a promise with the connection object.\n  acquireRawConnection() {\n    return new Promise((resolve, reject) => {\n      // the default mode for sqlite3\n      let flags = this.driver.OPEN_READWRITE | this.driver.OPEN_CREATE;\n      if (this.connectionSettings.flags) {\n        if (!Array.isArray(this.connectionSettings.flags)) {\n          throw new Error(`flags must be an array of strings`);\n        }\n        this.connectionSettings.flags.forEach(_flag => {\n          if (!_flag.startsWith('OPEN_') || !this.driver[_flag]) {\n            throw new Error(`flag ${_flag} not supported by node-sqlite3`);\n          }\n          flags = flags | this.driver[_flag];\n        });\n      }\n      const db = new this.driver.Database(this.connectionSettings.filename, flags, err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(db);\n      });\n    });\n  }\n\n  // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n  async destroyRawConnection(connection) {\n    const close = promisify(cb => connection.close(cb));\n    return close();\n  }\n\n  // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n  _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n    const {\n      method\n    } = obj;\n    let callMethod;\n    switch (method) {\n      case 'insert':\n      case 'update':\n        callMethod = obj.returning ? 'all' : 'run';\n        break;\n      case 'counter':\n      case 'del':\n        callMethod = 'run';\n        break;\n      default:\n        callMethod = 'all';\n    }\n    return new Promise(function (resolver, rejecter) {\n      if (!connection || !connection[callMethod]) {\n        return rejecter(new Error(`Error calling ${callMethod} on connection.`));\n      }\n      connection[callMethod](obj.sql, obj.bindings, function (err, response) {\n        if (err) return rejecter(err);\n        obj.response = response;\n\n        // We need the context here, as it contains\n        // the \"this.lastID\" or \"this.changes\"\n        obj.context = this;\n        return resolver(obj);\n      });\n    });\n  }\n  _stream(connection, obj, stream) {\n    if (!obj.sql) throw new Error('The query is empty');\n    const client = this;\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n      return client._query(connection, obj).then(obj => obj.response).then(rows => rows.forEach(row => stream.write(row))).catch(function (err) {\n        stream.emit('error', err);\n      }).then(function () {\n        stream.end();\n      });\n    });\n  }\n\n  // Ensures the response is returned in the same format as other clients.\n  processResponse(obj, runner) {\n    const ctx = obj.context;\n    const {\n      response,\n      returning\n    } = obj;\n    if (obj.output) return obj.output.call(runner, response);\n    switch (obj.method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, obj.pluck);\n      case 'insert':\n        {\n          if (returning) {\n            if (response) {\n              return response;\n            }\n          }\n          return [ctx.lastID];\n        }\n      case 'update':\n        {\n          if (returning) {\n            if (response) {\n              return response;\n            }\n          }\n          return ctx.changes;\n        }\n      case 'del':\n      case 'counter':\n        return ctx.changes;\n      default:\n        {\n          return response;\n        }\n    }\n  }\n  poolDefaults() {\n    return defaults({\n      min: 1,\n      max: 1\n    }, super.poolDefaults());\n  }\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n  values(values, builder, formatter) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `( values ${values.map(value => `(${this.parameterize(value, undefined, builder, formatter)})`).join(', ')})`;\n      }\n      return `(${this.parameterize(values, undefined, builder, formatter)})`;\n    }\n    if (values instanceof Raw) {\n      return `(${this.parameter(values, builder, formatter)})`;\n    }\n    return this.parameter(values, builder, formatter);\n  }\n}\nObject.assign(Client_SQLite3.prototype, {\n  dialect: 'sqlite3',\n  driverName: 'sqlite3'\n});\nmodule.exports = Client_SQLite3;","map":{"version":3,"names":["defaults","require","map","promisify","Client","Raw","Transaction","SqliteQueryCompiler","SchemaCompiler","ColumnCompiler","TableCompiler","ViewCompiler","SQLite3_DDL","Formatter","QueryBuilder","Client_SQLite3","constructor","config","connection","filename","undefined","logger","warn","useNullAsDefault","_driver","schemaCompiler","arguments","transaction","queryCompiler","builder","formatter","queryBuilder","viewCompiler","columnCompiler","tableCompiler","ddl","compiler","pragma","wrapIdentifierImpl","value","replace","acquireRawConnection","Promise","resolve","reject","flags","driver","OPEN_READWRITE","OPEN_CREATE","connectionSettings","Array","isArray","Error","forEach","_flag","startsWith","db","Database","err","destroyRawConnection","close","cb","_query","obj","sql","method","callMethod","returning","resolver","rejecter","bindings","response","context","_stream","stream","client","on","then","rows","row","write","catch","emit","end","processResponse","runner","ctx","output","call","pluck","lastID","changes","poolDefaults","min","max","values","parameterize","join","parameter","Object","assign","prototype","dialect","driverName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/sqlite3/index.js"],"sourcesContent":["// SQLite3\n// -------\nconst defaults = require('lodash/defaults');\nconst map = require('lodash/map');\nconst { promisify } = require('util');\n\nconst Client = require('../../client');\n\nconst Raw = require('../../raw');\nconst Transaction = require('./execution/sqlite-transaction');\nconst SqliteQueryCompiler = require('./query/sqlite-querycompiler');\nconst SchemaCompiler = require('./schema/sqlite-compiler');\nconst ColumnCompiler = require('./schema/sqlite-columncompiler');\nconst TableCompiler = require('./schema/sqlite-tablecompiler');\nconst ViewCompiler = require('./schema/sqlite-viewcompiler');\nconst SQLite3_DDL = require('./schema/ddl');\nconst Formatter = require('../../formatter');\nconst QueryBuilder = require('./query/sqlite-querybuilder');\n\nclass Client_SQLite3 extends Client {\n  constructor(config) {\n    super(config);\n\n    if (config.connection && config.connection.filename === undefined) {\n      this.logger.warn(\n        'Could not find `connection.filename` in config. Please specify ' +\n          'the database path and name to avoid errors. ' +\n          '(see docs https://knexjs.org/guide/#configuration-options)'\n      );\n    }\n\n    if (config.useNullAsDefault === undefined) {\n      this.logger.warn(\n        'sqlite does not support inserting default values. Set the ' +\n          '`useNullAsDefault` flag to hide this warning. ' +\n          '(see docs https://knexjs.org/guide/query-builder.html#insert).'\n      );\n    }\n  }\n\n  _driver() {\n    return require('sqlite3');\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new SqliteQueryCompiler(this, builder, formatter);\n  }\n\n  queryBuilder() {\n    return new QueryBuilder(this);\n  }\n\n  viewCompiler(builder, formatter) {\n    return new ViewCompiler(this, builder, formatter);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  ddl(compiler, pragma, connection) {\n    return new SQLite3_DDL(this, compiler, pragma, connection);\n  }\n\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\\`${value.replace(/`/g, '``')}\\`` : '*';\n  }\n\n  // Get a raw connection from the database, returning a promise with the connection object.\n  acquireRawConnection() {\n    return new Promise((resolve, reject) => {\n      // the default mode for sqlite3\n      let flags = this.driver.OPEN_READWRITE | this.driver.OPEN_CREATE;\n\n      if (this.connectionSettings.flags) {\n        if (!Array.isArray(this.connectionSettings.flags)) {\n          throw new Error(`flags must be an array of strings`);\n        }\n        this.connectionSettings.flags.forEach((_flag) => {\n          if (!_flag.startsWith('OPEN_') || !this.driver[_flag]) {\n            throw new Error(`flag ${_flag} not supported by node-sqlite3`);\n          }\n          flags = flags | this.driver[_flag];\n        });\n      }\n\n      const db = new this.driver.Database(\n        this.connectionSettings.filename,\n        flags,\n        (err) => {\n          if (err) {\n            return reject(err);\n          }\n          resolve(db);\n        }\n      );\n    });\n  }\n\n  // Used to explicitly close a connection, called internally by the pool when\n  // a connection times out or the pool is shutdown.\n  async destroyRawConnection(connection) {\n    const close = promisify((cb) => connection.close(cb));\n    return close();\n  }\n\n  // Runs the query on the specified connection, providing the bindings and any\n  // other necessary prep work.\n  _query(connection, obj) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    const { method } = obj;\n    let callMethod;\n    switch (method) {\n      case 'insert':\n      case 'update':\n        callMethod = obj.returning ? 'all' : 'run';\n        break;\n      case 'counter':\n      case 'del':\n        callMethod = 'run';\n        break;\n      default:\n        callMethod = 'all';\n    }\n    return new Promise(function (resolver, rejecter) {\n      if (!connection || !connection[callMethod]) {\n        return rejecter(\n          new Error(`Error calling ${callMethod} on connection.`)\n        );\n      }\n      connection[callMethod](obj.sql, obj.bindings, function (err, response) {\n        if (err) return rejecter(err);\n        obj.response = response;\n\n        // We need the context here, as it contains\n        // the \"this.lastID\" or \"this.changes\"\n        obj.context = this;\n\n        return resolver(obj);\n      });\n    });\n  }\n\n  _stream(connection, obj, stream) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    const client = this;\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', rejecter);\n      stream.on('end', resolver);\n\n      return client\n        ._query(connection, obj)\n        .then((obj) => obj.response)\n        .then((rows) => rows.forEach((row) => stream.write(row)))\n        .catch(function (err) {\n          stream.emit('error', err);\n        })\n        .then(function () {\n          stream.end();\n        });\n    });\n  }\n\n  // Ensures the response is returned in the same format as other clients.\n  processResponse(obj, runner) {\n    const ctx = obj.context;\n    const { response, returning } = obj;\n    if (obj.output) return obj.output.call(runner, response);\n    switch (obj.method) {\n      case 'select':\n        return response;\n      case 'first':\n        return response[0];\n      case 'pluck':\n        return map(response, obj.pluck);\n      case 'insert': {\n        if (returning) {\n          if (response) {\n            return response;\n          }\n        }\n        return [ctx.lastID];\n      }\n      case 'update': {\n        if (returning) {\n          if (response) {\n            return response;\n          }\n        }\n        return ctx.changes;\n      }\n      case 'del':\n      case 'counter':\n        return ctx.changes;\n      default: {\n        return response;\n      }\n    }\n  }\n\n  poolDefaults() {\n    return defaults({ min: 1, max: 1 }, super.poolDefaults());\n  }\n\n  formatter(builder) {\n    return new Formatter(this, builder);\n  }\n\n  values(values, builder, formatter) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `( values ${values\n          .map(\n            (value) =>\n              `(${this.parameterize(value, undefined, builder, formatter)})`\n          )\n          .join(', ')})`;\n      }\n      return `(${this.parameterize(values, undefined, builder, formatter)})`;\n    }\n\n    if (values instanceof Raw) {\n      return `(${this.parameter(values, builder, formatter)})`;\n    }\n\n    return this.parameter(values, builder, formatter);\n  }\n}\n\nObject.assign(Client_SQLite3.prototype, {\n  dialect: 'sqlite3',\n\n  driverName: 'sqlite3',\n});\n\nmodule.exports = Client_SQLite3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}