{"ast":null,"code":"// SQLite3: Column Builder & Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\nconst some = require('lodash/some');\n\n// Schema Compiler\n// -------\n\nclass SchemaCompiler_SQLite3 extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n\n  // Compile the query to determine if a table exists.\n  hasTable(tableName) {\n    const sql = `select * from sqlite_master ` + `where type = 'table' and name = ${this.client.parameter(this.formatter.wrap(tableName).replace(/`/g, ''), this.builder, this.bindingsHolder)}`;\n    this.pushQuery({\n      sql,\n      output: resp => resp.length > 0\n    });\n  }\n\n  // Compile the query to determine if a column exists.\n  hasColumn(tableName, column) {\n    this.pushQuery({\n      sql: `PRAGMA table_info(${this.formatter.wrap(tableName)})`,\n      output(resp) {\n        return some(resp, col => {\n          return this.client.wrapIdentifier(col.name.toLowerCase()) === this.client.wrapIdentifier(column.toLowerCase());\n        });\n      }\n    });\n  }\n\n  // Compile a rename table command.\n  renameTable(from, to) {\n    this.pushQuery(`alter table ${this.formatter.wrap(from)} rename to ${this.formatter.wrap(to)}`);\n  }\n  async generateDdlCommands() {\n    const sequence = this.builder._sequence;\n    for (let i = 0, l = sequence.length; i < l; i++) {\n      const query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n    const commandSources = this.sequence;\n    if (commandSources.length === 1 && commandSources[0].statementsProducer) {\n      return commandSources[0].statementsProducer();\n    } else {\n      const result = [];\n      for (const commandSource of commandSources) {\n        const command = commandSource.sql;\n        if (Array.isArray(command)) {\n          result.push(...command);\n        } else {\n          result.push(command);\n        }\n      }\n      return {\n        pre: [],\n        sql: result,\n        check: null,\n        post: []\n      };\n    }\n  }\n}\nmodule.exports = SchemaCompiler_SQLite3;","map":{"version":3,"names":["SchemaCompiler","require","some","SchemaCompiler_SQLite3","constructor","client","builder","hasTable","tableName","sql","parameter","formatter","wrap","replace","bindingsHolder","pushQuery","output","resp","length","hasColumn","column","col","wrapIdentifier","name","toLowerCase","renameTable","from","to","generateDdlCommands","sequence","_sequence","i","l","query","method","apply","args","commandSources","statementsProducer","result","commandSource","command","Array","isArray","push","pre","check","post","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/sqlite3/schema/sqlite-compiler.js"],"sourcesContent":["// SQLite3: Column Builder & Compiler\n// -------\nconst SchemaCompiler = require('../../../schema/compiler');\n\nconst some = require('lodash/some');\n\n// Schema Compiler\n// -------\n\nclass SchemaCompiler_SQLite3 extends SchemaCompiler {\n  constructor(client, builder) {\n    super(client, builder);\n  }\n\n  // Compile the query to determine if a table exists.\n  hasTable(tableName) {\n    const sql =\n      `select * from sqlite_master ` +\n      `where type = 'table' and name = ${this.client.parameter(\n        this.formatter.wrap(tableName).replace(/`/g, ''),\n        this.builder,\n        this.bindingsHolder\n      )}`;\n    this.pushQuery({ sql, output: (resp) => resp.length > 0 });\n  }\n\n  // Compile the query to determine if a column exists.\n  hasColumn(tableName, column) {\n    this.pushQuery({\n      sql: `PRAGMA table_info(${this.formatter.wrap(tableName)})`,\n      output(resp) {\n        return some(resp, (col) => {\n          return (\n            this.client.wrapIdentifier(col.name.toLowerCase()) ===\n            this.client.wrapIdentifier(column.toLowerCase())\n          );\n        });\n      },\n    });\n  }\n\n  // Compile a rename table command.\n  renameTable(from, to) {\n    this.pushQuery(\n      `alter table ${this.formatter.wrap(from)} rename to ${this.formatter.wrap(\n        to\n      )}`\n    );\n  }\n\n  async generateDdlCommands() {\n    const sequence = this.builder._sequence;\n    for (let i = 0, l = sequence.length; i < l; i++) {\n      const query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n\n    const commandSources = this.sequence;\n\n    if (commandSources.length === 1 && commandSources[0].statementsProducer) {\n      return commandSources[0].statementsProducer();\n    } else {\n      const result = [];\n\n      for (const commandSource of commandSources) {\n        const command = commandSource.sql;\n\n        if (Array.isArray(command)) {\n          result.push(...command);\n        } else {\n          result.push(command);\n        }\n      }\n\n      return { pre: [], sql: result, check: null, post: [] };\n    }\n  }\n}\n\nmodule.exports = SchemaCompiler_SQLite3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}