{"ast":null,"code":"// CockroachDB Client\n// -------\nconst Client_PostgreSQL = require('../postgres');\nconst Transaction = require('../postgres/execution/pg-transaction');\nconst QueryCompiler = require('./crdb-querycompiler');\nconst ColumnCompiler = require('./crdb-columncompiler');\nconst TableCompiler = require('./crdb-tablecompiler');\nconst ViewCompiler = require('./crdb-viewcompiler');\nconst QueryBuilder = require('./crdb-querybuilder');\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\"\n// objects, which extend the base 'lib/query/builder' and\n// 'lib/query/compiler', respectively.\nclass Client_CockroachDB extends Client_PostgreSQL {\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n  queryBuilder() {\n    return new QueryBuilder(this);\n  }\n  _parseVersion(versionString) {\n    return versionString.split(' ')[2];\n  }\n  async cancelQuery(connectionToKill) {\n    try {\n      return await this._wrappedCancelQueryCall(null, connectionToKill);\n    } catch (err) {\n      this.logger.warn(`Connection Error: ${err}`);\n      throw err;\n    }\n  }\n  _wrappedCancelQueryCall(emptyConnection, connectionToKill) {\n    // FixMe https://github.com/cockroachdb/cockroach/issues/41335\n    if (connectionToKill.activeQuery.processID === 0 && connectionToKill.activeQuery.secretKey === 0) {\n      return;\n    }\n    return connectionToKill.cancel(connectionToKill, connectionToKill.activeQuery);\n  }\n  toArrayPathFromJsonPath(jsonPath, builder, bindingsHolder) {\n    return jsonPath.replace(/^(\\$\\.)/, '') // remove the first dollar\n    .replace(/\\[([0-9]+)]/, '.$1').split('.').map(function (v) {\n      return this.parameter(v, builder, bindingsHolder);\n    }.bind(this)).join(', ');\n  }\n}\nObject.assign(Client_CockroachDB.prototype, {\n  // The \"dialect\", for reference elsewhere.\n  driverName: 'cockroachdb'\n});\nmodule.exports = Client_CockroachDB;","map":{"version":3,"names":["Client_PostgreSQL","require","Transaction","QueryCompiler","ColumnCompiler","TableCompiler","ViewCompiler","QueryBuilder","Client_CockroachDB","transaction","arguments","queryCompiler","builder","formatter","columnCompiler","tableCompiler","viewCompiler","queryBuilder","_parseVersion","versionString","split","cancelQuery","connectionToKill","_wrappedCancelQueryCall","err","logger","warn","emptyConnection","activeQuery","processID","secretKey","cancel","toArrayPathFromJsonPath","jsonPath","bindingsHolder","replace","map","v","parameter","bind","join","Object","assign","prototype","driverName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/cockroachdb/index.js"],"sourcesContent":["// CockroachDB Client\n// -------\nconst Client_PostgreSQL = require('../postgres');\nconst Transaction = require('../postgres/execution/pg-transaction');\nconst QueryCompiler = require('./crdb-querycompiler');\nconst ColumnCompiler = require('./crdb-columncompiler');\nconst TableCompiler = require('./crdb-tablecompiler');\nconst ViewCompiler = require('./crdb-viewcompiler');\nconst QueryBuilder = require('./crdb-querybuilder');\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\"\n// objects, which extend the base 'lib/query/builder' and\n// 'lib/query/compiler', respectively.\nclass Client_CockroachDB extends Client_PostgreSQL {\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n\n  queryBuilder() {\n    return new QueryBuilder(this);\n  }\n\n  _parseVersion(versionString) {\n    return versionString.split(' ')[2];\n  }\n\n  async cancelQuery(connectionToKill) {\n    try {\n      return await this._wrappedCancelQueryCall(null, connectionToKill);\n    } catch (err) {\n      this.logger.warn(`Connection Error: ${err}`);\n      throw err;\n    }\n  }\n\n  _wrappedCancelQueryCall(emptyConnection, connectionToKill) {\n    // FixMe https://github.com/cockroachdb/cockroach/issues/41335\n    if (\n      connectionToKill.activeQuery.processID === 0 &&\n      connectionToKill.activeQuery.secretKey === 0\n    ) {\n      return;\n    }\n\n    return connectionToKill.cancel(\n      connectionToKill,\n      connectionToKill.activeQuery\n    );\n  }\n\n  toArrayPathFromJsonPath(jsonPath, builder, bindingsHolder) {\n    return jsonPath\n      .replace(/^(\\$\\.)/, '') // remove the first dollar\n      .replace(/\\[([0-9]+)]/, '.$1')\n      .split('.')\n      .map(\n        function (v) {\n          return this.parameter(v, builder, bindingsHolder);\n        }.bind(this)\n      )\n      .join(', ');\n  }\n}\n\nObject.assign(Client_CockroachDB.prototype, {\n  // The \"dialect\", for reference elsewhere.\n  driverName: 'cockroachdb',\n});\n\nmodule.exports = Client_CockroachDB;\n"],"mappings":"AAAA;AACA;AACA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,aAAa,CAAC;AAChD,MAAMC,WAAW,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AACnE,MAAME,aAAa,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAMG,cAAc,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAMI,aAAa,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAMK,YAAY,GAAGL,OAAO,CAAC,qBAAqB,CAAC;AACnD,MAAMM,YAAY,GAAGN,OAAO,CAAC,qBAAqB,CAAC;;AAEnD;AACA;AACA;AACA,MAAMO,kBAAkB,SAASR,iBAAiB,CAAC;EACjDS,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAIP,WAAW,CAAC,IAAI,EAAE,GAAGQ,SAAS,CAAC;EAC5C;EAEAC,aAAaA,CAACC,OAAO,EAAEC,SAAS,EAAE;IAChC,OAAO,IAAIV,aAAa,CAAC,IAAI,EAAES,OAAO,EAAEC,SAAS,CAAC;EACpD;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIV,cAAc,CAAC,IAAI,EAAE,GAAGM,SAAS,CAAC;EAC/C;EAEAK,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIV,aAAa,CAAC,IAAI,EAAE,GAAGK,SAAS,CAAC;EAC9C;EAEAM,YAAYA,CAAA,EAAG;IACb,OAAO,IAAIV,YAAY,CAAC,IAAI,EAAE,GAAGI,SAAS,CAAC;EAC7C;EAEAO,YAAYA,CAAA,EAAG;IACb,OAAO,IAAIV,YAAY,CAAC,IAAI,CAAC;EAC/B;EAEAW,aAAaA,CAACC,aAAa,EAAE;IAC3B,OAAOA,aAAa,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpC;EAEA,MAAMC,WAAWA,CAACC,gBAAgB,EAAE;IAClC,IAAI;MACF,OAAO,MAAM,IAAI,CAACC,uBAAuB,CAAC,IAAI,EAAED,gBAAgB,CAAC;IACnE,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,qBAAqBF,GAAG,EAAE,CAAC;MAC5C,MAAMA,GAAG;IACX;EACF;EAEAD,uBAAuBA,CAACI,eAAe,EAAEL,gBAAgB,EAAE;IACzD;IACA,IACEA,gBAAgB,CAACM,WAAW,CAACC,SAAS,KAAK,CAAC,IAC5CP,gBAAgB,CAACM,WAAW,CAACE,SAAS,KAAK,CAAC,EAC5C;MACA;IACF;IAEA,OAAOR,gBAAgB,CAACS,MAAM,CAC5BT,gBAAgB,EAChBA,gBAAgB,CAACM,WACnB,CAAC;EACH;EAEAI,uBAAuBA,CAACC,QAAQ,EAAErB,OAAO,EAAEsB,cAAc,EAAE;IACzD,OAAOD,QAAQ,CACZE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAAA,CACvBA,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAC7Bf,KAAK,CAAC,GAAG,CAAC,CACVgB,GAAG,CACF,UAAUC,CAAC,EAAE;MACX,OAAO,IAAI,CAACC,SAAS,CAACD,CAAC,EAAEzB,OAAO,EAAEsB,cAAc,CAAC;IACnD,CAAC,CAACK,IAAI,CAAC,IAAI,CACb,CAAC,CACAC,IAAI,CAAC,IAAI,CAAC;EACf;AACF;AAEAC,MAAM,CAACC,MAAM,CAAClC,kBAAkB,CAACmC,SAAS,EAAE;EAC1C;EACAC,UAAU,EAAE;AACd,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGtC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}