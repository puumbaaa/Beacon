{"ast":null,"code":"/* eslint max-len:0 */\n\n// Table Compiler\n// -------\nconst {\n  pushAdditional,\n  pushQuery,\n  unshiftQuery\n} = require('./internal/helpers');\nconst helpers = require('../util/helpers');\nconst groupBy = require('lodash/groupBy');\nconst indexOf = require('lodash/indexOf');\nconst isEmpty = require('lodash/isEmpty');\nconst tail = require('lodash/tail');\nconst {\n  normalizeArr\n} = require('../util/helpers');\nclass TableCompiler {\n  constructor(client, tableBuilder) {\n    this.client = client;\n    this.tableBuilder = tableBuilder;\n    this._commonBuilder = this.tableBuilder;\n    this.method = tableBuilder._method;\n    this.schemaNameRaw = tableBuilder._schemaName;\n    this.tableNameRaw = tableBuilder._tableName;\n    this.tableNameLikeRaw = tableBuilder._tableNameLike;\n    this.single = tableBuilder._single;\n    this.grouped = groupBy(tableBuilder._statements, 'grouping');\n    this.formatter = client.formatter(tableBuilder);\n    this.bindings = [];\n    this.formatter.bindings = this.bindings;\n    this.bindingsHolder = this;\n    this.sequence = [];\n    this._formatting = client.config && client.config.formatting;\n    this.checksCount = 0;\n  }\n\n  // Convert the tableCompiler toSQL\n  toSQL() {\n    this[this.method]();\n    return this.sequence;\n  }\n\n  // Column Compilation\n  // -------\n\n  // If this is a table \"creation\", we need to first run through all\n  // of the columns to build them into a single string,\n  // and then run through anything else and push it to the query sequence.\n  create(ifNot, like) {\n    const columnBuilders = this.getColumns();\n    const columns = columnBuilders.map(col => col.toSQL());\n    const columnTypes = this.getColumnTypes(columns);\n    if (this.createAlterTableMethods) {\n      this.alterTableForCreate(columnTypes);\n    }\n    this.createQuery(columnTypes, ifNot, like);\n    this.columnQueries(columns);\n    delete this.single.comment;\n    this.alterTable();\n  }\n\n  // Only create the table if it doesn't exist.\n  createIfNot() {\n    this.create(true);\n  }\n  createLike() {\n    this.create(false, true);\n  }\n  createLikeIfNot() {\n    this.create(true, true);\n  }\n\n  // If we're altering the table, we need to one-by-one\n  // go through and handle each of the queries associated\n  // with altering the table's schema.\n  alter() {\n    const addColBuilders = this.getColumns();\n    const addColumns = addColBuilders.map(col => col.toSQL());\n    const alterColBuilders = this.getColumns('alter');\n    const alterColumns = alterColBuilders.map(col => col.toSQL());\n    const addColumnTypes = this.getColumnTypes(addColumns);\n    const alterColumnTypes = this.getColumnTypes(alterColumns);\n    this.addColumns(addColumnTypes);\n    this.alterColumns(alterColumnTypes, alterColBuilders);\n    this.columnQueries(addColumns);\n    this.columnQueries(alterColumns);\n    this.alterTable();\n  }\n  foreign(foreignData) {\n    if (foreignData.inTable && foreignData.references) {\n      const keyName = foreignData.keyName ? this.formatter.wrap(foreignData.keyName) : this._indexCommand('foreign', this.tableNameRaw, foreignData.column);\n      const column = this.formatter.columnize(foreignData.column);\n      const references = this.formatter.columnize(foreignData.references);\n      const inTable = this.formatter.wrap(foreignData.inTable);\n      const onUpdate = foreignData.onUpdate ? (this.lowerCase ? ' on update ' : ' ON UPDATE ') + foreignData.onUpdate : '';\n      const onDelete = foreignData.onDelete ? (this.lowerCase ? ' on delete ' : ' ON DELETE ') + foreignData.onDelete : '';\n      const deferrable = foreignData.deferrable ? this.lowerCase ? ` deferrable initially ${foreignData.deferrable.toLowerCase()} ` : ` DEFERRABLE INITIALLY ${foreignData.deferrable.toUpperCase()} ` : '';\n      if (this.lowerCase) {\n        this.pushQuery((!this.forCreate ? `alter table ${this.tableName()} add ` : '') + 'constraint ' + keyName + ' ' + 'foreign key (' + column + ') references ' + inTable + ' (' + references + ')' + onUpdate + onDelete + deferrable);\n      } else {\n        this.pushQuery((!this.forCreate ? `ALTER TABLE ${this.tableName()} ADD ` : '') + 'CONSTRAINT ' + keyName + ' ' + 'FOREIGN KEY (' + column + ') REFERENCES ' + inTable + ' (' + references + ')' + onUpdate + onDelete + deferrable);\n      }\n    }\n  }\n\n  // Get all of the column sql & bindings individually for building the table queries.\n  getColumnTypes(columns) {\n    return columns.reduce(function (memo, columnSQL) {\n      const column = columnSQL[0];\n      memo.sql.push(column.sql);\n      memo.bindings.concat(column.bindings);\n      return memo;\n    }, {\n      sql: [],\n      bindings: []\n    });\n  }\n\n  // Adds all of the additional queries from the \"column\"\n  columnQueries(columns) {\n    const queries = columns.reduce(function (memo, columnSQL) {\n      const column = tail(columnSQL);\n      if (!isEmpty(column)) return memo.concat(column);\n      return memo;\n    }, []);\n    for (const q of queries) {\n      this.pushQuery(q);\n    }\n  }\n\n  // All of the columns to \"add\" for the query\n  addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n    if (columns.sql.length > 0) {\n      const columnSql = columns.sql.map(column => {\n        return prefix + column;\n      });\n      this.pushQuery({\n        sql: (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + columnSql.join(', '),\n        bindings: columns.bindings\n      });\n    }\n  }\n  alterColumns(columns, colBuilders) {\n    if (columns.sql.length > 0) {\n      this.addColumns(columns, this.alterColumnsPrefix, colBuilders);\n    }\n  }\n\n  // Compile the columns as needed for the current create or alter table\n  getColumns(method) {\n    const columns = this.grouped.columns || [];\n    method = method || 'add';\n    const queryContext = this.tableBuilder.queryContext();\n    return columns.filter(column => column.builder._method === method).map(column => {\n      // pass queryContext down to columnBuilder but do not overwrite it if already set\n      if (queryContext !== undefined && column.builder.queryContext() === undefined) {\n        column.builder.queryContext(queryContext);\n      }\n      return this.client.columnCompiler(this, column.builder);\n    });\n  }\n  tableName() {\n    const name = this.schemaNameRaw ? `${this.schemaNameRaw}.${this.tableNameRaw}` : this.tableNameRaw;\n    return this.formatter.wrap(name);\n  }\n  tableNameLike() {\n    const name = this.schemaNameRaw ? `${this.schemaNameRaw}.${this.tableNameLikeRaw}` : this.tableNameLikeRaw;\n    return this.formatter.wrap(name);\n  }\n\n  // Generate all of the alter column statements necessary for the query.\n  alterTable() {\n    const alterTable = this.grouped.alterTable || [];\n    for (let i = 0, l = alterTable.length; i < l; i++) {\n      const statement = alterTable[i];\n      if (this[statement.method]) {\n        this[statement.method].apply(this, statement.args);\n      } else {\n        this.client.logger.error(`Debug: ${statement.method} does not exist`);\n      }\n    }\n    for (const item in this.single) {\n      if (typeof this[item] === 'function') this[item](this.single[item]);\n    }\n  }\n  alterTableForCreate(columnTypes) {\n    this.forCreate = true;\n    const savedSequence = this.sequence;\n    const alterTable = this.grouped.alterTable || [];\n    this.grouped.alterTable = [];\n    for (let i = 0, l = alterTable.length; i < l; i++) {\n      const statement = alterTable[i];\n      if (indexOf(this.createAlterTableMethods, statement.method) < 0) {\n        this.grouped.alterTable.push(statement);\n        continue;\n      }\n      if (this[statement.method]) {\n        this.sequence = [];\n        this[statement.method].apply(this, statement.args);\n        columnTypes.sql.push(this.sequence[0].sql);\n      } else {\n        this.client.logger.error(`Debug: ${statement.method} does not exist`);\n      }\n    }\n    this.sequence = savedSequence;\n    this.forCreate = false;\n  }\n\n  // Drop the index on the current table.\n  dropIndex(value) {\n    this.pushQuery(`drop index${value}`);\n  }\n  dropUnique() {\n    throw new Error('Method implemented in the dialect driver');\n  }\n  dropForeign() {\n    throw new Error('Method implemented in the dialect driver');\n  }\n  dropColumn() {\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    const drops = (Array.isArray(columns) ? columns : [columns]).map(column => {\n      return this.dropColumnPrefix + this.formatter.wrap(column);\n    });\n    this.pushQuery((this.lowerCase ? 'alter table ' : 'ALTER TABLE ') + this.tableName() + ' ' + drops.join(', '));\n  }\n\n  //Default implementation of setNullable. Overwrite on dialect-specific tablecompiler when needed\n  //(See postgres/mssql for reference)\n  _setNullableState(column, nullable) {\n    const tableName = this.tableName();\n    const columnName = this.formatter.columnize(column);\n    const alterColumnPrefix = this.alterColumnsPrefix;\n    return this.pushQuery({\n      sql: 'SELECT 1',\n      output: () => {\n        return this.client.queryBuilder().from(this.tableNameRaw).columnInfo(column).then(columnInfo => {\n          if (isEmpty(columnInfo)) {\n            throw new Error(`.setNullable: Column ${columnName} does not exist in table ${tableName}.`);\n          }\n          const nullableType = nullable ? 'null' : 'not null';\n          const columnType = columnInfo.type + (columnInfo.maxLength ? `(${columnInfo.maxLength})` : '');\n          const defaultValue = columnInfo.defaultValue !== null && columnInfo.defaultValue !== void 0 ? `default '${columnInfo.defaultValue}'` : '';\n          const sql = `alter table ${tableName} ${alterColumnPrefix} ${columnName} ${columnType} ${nullableType} ${defaultValue}`;\n          return this.client.raw(sql);\n        });\n      }\n    });\n  }\n  setNullable(column) {\n    return this._setNullableState(column, true);\n  }\n  dropNullable(column) {\n    return this._setNullableState(column, false);\n  }\n  dropChecks(checkConstraintNames) {\n    if (checkConstraintNames === undefined) return '';\n    checkConstraintNames = normalizeArr(checkConstraintNames);\n    const tableName = this.tableName();\n    const sql = `alter table ${tableName} ${checkConstraintNames.map(constraint => `drop constraint ${constraint}`).join(', ')}`;\n    this.pushQuery(sql);\n  }\n  check(checkPredicate, bindings, constraintName) {\n    const tableName = this.tableName();\n    let checkConstraint = constraintName;\n    if (!checkConstraint) {\n      this.checksCount++;\n      checkConstraint = tableName + '_' + this.checksCount;\n    }\n    const sql = `alter table ${tableName} add constraint ${checkConstraint} check(${checkPredicate})`;\n    this.pushQuery(sql);\n  }\n  _addChecks() {\n    if (this.grouped.checks) {\n      return ', ' + this.grouped.checks.map(c => {\n        return `${c.args[2] ? 'constraint ' + c.args[2] + ' ' : ''}check (${this.client.raw(c.args[0], c.args[1])})`;\n      }).join(', ');\n    }\n    return '';\n  }\n\n  // If no name was specified for this index, we will create one using a basic\n  // convention of the table name, followed by the columns, followed by an\n  // index type, such as primary or index, which makes the index unique.\n  _indexCommand(type, tableName, columns) {\n    if (!Array.isArray(columns)) columns = columns ? [columns] : [];\n    const table = tableName.replace(/\\.|-/g, '_');\n    const indexName = (table + '_' + columns.join('_') + '_' + type).toLowerCase();\n    return this.formatter.wrap(indexName);\n  }\n  _getPrimaryKeys() {\n    return (this.grouped.alterTable || []).filter(a => a.method === 'primary').flatMap(a => a.args).flat();\n  }\n  _canBeAddPrimaryKey(options) {\n    return options.primaryKey && this._getPrimaryKeys().length === 0;\n  }\n  _getIncrementsColumnNames() {\n    return this.grouped.columns.filter(c => c.builder._type === 'increments').map(c => c.builder._args[0]);\n  }\n  _getBigIncrementsColumnNames() {\n    return this.grouped.columns.filter(c => c.builder._type === 'bigincrements').map(c => c.builder._args[0]);\n  }\n}\nTableCompiler.prototype.pushQuery = pushQuery;\nTableCompiler.prototype.pushAdditional = pushAdditional;\nTableCompiler.prototype.unshiftQuery = unshiftQuery;\nTableCompiler.prototype.lowerCase = true;\nTableCompiler.prototype.createAlterTableMethods = null;\nTableCompiler.prototype.addColumnsPrefix = 'add column ';\nTableCompiler.prototype.alterColumnsPrefix = 'alter column ';\nTableCompiler.prototype.modifyColumnPrefix = 'modify column ';\nTableCompiler.prototype.dropColumnPrefix = 'drop column ';\nmodule.exports = TableCompiler;","map":{"version":3,"names":["pushAdditional","pushQuery","unshiftQuery","require","helpers","groupBy","indexOf","isEmpty","tail","normalizeArr","TableCompiler","constructor","client","tableBuilder","_commonBuilder","method","_method","schemaNameRaw","_schemaName","tableNameRaw","_tableName","tableNameLikeRaw","_tableNameLike","single","_single","grouped","_statements","formatter","bindings","bindingsHolder","sequence","_formatting","config","formatting","checksCount","toSQL","create","ifNot","like","columnBuilders","getColumns","columns","map","col","columnTypes","getColumnTypes","createAlterTableMethods","alterTableForCreate","createQuery","columnQueries","comment","alterTable","createIfNot","createLike","createLikeIfNot","alter","addColBuilders","addColumns","alterColBuilders","alterColumns","addColumnTypes","alterColumnTypes","foreign","foreignData","inTable","references","keyName","wrap","_indexCommand","column","columnize","onUpdate","lowerCase","onDelete","deferrable","toLowerCase","toUpperCase","forCreate","tableName","reduce","memo","columnSQL","sql","push","concat","queries","q","prefix","addColumnsPrefix","length","columnSql","join","colBuilders","alterColumnsPrefix","queryContext","filter","builder","undefined","columnCompiler","name","tableNameLike","i","l","statement","apply","args","logger","error","item","savedSequence","dropIndex","value","dropUnique","Error","dropForeign","dropColumn","arguments","drops","Array","isArray","dropColumnPrefix","_setNullableState","nullable","columnName","alterColumnPrefix","output","queryBuilder","from","columnInfo","then","nullableType","columnType","type","maxLength","defaultValue","raw","setNullable","dropNullable","dropChecks","checkConstraintNames","constraint","check","checkPredicate","constraintName","checkConstraint","_addChecks","checks","c","table","replace","indexName","_getPrimaryKeys","a","flatMap","flat","_canBeAddPrimaryKey","options","primaryKey","_getIncrementsColumnNames","_type","_args","_getBigIncrementsColumnNames","prototype","modifyColumnPrefix","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/schema/tablecompiler.js"],"sourcesContent":["/* eslint max-len:0 */\n\n// Table Compiler\n// -------\nconst {\n  pushAdditional,\n  pushQuery,\n  unshiftQuery,\n} = require('./internal/helpers');\nconst helpers = require('../util/helpers');\nconst groupBy = require('lodash/groupBy');\nconst indexOf = require('lodash/indexOf');\nconst isEmpty = require('lodash/isEmpty');\nconst tail = require('lodash/tail');\nconst { normalizeArr } = require('../util/helpers');\n\nclass TableCompiler {\n  constructor(client, tableBuilder) {\n    this.client = client;\n    this.tableBuilder = tableBuilder;\n    this._commonBuilder = this.tableBuilder;\n    this.method = tableBuilder._method;\n    this.schemaNameRaw = tableBuilder._schemaName;\n    this.tableNameRaw = tableBuilder._tableName;\n    this.tableNameLikeRaw = tableBuilder._tableNameLike;\n    this.single = tableBuilder._single;\n    this.grouped = groupBy(tableBuilder._statements, 'grouping');\n\n    this.formatter = client.formatter(tableBuilder);\n    this.bindings = [];\n    this.formatter.bindings = this.bindings;\n    this.bindingsHolder = this;\n\n    this.sequence = [];\n    this._formatting = client.config && client.config.formatting;\n\n    this.checksCount = 0;\n  }\n\n  // Convert the tableCompiler toSQL\n  toSQL() {\n    this[this.method]();\n    return this.sequence;\n  }\n\n  // Column Compilation\n  // -------\n\n  // If this is a table \"creation\", we need to first run through all\n  // of the columns to build them into a single string,\n  // and then run through anything else and push it to the query sequence.\n  create(ifNot, like) {\n    const columnBuilders = this.getColumns();\n    const columns = columnBuilders.map((col) => col.toSQL());\n    const columnTypes = this.getColumnTypes(columns);\n    if (this.createAlterTableMethods) {\n      this.alterTableForCreate(columnTypes);\n    }\n    this.createQuery(columnTypes, ifNot, like);\n    this.columnQueries(columns);\n    delete this.single.comment;\n    this.alterTable();\n  }\n\n  // Only create the table if it doesn't exist.\n  createIfNot() {\n    this.create(true);\n  }\n\n  createLike() {\n    this.create(false, true);\n  }\n\n  createLikeIfNot() {\n    this.create(true, true);\n  }\n\n  // If we're altering the table, we need to one-by-one\n  // go through and handle each of the queries associated\n  // with altering the table's schema.\n  alter() {\n    const addColBuilders = this.getColumns();\n    const addColumns = addColBuilders.map((col) => col.toSQL());\n    const alterColBuilders = this.getColumns('alter');\n    const alterColumns = alterColBuilders.map((col) => col.toSQL());\n    const addColumnTypes = this.getColumnTypes(addColumns);\n    const alterColumnTypes = this.getColumnTypes(alterColumns);\n\n    this.addColumns(addColumnTypes);\n    this.alterColumns(alterColumnTypes, alterColBuilders);\n    this.columnQueries(addColumns);\n    this.columnQueries(alterColumns);\n    this.alterTable();\n  }\n\n  foreign(foreignData) {\n    if (foreignData.inTable && foreignData.references) {\n      const keyName = foreignData.keyName\n        ? this.formatter.wrap(foreignData.keyName)\n        : this._indexCommand('foreign', this.tableNameRaw, foreignData.column);\n      const column = this.formatter.columnize(foreignData.column);\n      const references = this.formatter.columnize(foreignData.references);\n      const inTable = this.formatter.wrap(foreignData.inTable);\n      const onUpdate = foreignData.onUpdate\n        ? (this.lowerCase ? ' on update ' : ' ON UPDATE ') +\n          foreignData.onUpdate\n        : '';\n      const onDelete = foreignData.onDelete\n        ? (this.lowerCase ? ' on delete ' : ' ON DELETE ') +\n          foreignData.onDelete\n        : '';\n      const deferrable = foreignData.deferrable\n        ? this.lowerCase\n          ? ` deferrable initially ${foreignData.deferrable.toLowerCase()} `\n          : ` DEFERRABLE INITIALLY ${foreignData.deferrable.toUpperCase()} `\n        : '';\n      if (this.lowerCase) {\n        this.pushQuery(\n          (!this.forCreate ? `alter table ${this.tableName()} add ` : '') +\n            'constraint ' +\n            keyName +\n            ' ' +\n            'foreign key (' +\n            column +\n            ') references ' +\n            inTable +\n            ' (' +\n            references +\n            ')' +\n            onUpdate +\n            onDelete +\n            deferrable\n        );\n      } else {\n        this.pushQuery(\n          (!this.forCreate ? `ALTER TABLE ${this.tableName()} ADD ` : '') +\n            'CONSTRAINT ' +\n            keyName +\n            ' ' +\n            'FOREIGN KEY (' +\n            column +\n            ') REFERENCES ' +\n            inTable +\n            ' (' +\n            references +\n            ')' +\n            onUpdate +\n            onDelete +\n            deferrable\n        );\n      }\n    }\n  }\n\n  // Get all of the column sql & bindings individually for building the table queries.\n  getColumnTypes(columns) {\n    return columns.reduce(\n      function (memo, columnSQL) {\n        const column = columnSQL[0];\n        memo.sql.push(column.sql);\n        memo.bindings.concat(column.bindings);\n        return memo;\n      },\n      { sql: [], bindings: [] }\n    );\n  }\n\n  // Adds all of the additional queries from the \"column\"\n  columnQueries(columns) {\n    const queries = columns.reduce(function (memo, columnSQL) {\n      const column = tail(columnSQL);\n      if (!isEmpty(column)) return memo.concat(column);\n      return memo;\n    }, []);\n    for (const q of queries) {\n      this.pushQuery(q);\n    }\n  }\n\n  // All of the columns to \"add\" for the query\n  addColumns(columns, prefix) {\n    prefix = prefix || this.addColumnsPrefix;\n\n    if (columns.sql.length > 0) {\n      const columnSql = columns.sql.map((column) => {\n        return prefix + column;\n      });\n      this.pushQuery({\n        sql:\n          (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n          this.tableName() +\n          ' ' +\n          columnSql.join(', '),\n        bindings: columns.bindings,\n      });\n    }\n  }\n\n  alterColumns(columns, colBuilders) {\n    if (columns.sql.length > 0) {\n      this.addColumns(columns, this.alterColumnsPrefix, colBuilders);\n    }\n  }\n\n  // Compile the columns as needed for the current create or alter table\n  getColumns(method) {\n    const columns = this.grouped.columns || [];\n    method = method || 'add';\n\n    const queryContext = this.tableBuilder.queryContext();\n\n    return columns\n      .filter((column) => column.builder._method === method)\n      .map((column) => {\n        // pass queryContext down to columnBuilder but do not overwrite it if already set\n        if (\n          queryContext !== undefined &&\n          column.builder.queryContext() === undefined\n        ) {\n          column.builder.queryContext(queryContext);\n        }\n        return this.client.columnCompiler(this, column.builder);\n      });\n  }\n\n  tableName() {\n    const name = this.schemaNameRaw\n      ? `${this.schemaNameRaw}.${this.tableNameRaw}`\n      : this.tableNameRaw;\n\n    return this.formatter.wrap(name);\n  }\n\n  tableNameLike() {\n    const name = this.schemaNameRaw\n      ? `${this.schemaNameRaw}.${this.tableNameLikeRaw}`\n      : this.tableNameLikeRaw;\n\n    return this.formatter.wrap(name);\n  }\n\n  // Generate all of the alter column statements necessary for the query.\n  alterTable() {\n    const alterTable = this.grouped.alterTable || [];\n    for (let i = 0, l = alterTable.length; i < l; i++) {\n      const statement = alterTable[i];\n      if (this[statement.method]) {\n        this[statement.method].apply(this, statement.args);\n      } else {\n        this.client.logger.error(`Debug: ${statement.method} does not exist`);\n      }\n    }\n    for (const item in this.single) {\n      if (typeof this[item] === 'function') this[item](this.single[item]);\n    }\n  }\n\n  alterTableForCreate(columnTypes) {\n    this.forCreate = true;\n    const savedSequence = this.sequence;\n    const alterTable = this.grouped.alterTable || [];\n    this.grouped.alterTable = [];\n    for (let i = 0, l = alterTable.length; i < l; i++) {\n      const statement = alterTable[i];\n      if (indexOf(this.createAlterTableMethods, statement.method) < 0) {\n        this.grouped.alterTable.push(statement);\n        continue;\n      }\n      if (this[statement.method]) {\n        this.sequence = [];\n        this[statement.method].apply(this, statement.args);\n        columnTypes.sql.push(this.sequence[0].sql);\n      } else {\n        this.client.logger.error(`Debug: ${statement.method} does not exist`);\n      }\n    }\n    this.sequence = savedSequence;\n    this.forCreate = false;\n  }\n\n  // Drop the index on the current table.\n  dropIndex(value) {\n    this.pushQuery(`drop index${value}`);\n  }\n\n  dropUnique() {\n    throw new Error('Method implemented in the dialect driver');\n  }\n\n  dropForeign() {\n    throw new Error('Method implemented in the dialect driver');\n  }\n\n  dropColumn() {\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    const drops = (Array.isArray(columns) ? columns : [columns]).map(\n      (column) => {\n        return this.dropColumnPrefix + this.formatter.wrap(column);\n      }\n    );\n    this.pushQuery(\n      (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n        this.tableName() +\n        ' ' +\n        drops.join(', ')\n    );\n  }\n\n  //Default implementation of setNullable. Overwrite on dialect-specific tablecompiler when needed\n  //(See postgres/mssql for reference)\n  _setNullableState(column, nullable) {\n    const tableName = this.tableName();\n    const columnName = this.formatter.columnize(column);\n    const alterColumnPrefix = this.alterColumnsPrefix;\n    return this.pushQuery({\n      sql: 'SELECT 1',\n      output: () => {\n        return this.client\n          .queryBuilder()\n          .from(this.tableNameRaw)\n          .columnInfo(column)\n          .then((columnInfo) => {\n            if (isEmpty(columnInfo)) {\n              throw new Error(\n                `.setNullable: Column ${columnName} does not exist in table ${tableName}.`\n              );\n            }\n            const nullableType = nullable ? 'null' : 'not null';\n            const columnType =\n              columnInfo.type +\n              (columnInfo.maxLength ? `(${columnInfo.maxLength})` : '');\n            const defaultValue =\n              columnInfo.defaultValue !== null &&\n              columnInfo.defaultValue !== void 0\n                ? `default '${columnInfo.defaultValue}'`\n                : '';\n            const sql = `alter table ${tableName} ${alterColumnPrefix} ${columnName} ${columnType} ${nullableType} ${defaultValue}`;\n            return this.client.raw(sql);\n          });\n      },\n    });\n  }\n\n  setNullable(column) {\n    return this._setNullableState(column, true);\n  }\n\n  dropNullable(column) {\n    return this._setNullableState(column, false);\n  }\n\n  dropChecks(checkConstraintNames) {\n    if (checkConstraintNames === undefined) return '';\n    checkConstraintNames = normalizeArr(checkConstraintNames);\n    const tableName = this.tableName();\n    const sql = `alter table ${tableName} ${checkConstraintNames\n      .map((constraint) => `drop constraint ${constraint}`)\n      .join(', ')}`;\n    this.pushQuery(sql);\n  }\n\n  check(checkPredicate, bindings, constraintName) {\n    const tableName = this.tableName();\n    let checkConstraint = constraintName;\n    if (!checkConstraint) {\n      this.checksCount++;\n      checkConstraint = tableName + '_' + this.checksCount;\n    }\n    const sql = `alter table ${tableName} add constraint ${checkConstraint} check(${checkPredicate})`;\n    this.pushQuery(sql);\n  }\n\n  _addChecks() {\n    if (this.grouped.checks) {\n      return (\n        ', ' +\n        this.grouped.checks\n          .map((c) => {\n            return `${\n              c.args[2] ? 'constraint ' + c.args[2] + ' ' : ''\n            }check (${this.client.raw(c.args[0], c.args[1])})`;\n          })\n          .join(', ')\n      );\n    }\n    return '';\n  }\n\n  // If no name was specified for this index, we will create one using a basic\n  // convention of the table name, followed by the columns, followed by an\n  // index type, such as primary or index, which makes the index unique.\n  _indexCommand(type, tableName, columns) {\n    if (!Array.isArray(columns)) columns = columns ? [columns] : [];\n    const table = tableName.replace(/\\.|-/g, '_');\n    const indexName = (\n      table +\n      '_' +\n      columns.join('_') +\n      '_' +\n      type\n    ).toLowerCase();\n    return this.formatter.wrap(indexName);\n  }\n\n  _getPrimaryKeys() {\n    return (this.grouped.alterTable || [])\n      .filter((a) => a.method === 'primary')\n      .flatMap((a) => a.args)\n      .flat();\n  }\n\n  _canBeAddPrimaryKey(options) {\n    return options.primaryKey && this._getPrimaryKeys().length === 0;\n  }\n\n  _getIncrementsColumnNames() {\n    return this.grouped.columns\n      .filter((c) => c.builder._type === 'increments')\n      .map((c) => c.builder._args[0]);\n  }\n\n  _getBigIncrementsColumnNames() {\n    return this.grouped.columns\n      .filter((c) => c.builder._type === 'bigincrements')\n      .map((c) => c.builder._args[0]);\n  }\n}\n\nTableCompiler.prototype.pushQuery = pushQuery;\nTableCompiler.prototype.pushAdditional = pushAdditional;\nTableCompiler.prototype.unshiftQuery = unshiftQuery;\nTableCompiler.prototype.lowerCase = true;\nTableCompiler.prototype.createAlterTableMethods = null;\nTableCompiler.prototype.addColumnsPrefix = 'add column ';\nTableCompiler.prototype.alterColumnsPrefix = 'alter column ';\nTableCompiler.prototype.modifyColumnPrefix = 'modify column ';\nTableCompiler.prototype.dropColumnPrefix = 'drop column ';\n\nmodule.exports = TableCompiler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}