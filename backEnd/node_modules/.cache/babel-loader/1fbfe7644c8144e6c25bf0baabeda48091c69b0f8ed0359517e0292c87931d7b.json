{"ast":null,"code":"/* eslint max-len:0 */\n\nconst utils = require('../utils');\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst helpers = require('../../../util/helpers');\nconst Trigger = require('./internal/trigger');\nconst {\n  isObject\n} = require('../../../util/is');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_Oracle extends TableCompiler {\n  constructor() {\n    super(...arguments);\n  }\n  addColumns(columns, prefix) {\n    if (columns.sql.length > 0) {\n      prefix = prefix || this.addColumnsPrefix;\n      const columnSql = columns.sql;\n      const alter = this.lowerCase ? 'alter table ' : 'ALTER TABLE ';\n      let sql = `${alter}${this.tableName()} ${prefix}`;\n      if (columns.sql.length > 1) {\n        sql += `(${columnSql.join(', ')})`;\n      } else {\n        sql += columnSql.join(', ');\n      }\n      this.pushQuery({\n        sql,\n        bindings: columns.bindings\n      });\n    }\n  }\n\n  // Compile a rename column command.\n  renameColumn(from, to) {\n    // Remove quotes around tableName\n    const tableName = this.tableName().slice(1, -1);\n    const trigger = new Trigger(this.client.version);\n    return this.pushQuery(trigger.renameColumnTrigger(this.client.logger, tableName, from, to));\n  }\n  compileAdd(builder) {\n    const table = this.formatter.wrap(builder);\n    const columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: `alter table ${table} ${columns.join(', ')}`\n    });\n  }\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot, like) {\n    const columnsSql = like && this.tableNameLike() ? ' as (select * from ' + this.tableNameLike() + ' where 0=1)' : ' (' + columns.sql.join(', ') + this._addChecks() + ')';\n    const sql = `create table ${this.tableName()}${columnsSql}`;\n    this.pushQuery({\n      // catch \"name is already used by an existing object\" for workaround for \"if not exists\"\n      sql: ifNot ? utils.wrapSqlWithCatch(sql, -955) : sql,\n      bindings: columns.bindings\n    });\n    if (this.single.comment) this.comment(this.single.comment);\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`comment on table ${this.tableName()} is '${comment}'`);\n  }\n  dropColumn() {\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    this.pushQuery(`alter table ${this.tableName()} drop (${this.formatter.columnize(columns)})`);\n  }\n  _indexCommand(type, tableName, columns) {\n    const nameHelper = new utils.NameHelper(this.client.version);\n    return this.formatter.wrap(nameHelper.generateCombinedName(this.client.logger, type, tableName, columns));\n  }\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({\n        constraintName,\n        deferrable\n      } = constraintName);\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    const primaryCols = columns;\n    let incrementsCols = [];\n    if (this.grouped.columns) {\n      incrementsCols = this._getIncrementsColumnNames();\n      if (incrementsCols) {\n        incrementsCols.forEach(c => {\n          if (!primaryCols.includes(c)) {\n            primaryCols.unshift(c);\n          }\n        });\n      }\n    }\n    this.pushQuery(`alter table ${this.tableName()} add constraint ${constraintName} primary key (${this.formatter.columnize(primaryCols)})${deferrable}`);\n  }\n  dropPrimary(constraintName) {\n    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${constraintName}`);\n  }\n  index(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`create index ${indexName} on ${this.tableName()}` + ' (' + this.formatter.columnize(columns) + ')');\n  }\n  dropIndex(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`drop index ${indexName}`);\n  }\n  unique(columns, indexName) {\n    let deferrable;\n    if (isObject(indexName)) {\n      ({\n        indexName,\n        deferrable\n      } = indexName);\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} add constraint ${indexName}` + ' unique (' + this.formatter.columnize(columns) + ')' + deferrable);\n  }\n  dropUnique(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${indexName}`);\n  }\n  dropForeign(columns, indexName) {\n    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(`alter table ${this.tableName()} drop constraint ${indexName}`);\n  }\n}\nTableCompiler_Oracle.prototype.addColumnsPrefix = 'add ';\nTableCompiler_Oracle.prototype.alterColumnsPrefix = 'modify ';\nmodule.exports = TableCompiler_Oracle;","map":{"version":3,"names":["utils","require","TableCompiler","helpers","Trigger","isObject","TableCompiler_Oracle","constructor","arguments","addColumns","columns","prefix","sql","length","addColumnsPrefix","columnSql","alter","lowerCase","tableName","join","pushQuery","bindings","renameColumn","from","to","slice","trigger","client","version","renameColumnTrigger","logger","compileAdd","builder","table","formatter","wrap","prefixArray","getColumns","createQuery","ifNot","like","columnsSql","tableNameLike","_addChecks","wrapSqlWithCatch","single","comment","dropColumn","normalizeArr","apply","columnize","_indexCommand","type","nameHelper","NameHelper","generateCombinedName","primary","constraintName","deferrable","tableNameRaw","primaryCols","incrementsCols","grouped","_getIncrementsColumnNames","forEach","c","includes","unshift","dropPrimary","index","indexName","dropIndex","unique","dropUnique","dropForeign","prototype","alterColumnsPrefix","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/oracle/schema/oracle-tablecompiler.js"],"sourcesContent":["/* eslint max-len:0 */\n\nconst utils = require('../utils');\nconst TableCompiler = require('../../../schema/tablecompiler');\nconst helpers = require('../../../util/helpers');\nconst Trigger = require('./internal/trigger');\nconst { isObject } = require('../../../util/is');\n\n// Table Compiler\n// ------\n\nclass TableCompiler_Oracle extends TableCompiler {\n  constructor() {\n    super(...arguments);\n  }\n\n  addColumns(columns, prefix) {\n    if (columns.sql.length > 0) {\n      prefix = prefix || this.addColumnsPrefix;\n\n      const columnSql = columns.sql;\n      const alter = this.lowerCase ? 'alter table ' : 'ALTER TABLE ';\n\n      let sql = `${alter}${this.tableName()} ${prefix}`;\n      if (columns.sql.length > 1) {\n        sql += `(${columnSql.join(', ')})`;\n      } else {\n        sql += columnSql.join(', ');\n      }\n\n      this.pushQuery({\n        sql,\n        bindings: columns.bindings,\n      });\n    }\n  }\n\n  // Compile a rename column command.\n  renameColumn(from, to) {\n    // Remove quotes around tableName\n    const tableName = this.tableName().slice(1, -1);\n    const trigger = new Trigger(this.client.version);\n    return this.pushQuery(\n      trigger.renameColumnTrigger(this.client.logger, tableName, from, to)\n    );\n  }\n\n  compileAdd(builder) {\n    const table = this.formatter.wrap(builder);\n    const columns = this.prefixArray('add column', this.getColumns(builder));\n    return this.pushQuery({\n      sql: `alter table ${table} ${columns.join(', ')}`,\n    });\n  }\n\n  // Adds the \"create\" query to the query sequence.\n  createQuery(columns, ifNot, like) {\n    const columnsSql =\n      like && this.tableNameLike()\n        ? ' as (select * from ' + this.tableNameLike() + ' where 0=1)'\n        : ' (' + columns.sql.join(', ') + this._addChecks() + ')';\n    const sql = `create table ${this.tableName()}${columnsSql}`;\n\n    this.pushQuery({\n      // catch \"name is already used by an existing object\" for workaround for \"if not exists\"\n      sql: ifNot ? utils.wrapSqlWithCatch(sql, -955) : sql,\n      bindings: columns.bindings,\n    });\n    if (this.single.comment) this.comment(this.single.comment);\n    if (like) {\n      this.addColumns(columns, this.addColumnsPrefix);\n    }\n  }\n\n  // Compiles the comment on the table.\n  comment(comment) {\n    this.pushQuery(`comment on table ${this.tableName()} is '${comment}'`);\n  }\n\n  dropColumn() {\n    const columns = helpers.normalizeArr.apply(null, arguments);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop (${this.formatter.columnize(\n        columns\n      )})`\n    );\n  }\n\n  _indexCommand(type, tableName, columns) {\n    const nameHelper = new utils.NameHelper(this.client.version);\n    return this.formatter.wrap(\n      nameHelper.generateCombinedName(\n        this.client.logger,\n        type,\n        tableName,\n        columns\n      )\n    );\n  }\n\n  primary(columns, constraintName) {\n    let deferrable;\n    if (isObject(constraintName)) {\n      ({ constraintName, deferrable } = constraintName);\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(`${this.tableNameRaw}_pkey`);\n    const primaryCols = columns;\n    let incrementsCols = [];\n    if (this.grouped.columns) {\n      incrementsCols = this._getIncrementsColumnNames();\n      if (incrementsCols) {\n        incrementsCols.forEach((c) => {\n          if (!primaryCols.includes(c)) {\n            primaryCols.unshift(c);\n          }\n        });\n      }\n    }\n    this.pushQuery(\n      `alter table ${this.tableName()} add constraint ${constraintName} primary key (${this.formatter.columnize(\n        primaryCols\n      )})${deferrable}`\n    );\n  }\n\n  dropPrimary(constraintName) {\n    constraintName = constraintName\n      ? this.formatter.wrap(constraintName)\n      : this.formatter.wrap(this.tableNameRaw + '_pkey');\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${constraintName}`\n    );\n  }\n\n  index(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(\n      `create index ${indexName} on ${this.tableName()}` +\n        ' (' +\n        this.formatter.columnize(columns) +\n        ')'\n    );\n  }\n\n  dropIndex(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('index', this.tableNameRaw, columns);\n    this.pushQuery(`drop index ${indexName}`);\n  }\n\n  unique(columns, indexName) {\n    let deferrable;\n    if (isObject(indexName)) {\n      ({ indexName, deferrable } = indexName);\n    }\n    deferrable = deferrable ? ` deferrable initially ${deferrable}` : '';\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} add constraint ${indexName}` +\n        ' unique (' +\n        this.formatter.columnize(columns) +\n        ')' +\n        deferrable\n    );\n  }\n\n  dropUnique(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('unique', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${indexName}`\n    );\n  }\n\n  dropForeign(columns, indexName) {\n    indexName = indexName\n      ? this.formatter.wrap(indexName)\n      : this._indexCommand('foreign', this.tableNameRaw, columns);\n    this.pushQuery(\n      `alter table ${this.tableName()} drop constraint ${indexName}`\n    );\n  }\n}\n\nTableCompiler_Oracle.prototype.addColumnsPrefix = 'add ';\nTableCompiler_Oracle.prototype.alterColumnsPrefix = 'modify ';\n\nmodule.exports = TableCompiler_Oracle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}