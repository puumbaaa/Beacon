{"ast":null,"code":"const helpers = require('../util/helpers');\nconst extend = require('lodash/extend');\nconst assign = require('lodash/assign');\nclass ViewBuilder {\n  constructor(client, method, viewName, fn) {\n    this.client = client;\n    this._method = method;\n    this._schemaName = undefined;\n    this._columns = undefined;\n    this._fn = fn;\n    this._viewName = viewName;\n    this._statements = [];\n    this._single = {};\n  }\n  setSchema(schemaName) {\n    this._schemaName = schemaName;\n  }\n  columns(columns) {\n    this._columns = columns;\n  }\n  as(selectQuery) {\n    this._selectQuery = selectQuery;\n  }\n  checkOption() {\n    throw new Error('check option definition is not supported by this dialect.');\n  }\n  localCheckOption() {\n    throw new Error('check option definition is not supported by this dialect.');\n  }\n  cascadedCheckOption() {\n    throw new Error('check option definition is not supported by this dialect.');\n  }\n  toSQL() {\n    if (this._method === 'alter') {\n      extend(this, AlterMethods);\n    }\n    this._fn.call(this, this);\n    return this.client.viewCompiler(this).toSQL();\n  }\n}\nconst AlterMethods = {\n  column(column) {\n    const self = this;\n    return {\n      rename: function (newName) {\n        self._statements.push({\n          grouping: 'alterView',\n          method: 'renameColumn',\n          args: [column, newName]\n        });\n        return this;\n      },\n      defaultTo: function (defaultValue) {\n        self._statements.push({\n          grouping: 'alterView',\n          method: 'defaultTo',\n          args: [column, defaultValue]\n        });\n        return this;\n      }\n    };\n  }\n};\nhelpers.addQueryContext(ViewBuilder);\nViewBuilder.extend = (methodName, fn) => {\n  if (Object.prototype.hasOwnProperty.call(ViewBuilder.prototype, methodName)) {\n    throw new Error(`Can't extend ViewBuilder with existing method ('${methodName}').`);\n  }\n  assign(ViewBuilder.prototype, {\n    [methodName]: fn\n  });\n};\nmodule.exports = ViewBuilder;","map":{"version":3,"names":["helpers","require","extend","assign","ViewBuilder","constructor","client","method","viewName","fn","_method","_schemaName","undefined","_columns","_fn","_viewName","_statements","_single","setSchema","schemaName","columns","as","selectQuery","_selectQuery","checkOption","Error","localCheckOption","cascadedCheckOption","toSQL","AlterMethods","call","viewCompiler","column","self","rename","newName","push","grouping","args","defaultTo","defaultValue","addQueryContext","methodName","Object","prototype","hasOwnProperty","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/schema/viewbuilder.js"],"sourcesContent":["const helpers = require('../util/helpers');\nconst extend = require('lodash/extend');\nconst assign = require('lodash/assign');\n\nclass ViewBuilder {\n  constructor(client, method, viewName, fn) {\n    this.client = client;\n    this._method = method;\n    this._schemaName = undefined;\n    this._columns = undefined;\n    this._fn = fn;\n    this._viewName = viewName;\n    this._statements = [];\n    this._single = {};\n  }\n\n  setSchema(schemaName) {\n    this._schemaName = schemaName;\n  }\n\n  columns(columns) {\n    this._columns = columns;\n  }\n\n  as(selectQuery) {\n    this._selectQuery = selectQuery;\n  }\n\n  checkOption() {\n    throw new Error(\n      'check option definition is not supported by this dialect.'\n    );\n  }\n\n  localCheckOption() {\n    throw new Error(\n      'check option definition is not supported by this dialect.'\n    );\n  }\n\n  cascadedCheckOption() {\n    throw new Error(\n      'check option definition is not supported by this dialect.'\n    );\n  }\n\n  toSQL() {\n    if (this._method === 'alter') {\n      extend(this, AlterMethods);\n    }\n    this._fn.call(this, this);\n    return this.client.viewCompiler(this).toSQL();\n  }\n}\n\nconst AlterMethods = {\n  column(column) {\n    const self = this;\n    return {\n      rename: function (newName) {\n        self._statements.push({\n          grouping: 'alterView',\n          method: 'renameColumn',\n          args: [column, newName],\n        });\n        return this;\n      },\n      defaultTo: function (defaultValue) {\n        self._statements.push({\n          grouping: 'alterView',\n          method: 'defaultTo',\n          args: [column, defaultValue],\n        });\n        return this;\n      },\n    };\n  },\n};\n\nhelpers.addQueryContext(ViewBuilder);\n\nViewBuilder.extend = (methodName, fn) => {\n  if (Object.prototype.hasOwnProperty.call(ViewBuilder.prototype, methodName)) {\n    throw new Error(\n      `Can't extend ViewBuilder with existing method ('${methodName}').`\n    );\n  }\n\n  assign(ViewBuilder.prototype, { [methodName]: fn });\n};\n\nmodule.exports = ViewBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}