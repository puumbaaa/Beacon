{"ast":null,"code":"const Client = require('../../client');\nconst {\n  SUPPORTED_CLIENTS\n} = require('../../constants');\nconst parseConnection = require('./parse-connection');\nconst {\n  getDialectByNameOrAlias\n} = require('../../dialects');\nfunction resolveConfig(config) {\n  let Dialect;\n  let resolvedConfig;\n\n  // If config is a string, try to parse it\n  const parsedConfig = typeof config === 'string' ? Object.assign(parseConnection(config), arguments[2]) : config;\n\n  // If user provided no relevant parameters, use generic client\n  if (arguments.length === 0 || !parsedConfig.client && !parsedConfig.dialect) {\n    Dialect = Client;\n  }\n  // If user provided Client constructor as a parameter, use it\n  else if (typeof parsedConfig.client === 'function') {\n    Dialect = parsedConfig.client;\n  }\n  // If neither applies, let's assume user specified name of a client or dialect as a string\n  else {\n    const clientName = parsedConfig.client || parsedConfig.dialect;\n    if (!SUPPORTED_CLIENTS.includes(clientName)) {\n      throw new Error(`knex: Unknown configuration option 'client' value ${clientName}. Note that it is case-sensitive, check documentation for supported values.`);\n    }\n    Dialect = getDialectByNameOrAlias(clientName);\n  }\n\n  // If config connection parameter is passed as string, try to parse it\n  if (typeof parsedConfig.connection === 'string') {\n    resolvedConfig = Object.assign({}, parsedConfig, {\n      connection: parseConnection(parsedConfig.connection).connection\n    });\n  } else {\n    resolvedConfig = Object.assign({}, parsedConfig);\n  }\n  return {\n    resolvedConfig,\n    Dialect\n  };\n}\nmodule.exports = {\n  resolveConfig\n};","map":{"version":3,"names":["Client","require","SUPPORTED_CLIENTS","parseConnection","getDialectByNameOrAlias","resolveConfig","config","Dialect","resolvedConfig","parsedConfig","Object","assign","arguments","length","client","dialect","clientName","includes","Error","connection","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/knex-builder/internal/config-resolver.js"],"sourcesContent":["const Client = require('../../client');\nconst { SUPPORTED_CLIENTS } = require('../../constants');\n\nconst parseConnection = require('./parse-connection');\nconst { getDialectByNameOrAlias } = require('../../dialects');\n\nfunction resolveConfig(config) {\n  let Dialect;\n  let resolvedConfig;\n\n  // If config is a string, try to parse it\n  const parsedConfig =\n    typeof config === 'string'\n      ? Object.assign(parseConnection(config), arguments[2])\n      : config;\n\n  // If user provided no relevant parameters, use generic client\n  if (\n    arguments.length === 0 ||\n    (!parsedConfig.client && !parsedConfig.dialect)\n  ) {\n    Dialect = Client;\n  }\n  // If user provided Client constructor as a parameter, use it\n  else if (typeof parsedConfig.client === 'function') {\n    Dialect = parsedConfig.client;\n  }\n  // If neither applies, let's assume user specified name of a client or dialect as a string\n  else {\n    const clientName = parsedConfig.client || parsedConfig.dialect;\n    if (!SUPPORTED_CLIENTS.includes(clientName)) {\n      throw new Error(\n        `knex: Unknown configuration option 'client' value ${clientName}. Note that it is case-sensitive, check documentation for supported values.`\n      );\n    }\n\n    Dialect = getDialectByNameOrAlias(clientName);\n  }\n\n  // If config connection parameter is passed as string, try to parse it\n  if (typeof parsedConfig.connection === 'string') {\n    resolvedConfig = Object.assign({}, parsedConfig, {\n      connection: parseConnection(parsedConfig.connection).connection,\n    });\n  } else {\n    resolvedConfig = Object.assign({}, parsedConfig);\n  }\n\n  return {\n    resolvedConfig,\n    Dialect,\n  };\n}\n\nmodule.exports = {\n  resolveConfig,\n};\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AACtC,MAAM;EAAEC;AAAkB,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAExD,MAAME,eAAe,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACrD,MAAM;EAAEG;AAAwB,CAAC,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAE7D,SAASI,aAAaA,CAACC,MAAM,EAAE;EAC7B,IAAIC,OAAO;EACX,IAAIC,cAAc;;EAElB;EACA,MAAMC,YAAY,GAChB,OAAOH,MAAM,KAAK,QAAQ,GACtBI,MAAM,CAACC,MAAM,CAACR,eAAe,CAACG,MAAM,CAAC,EAAEM,SAAS,CAAC,CAAC,CAAC,CAAC,GACpDN,MAAM;;EAEZ;EACA,IACEM,SAAS,CAACC,MAAM,KAAK,CAAC,IACrB,CAACJ,YAAY,CAACK,MAAM,IAAI,CAACL,YAAY,CAACM,OAAQ,EAC/C;IACAR,OAAO,GAAGP,MAAM;EAClB;EACA;EAAA,KACK,IAAI,OAAOS,YAAY,CAACK,MAAM,KAAK,UAAU,EAAE;IAClDP,OAAO,GAAGE,YAAY,CAACK,MAAM;EAC/B;EACA;EAAA,KACK;IACH,MAAME,UAAU,GAAGP,YAAY,CAACK,MAAM,IAAIL,YAAY,CAACM,OAAO;IAC9D,IAAI,CAACb,iBAAiB,CAACe,QAAQ,CAACD,UAAU,CAAC,EAAE;MAC3C,MAAM,IAAIE,KAAK,CACb,qDAAqDF,UAAU,6EACjE,CAAC;IACH;IAEAT,OAAO,GAAGH,uBAAuB,CAACY,UAAU,CAAC;EAC/C;;EAEA;EACA,IAAI,OAAOP,YAAY,CAACU,UAAU,KAAK,QAAQ,EAAE;IAC/CX,cAAc,GAAGE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,YAAY,EAAE;MAC/CU,UAAU,EAAEhB,eAAe,CAACM,YAAY,CAACU,UAAU,CAAC,CAACA;IACvD,CAAC,CAAC;EACJ,CAAC,MAAM;IACLX,cAAc,GAAGE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,YAAY,CAAC;EAClD;EAEA,OAAO;IACLD,cAAc;IACdD;EACF,CAAC;AACH;AAEAa,MAAM,CAACC,OAAO,GAAG;EACfhB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}