{"ast":null,"code":"const Transaction = require('../../execution/transaction');\nconst {\n  timeout,\n  KnexTimeoutError\n} = require('../../util/timeout');\nconst debugTx = require('debug')('knex:tx');\n\n// There's also a \"read only\", but that's not really an \"isolationLevel\"\nconst supportedIsolationLevels = ['read committed', 'serializable'];\n// Remove this if you make it work and set it to true\nconst isIsolationLevelEnabled = false;\nmodule.exports = class Oracle_Transaction extends Transaction {\n  // disable autocommit to allow correct behavior (default is true)\n  begin(conn) {\n    if (this.isolationLevel) {\n      if (isIsolationLevelEnabled) {\n        if (!supportedIsolationLevels.includes(this.isolationLevel)) {\n          this.client.logger.warn('Oracle only supports read committed and serializable transactions, ignoring the isolation level param');\n        } else {\n          // I tried this, but it didn't work\n          // Doc here: https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SET-TRANSACTION.html\n          return this.query(conn, `SET TRANSACTION ${this.isolationLevel}`);\n        }\n      } else {\n        this.client.logger.warn('Transaction isolation is not currently supported for Oracle');\n      }\n    }\n    return Promise.resolve();\n  }\n  async commit(conn, value) {\n    this._completed = true;\n    try {\n      await conn.commitAsync();\n      this._resolver(value);\n    } catch (err) {\n      this._rejecter(err);\n    }\n  }\n  release(conn, value) {\n    return this._resolver(value);\n  }\n  rollback(conn, err) {\n    this._completed = true;\n    debugTx('%s: rolling back', this.txid);\n    return timeout(conn.rollbackAsync(), 5000).catch(e => {\n      if (!(e instanceof KnexTimeoutError)) {\n        return Promise.reject(e);\n      }\n      this._rejecter(e);\n    }).then(() => {\n      if (err === undefined) {\n        if (this.doNotRejectOnRollback) {\n          this._resolver();\n          return;\n        }\n        err = new Error(`Transaction rejected with non-error: ${err}`);\n      }\n      this._rejecter(err);\n    });\n  }\n  savepoint(conn) {\n    return this.query(conn, `SAVEPOINT ${this.txid}`);\n  }\n  async acquireConnection(config, cb) {\n    const configConnection = config && config.connection;\n    const connection = configConnection || (await this.client.acquireConnection());\n    try {\n      connection.__knexTxId = this.txid;\n      connection.isTransaction = true;\n      return await cb(connection);\n    } finally {\n      debugTx('%s: releasing connection', this.txid);\n      connection.isTransaction = false;\n      try {\n        await connection.commitAsync();\n      } catch (err) {\n        this._rejecter(err);\n      } finally {\n        if (!configConnection) {\n          await this.client.releaseConnection(connection);\n        } else {\n          debugTx('%s: not releasing external connection', this.txid);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["Transaction","require","timeout","KnexTimeoutError","debugTx","supportedIsolationLevels","isIsolationLevelEnabled","module","exports","Oracle_Transaction","begin","conn","isolationLevel","includes","client","logger","warn","query","Promise","resolve","commit","value","_completed","commitAsync","_resolver","err","_rejecter","release","rollback","txid","rollbackAsync","catch","e","reject","then","undefined","doNotRejectOnRollback","Error","savepoint","acquireConnection","config","cb","configConnection","connection","__knexTxId","isTransaction","releaseConnection"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/oracledb/transaction.js"],"sourcesContent":["const Transaction = require('../../execution/transaction');\nconst { timeout, KnexTimeoutError } = require('../../util/timeout');\nconst debugTx = require('debug')('knex:tx');\n\n// There's also a \"read only\", but that's not really an \"isolationLevel\"\nconst supportedIsolationLevels = ['read committed', 'serializable'];\n// Remove this if you make it work and set it to true\nconst isIsolationLevelEnabled = false;\n\nmodule.exports = class Oracle_Transaction extends Transaction {\n  // disable autocommit to allow correct behavior (default is true)\n  begin(conn) {\n    if (this.isolationLevel) {\n      if (isIsolationLevelEnabled) {\n        if (!supportedIsolationLevels.includes(this.isolationLevel)) {\n          this.client.logger.warn(\n            'Oracle only supports read committed and serializable transactions, ignoring the isolation level param'\n          );\n        } else {\n          // I tried this, but it didn't work\n          // Doc here: https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SET-TRANSACTION.html\n          return this.query(conn, `SET TRANSACTION ${this.isolationLevel}`);\n        }\n      } else {\n        this.client.logger.warn(\n          'Transaction isolation is not currently supported for Oracle'\n        );\n      }\n    }\n    return Promise.resolve();\n  }\n\n  async commit(conn, value) {\n    this._completed = true;\n    try {\n      await conn.commitAsync();\n      this._resolver(value);\n    } catch (err) {\n      this._rejecter(err);\n    }\n  }\n\n  release(conn, value) {\n    return this._resolver(value);\n  }\n\n  rollback(conn, err) {\n    this._completed = true;\n    debugTx('%s: rolling back', this.txid);\n    return timeout(conn.rollbackAsync(), 5000)\n      .catch((e) => {\n        if (!(e instanceof KnexTimeoutError)) {\n          return Promise.reject(e);\n        }\n        this._rejecter(e);\n      })\n      .then(() => {\n        if (err === undefined) {\n          if (this.doNotRejectOnRollback) {\n            this._resolver();\n            return;\n          }\n          err = new Error(`Transaction rejected with non-error: ${err}`);\n        }\n        this._rejecter(err);\n      });\n  }\n\n  savepoint(conn) {\n    return this.query(conn, `SAVEPOINT ${this.txid}`);\n  }\n\n  async acquireConnection(config, cb) {\n    const configConnection = config && config.connection;\n\n    const connection =\n      configConnection || (await this.client.acquireConnection());\n    try {\n      connection.__knexTxId = this.txid;\n      connection.isTransaction = true;\n      return await cb(connection);\n    } finally {\n      debugTx('%s: releasing connection', this.txid);\n      connection.isTransaction = false;\n      try {\n        await connection.commitAsync();\n      } catch (err) {\n        this._rejecter(err);\n      } finally {\n        if (!configConnection) {\n          await this.client.releaseConnection(connection);\n        } else {\n          debugTx('%s: not releasing external connection', this.txid);\n        }\n      }\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}