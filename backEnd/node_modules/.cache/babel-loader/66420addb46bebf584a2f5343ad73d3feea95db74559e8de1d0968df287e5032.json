{"ast":null,"code":"// Redshift Column Compiler\n// -------\n\nconst ColumnCompiler_PG = require('../../postgres/schema/pg-columncompiler');\nconst ColumnCompiler = require('../../../schema/columncompiler');\nclass ColumnCompiler_Redshift extends ColumnCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n\n  // Types:\n  // ------\n\n  bit(column) {\n    return column.length !== false ? `char(${column.length})` : 'char(1)';\n  }\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n\n  // Modifiers:\n  // ------\n  comment(comment) {\n    this.pushAdditional(function () {\n      this.pushQuery(`comment on column ${this.tableCompiler.tableName()}.` + this.formatter.wrap(this.args[0]) + ' is ' + (comment ? `'${comment}'` : 'NULL'));\n    }, comment);\n  }\n}\nColumnCompiler_Redshift.prototype.increments = ({\n  primaryKey = true\n} = {}) => 'integer identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\nColumnCompiler_Redshift.prototype.bigincrements = ({\n  primaryKey = true\n} = {}) => 'bigint identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\nColumnCompiler_Redshift.prototype.binary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.blob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.enu = 'varchar(255)';\nColumnCompiler_Redshift.prototype.enum = 'varchar(255)';\nColumnCompiler_Redshift.prototype.json = 'varchar(max)';\nColumnCompiler_Redshift.prototype.jsonb = 'varchar(max)';\nColumnCompiler_Redshift.prototype.longblob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.mediumblob = 'varchar(16777218)';\nColumnCompiler_Redshift.prototype.set = 'text';\nColumnCompiler_Redshift.prototype.text = 'varchar(max)';\nColumnCompiler_Redshift.prototype.tinyblob = 'varchar(256)';\nColumnCompiler_Redshift.prototype.uuid = ColumnCompiler.prototype.uuid;\nColumnCompiler_Redshift.prototype.varbinary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.bigint = 'bigint';\nColumnCompiler_Redshift.prototype.bool = 'boolean';\nColumnCompiler_Redshift.prototype.double = 'double precision';\nColumnCompiler_Redshift.prototype.floating = 'real';\nColumnCompiler_Redshift.prototype.smallint = 'smallint';\nColumnCompiler_Redshift.prototype.tinyint = 'smallint';\nmodule.exports = ColumnCompiler_Redshift;","map":{"version":3,"names":["ColumnCompiler_PG","require","ColumnCompiler","ColumnCompiler_Redshift","constructor","arguments","bit","column","length","datetime","without","timestamp","comment","pushAdditional","pushQuery","tableCompiler","tableName","formatter","wrap","args","prototype","increments","primaryKey","bigincrements","binary","blob","enu","enum","json","jsonb","longblob","mediumblob","set","text","tinyblob","uuid","varbinary","bigint","bool","double","floating","smallint","tinyint","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/redshift/schema/redshift-columncompiler.js"],"sourcesContent":["// Redshift Column Compiler\n// -------\n\nconst ColumnCompiler_PG = require('../../postgres/schema/pg-columncompiler');\nconst ColumnCompiler = require('../../../schema/columncompiler');\n\nclass ColumnCompiler_Redshift extends ColumnCompiler_PG {\n  constructor() {\n    super(...arguments);\n  }\n\n  // Types:\n  // ------\n\n  bit(column) {\n    return column.length !== false ? `char(${column.length})` : 'char(1)';\n  }\n\n  datetime(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n\n  timestamp(without) {\n    return without ? 'timestamp' : 'timestamptz';\n  }\n\n  // Modifiers:\n  // ------\n  comment(comment) {\n    this.pushAdditional(function () {\n      this.pushQuery(\n        `comment on column ${this.tableCompiler.tableName()}.` +\n          this.formatter.wrap(this.args[0]) +\n          ' is ' +\n          (comment ? `'${comment}'` : 'NULL')\n      );\n    }, comment);\n  }\n}\n\nColumnCompiler_Redshift.prototype.increments = ({ primaryKey = true } = {}) =>\n  'integer identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\nColumnCompiler_Redshift.prototype.bigincrements = ({\n  primaryKey = true,\n} = {}) =>\n  'bigint identity(1,1)' + (primaryKey ? ' primary key' : '') + ' not null';\nColumnCompiler_Redshift.prototype.binary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.blob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.enu = 'varchar(255)';\nColumnCompiler_Redshift.prototype.enum = 'varchar(255)';\nColumnCompiler_Redshift.prototype.json = 'varchar(max)';\nColumnCompiler_Redshift.prototype.jsonb = 'varchar(max)';\nColumnCompiler_Redshift.prototype.longblob = 'varchar(max)';\nColumnCompiler_Redshift.prototype.mediumblob = 'varchar(16777218)';\nColumnCompiler_Redshift.prototype.set = 'text';\nColumnCompiler_Redshift.prototype.text = 'varchar(max)';\nColumnCompiler_Redshift.prototype.tinyblob = 'varchar(256)';\nColumnCompiler_Redshift.prototype.uuid = ColumnCompiler.prototype.uuid;\nColumnCompiler_Redshift.prototype.varbinary = 'varchar(max)';\nColumnCompiler_Redshift.prototype.bigint = 'bigint';\nColumnCompiler_Redshift.prototype.bool = 'boolean';\nColumnCompiler_Redshift.prototype.double = 'double precision';\nColumnCompiler_Redshift.prototype.floating = 'real';\nColumnCompiler_Redshift.prototype.smallint = 'smallint';\nColumnCompiler_Redshift.prototype.tinyint = 'smallint';\n\nmodule.exports = ColumnCompiler_Redshift;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}