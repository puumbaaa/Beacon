{"ast":null,"code":"// Oracle Client\n// -------\nconst {\n  ReturningHelper\n} = require('./utils');\nconst {\n  isConnectionError\n} = require('./utils');\nconst Client = require('../../client');\nconst SchemaCompiler = require('./schema/oracle-compiler');\nconst ColumnBuilder = require('./schema/oracle-columnbuilder');\nconst ColumnCompiler = require('./schema/oracle-columncompiler');\nconst TableCompiler = require('./schema/oracle-tablecompiler');\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\"\n// objects, which extend the base 'lib/query/builder' and\n// 'lib/query/compiler', respectively.\nclass Client_Oracle extends Client {\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  // Return the database for the Oracle client.\n  database() {\n    return this.connectionSettings.database;\n  }\n\n  // Position the bindings for the query.\n  positionBindings(sql) {\n    let questionCount = 0;\n    return sql.replace(/\\?/g, function () {\n      questionCount += 1;\n      return `:${questionCount}`;\n    });\n  }\n  _stream(connection, obj, stream, options) {\n    if (!obj.sql) throw new Error('The query is empty');\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', err => {\n        if (isConnectionError(err)) {\n          connection.__knex__disposed = err;\n        }\n        rejecter(err);\n      });\n      stream.on('end', resolver);\n      const queryStream = connection.queryStream(obj.sql, obj.bindings, options);\n      queryStream.pipe(stream);\n      queryStream.on('error', function (error) {\n        rejecter(error);\n        stream.emit('error', error);\n      });\n    });\n  }\n\n  // Formatter part\n\n  alias(first, second) {\n    return first + ' ' + second;\n  }\n  parameter(value, builder, formatter) {\n    // Returning helper uses always ROWID as string\n    if (value instanceof ReturningHelper && this.driver) {\n      value = new this.driver.OutParam(this.driver.OCCISTRING);\n    } else if (typeof value === 'boolean') {\n      value = value ? 1 : 0;\n    }\n    return super.parameter(value, builder, formatter);\n  }\n}\nObject.assign(Client_Oracle.prototype, {\n  dialect: 'oracle',\n  driverName: 'oracle'\n});\nmodule.exports = Client_Oracle;","map":{"version":3,"names":["ReturningHelper","require","isConnectionError","Client","SchemaCompiler","ColumnBuilder","ColumnCompiler","TableCompiler","Client_Oracle","schemaCompiler","arguments","columnBuilder","columnCompiler","tableCompiler","database","connectionSettings","positionBindings","sql","questionCount","replace","_stream","connection","obj","stream","options","Error","Promise","resolver","rejecter","on","err","__knex__disposed","queryStream","bindings","pipe","error","emit","alias","first","second","parameter","value","builder","formatter","driver","OutParam","OCCISTRING","Object","assign","prototype","dialect","driverName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/oracle/index.js"],"sourcesContent":["// Oracle Client\n// -------\nconst { ReturningHelper } = require('./utils');\nconst { isConnectionError } = require('./utils');\nconst Client = require('../../client');\nconst SchemaCompiler = require('./schema/oracle-compiler');\nconst ColumnBuilder = require('./schema/oracle-columnbuilder');\nconst ColumnCompiler = require('./schema/oracle-columncompiler');\nconst TableCompiler = require('./schema/oracle-tablecompiler');\n\n// Always initialize with the \"QueryBuilder\" and \"QueryCompiler\"\n// objects, which extend the base 'lib/query/builder' and\n// 'lib/query/compiler', respectively.\nclass Client_Oracle extends Client {\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  // Return the database for the Oracle client.\n  database() {\n    return this.connectionSettings.database;\n  }\n\n  // Position the bindings for the query.\n  positionBindings(sql) {\n    let questionCount = 0;\n    return sql.replace(/\\?/g, function () {\n      questionCount += 1;\n      return `:${questionCount}`;\n    });\n  }\n\n  _stream(connection, obj, stream, options) {\n    if (!obj.sql) throw new Error('The query is empty');\n\n    return new Promise(function (resolver, rejecter) {\n      stream.on('error', (err) => {\n        if (isConnectionError(err)) {\n          connection.__knex__disposed = err;\n        }\n        rejecter(err);\n      });\n      stream.on('end', resolver);\n      const queryStream = connection.queryStream(\n        obj.sql,\n        obj.bindings,\n        options\n      );\n      queryStream.pipe(stream);\n      queryStream.on('error', function (error) {\n        rejecter(error);\n        stream.emit('error', error);\n      });\n    });\n  }\n\n  // Formatter part\n\n  alias(first, second) {\n    return first + ' ' + second;\n  }\n\n  parameter(value, builder, formatter) {\n    // Returning helper uses always ROWID as string\n    if (value instanceof ReturningHelper && this.driver) {\n      value = new this.driver.OutParam(this.driver.OCCISTRING);\n    } else if (typeof value === 'boolean') {\n      value = value ? 1 : 0;\n    }\n    return super.parameter(value, builder, formatter);\n  }\n}\n\nObject.assign(Client_Oracle.prototype, {\n  dialect: 'oracle',\n\n  driverName: 'oracle',\n});\n\nmodule.exports = Client_Oracle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}