{"ast":null,"code":"const {\n  NameHelper\n} = require('../../utils');\nclass Trigger {\n  constructor(oracleVersion) {\n    this.nameHelper = new NameHelper(oracleVersion);\n  }\n  renameColumnTrigger(logger, tableName, columnName, to) {\n    const triggerName = this.nameHelper.generateCombinedName(logger, 'autoinc_trg', tableName);\n    const sequenceName = this.nameHelper.generateCombinedName(logger, 'seq', tableName);\n    return `DECLARE ` + `PK_NAME VARCHAR(200); ` + `IS_AUTOINC NUMBER := 0; ` + `BEGIN` + `  EXECUTE IMMEDIATE ('ALTER TABLE \"${tableName}\" RENAME COLUMN \"${columnName}\" TO \"${to}\"');` + `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` + `  IF (IS_AUTOINC > 0) THEN` + `    SELECT cols.column_name INTO PK_NAME` + `    FROM all_constraints cons, all_cons_columns cols` + `    WHERE cons.constraint_type = 'P'` + `    AND cons.constraint_name = cols.constraint_name` + `    AND cons.owner = cols.owner` + `    AND cols.table_name = '${tableName}';` + `    IF ('${to}' = PK_NAME) THEN` + `      EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` + `      EXECUTE IMMEDIATE ('create or replace trigger \"${triggerName}\"` + `      BEFORE INSERT on \"${tableName}\" for each row` + `        declare` + `        checking number := 1;` + `        begin` + `          if (:new.\"${to}\" is null) then` + `            while checking >= 1 loop` + `              select \"${sequenceName}\".nextval into :new.\"${to}\" from dual;` + `              select count(\"${to}\") into checking from \"${tableName}\"` + `              where \"${to}\" = :new.\"${to}\";` + `            end loop;` + `          end if;` + `        end;');` + `    end if;` + `  end if;` + `END;`;\n  }\n  createAutoIncrementTrigger(logger, tableName, schemaName) {\n    const tableQuoted = `\"${tableName}\"`;\n    const tableUnquoted = tableName;\n    const schemaQuoted = schemaName ? `\"${schemaName}\".` : '';\n    const constraintOwner = schemaName ? `'${schemaName}'` : 'cols.owner';\n    const triggerName = this.nameHelper.generateCombinedName(logger, 'autoinc_trg', tableName);\n    const sequenceNameUnquoted = this.nameHelper.generateCombinedName(logger, 'seq', tableName);\n    const sequenceNameQuoted = `\"${sequenceNameUnquoted}\"`;\n    return `DECLARE ` + `PK_NAME VARCHAR(200); ` + `BEGIN` + `  EXECUTE IMMEDIATE ('CREATE SEQUENCE ${schemaQuoted}${sequenceNameQuoted}');` + `  SELECT cols.column_name INTO PK_NAME` +\n    // TODO : support autoincrement on table with multiple primary keys\n    `  FROM all_constraints cons, all_cons_columns cols` + `  WHERE cons.constraint_type = 'P'` + `  AND cons.constraint_name = cols.constraint_name` + `  AND cons.owner = ${constraintOwner}` + `  AND cols.table_name = '${tableUnquoted}';` + `  execute immediate ('create or replace trigger ${schemaQuoted}\"${triggerName}\"` + `  BEFORE INSERT on ${schemaQuoted}${tableQuoted}` + `  for each row` + `  declare` + `  checking number := 1;` + `  begin` + `    if (:new.\"' || PK_NAME || '\" is null) then` + `      while checking >= 1 loop` + `        select ${schemaQuoted}${sequenceNameQuoted}.nextval into :new.\"' || PK_NAME || '\" from dual;` + `        select count(\"' || PK_NAME || '\") into checking from ${schemaQuoted}${tableQuoted}` + `        where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` + `      end loop;` + `    end if;` + `  end;'); ` + `END;`;\n  }\n  renameTableAndAutoIncrementTrigger(logger, tableName, to) {\n    const triggerName = this.nameHelper.generateCombinedName(logger, 'autoinc_trg', tableName);\n    const sequenceName = this.nameHelper.generateCombinedName(logger, 'seq', tableName);\n    const toTriggerName = this.nameHelper.generateCombinedName(logger, 'autoinc_trg', to);\n    const toSequenceName = this.nameHelper.generateCombinedName(logger, 'seq', to);\n    return `DECLARE ` + `PK_NAME VARCHAR(200); ` + `IS_AUTOINC NUMBER := 0; ` + `BEGIN` + `  EXECUTE IMMEDIATE ('RENAME \"${tableName}\" TO \"${to}\"');` + `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` + `  IF (IS_AUTOINC > 0) THEN` + `    EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` + `    EXECUTE IMMEDIATE ('RENAME \"${sequenceName}\" TO \"${toSequenceName}\"');` + `    SELECT cols.column_name INTO PK_NAME` + `    FROM all_constraints cons, all_cons_columns cols` + `    WHERE cons.constraint_type = 'P'` + `    AND cons.constraint_name = cols.constraint_name` + `    AND cons.owner = cols.owner` + `    AND cols.table_name = '${to}';` + `    EXECUTE IMMEDIATE ('create or replace trigger \"${toTriggerName}\"` + `    BEFORE INSERT on \"${to}\" for each row` + `      declare` + `      checking number := 1;` + `      begin` + `        if (:new.\"' || PK_NAME || '\" is null) then` + `          while checking >= 1 loop` + `            select \"${toSequenceName}\".nextval into :new.\"' || PK_NAME || '\" from dual;` + `            select count(\"' || PK_NAME || '\") into checking from \"${to}\"` + `            where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` + `          end loop;` + `        end if;` + `      end;');` + `  end if;` + `END;`;\n  }\n}\nmodule.exports = Trigger;","map":{"version":3,"names":["NameHelper","require","Trigger","constructor","oracleVersion","nameHelper","renameColumnTrigger","logger","tableName","columnName","to","triggerName","generateCombinedName","sequenceName","createAutoIncrementTrigger","schemaName","tableQuoted","tableUnquoted","schemaQuoted","constraintOwner","sequenceNameUnquoted","sequenceNameQuoted","renameTableAndAutoIncrementTrigger","toTriggerName","toSequenceName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/oracle/schema/internal/trigger.js"],"sourcesContent":["const { NameHelper } = require('../../utils');\n\nclass Trigger {\n  constructor(oracleVersion) {\n    this.nameHelper = new NameHelper(oracleVersion);\n  }\n\n  renameColumnTrigger(logger, tableName, columnName, to) {\n    const triggerName = this.nameHelper.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      tableName\n    );\n    const sequenceName = this.nameHelper.generateCombinedName(\n      logger,\n      'seq',\n      tableName\n    );\n    return (\n      `DECLARE ` +\n      `PK_NAME VARCHAR(200); ` +\n      `IS_AUTOINC NUMBER := 0; ` +\n      `BEGIN` +\n      `  EXECUTE IMMEDIATE ('ALTER TABLE \"${tableName}\" RENAME COLUMN \"${columnName}\" TO \"${to}\"');` +\n      `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` +\n      `  IF (IS_AUTOINC > 0) THEN` +\n      `    SELECT cols.column_name INTO PK_NAME` +\n      `    FROM all_constraints cons, all_cons_columns cols` +\n      `    WHERE cons.constraint_type = 'P'` +\n      `    AND cons.constraint_name = cols.constraint_name` +\n      `    AND cons.owner = cols.owner` +\n      `    AND cols.table_name = '${tableName}';` +\n      `    IF ('${to}' = PK_NAME) THEN` +\n      `      EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` +\n      `      EXECUTE IMMEDIATE ('create or replace trigger \"${triggerName}\"` +\n      `      BEFORE INSERT on \"${tableName}\" for each row` +\n      `        declare` +\n      `        checking number := 1;` +\n      `        begin` +\n      `          if (:new.\"${to}\" is null) then` +\n      `            while checking >= 1 loop` +\n      `              select \"${sequenceName}\".nextval into :new.\"${to}\" from dual;` +\n      `              select count(\"${to}\") into checking from \"${tableName}\"` +\n      `              where \"${to}\" = :new.\"${to}\";` +\n      `            end loop;` +\n      `          end if;` +\n      `        end;');` +\n      `    end if;` +\n      `  end if;` +\n      `END;`\n    );\n  }\n\n  createAutoIncrementTrigger(logger, tableName, schemaName) {\n    const tableQuoted = `\"${tableName}\"`;\n    const tableUnquoted = tableName;\n    const schemaQuoted = schemaName ? `\"${schemaName}\".` : '';\n    const constraintOwner = schemaName ? `'${schemaName}'` : 'cols.owner';\n    const triggerName = this.nameHelper.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      tableName\n    );\n    const sequenceNameUnquoted = this.nameHelper.generateCombinedName(\n      logger,\n      'seq',\n      tableName\n    );\n    const sequenceNameQuoted = `\"${sequenceNameUnquoted}\"`;\n    return (\n      `DECLARE ` +\n      `PK_NAME VARCHAR(200); ` +\n      `BEGIN` +\n      `  EXECUTE IMMEDIATE ('CREATE SEQUENCE ${schemaQuoted}${sequenceNameQuoted}');` +\n      `  SELECT cols.column_name INTO PK_NAME` + // TODO : support autoincrement on table with multiple primary keys\n      `  FROM all_constraints cons, all_cons_columns cols` +\n      `  WHERE cons.constraint_type = 'P'` +\n      `  AND cons.constraint_name = cols.constraint_name` +\n      `  AND cons.owner = ${constraintOwner}` +\n      `  AND cols.table_name = '${tableUnquoted}';` +\n      `  execute immediate ('create or replace trigger ${schemaQuoted}\"${triggerName}\"` +\n      `  BEFORE INSERT on ${schemaQuoted}${tableQuoted}` +\n      `  for each row` +\n      `  declare` +\n      `  checking number := 1;` +\n      `  begin` +\n      `    if (:new.\"' || PK_NAME || '\" is null) then` +\n      `      while checking >= 1 loop` +\n      `        select ${schemaQuoted}${sequenceNameQuoted}.nextval into :new.\"' || PK_NAME || '\" from dual;` +\n      `        select count(\"' || PK_NAME || '\") into checking from ${schemaQuoted}${tableQuoted}` +\n      `        where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` +\n      `      end loop;` +\n      `    end if;` +\n      `  end;'); ` +\n      `END;`\n    );\n  }\n\n  renameTableAndAutoIncrementTrigger(logger, tableName, to) {\n    const triggerName = this.nameHelper.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      tableName\n    );\n    const sequenceName = this.nameHelper.generateCombinedName(\n      logger,\n      'seq',\n      tableName\n    );\n    const toTriggerName = this.nameHelper.generateCombinedName(\n      logger,\n      'autoinc_trg',\n      to\n    );\n    const toSequenceName = this.nameHelper.generateCombinedName(\n      logger,\n      'seq',\n      to\n    );\n    return (\n      `DECLARE ` +\n      `PK_NAME VARCHAR(200); ` +\n      `IS_AUTOINC NUMBER := 0; ` +\n      `BEGIN` +\n      `  EXECUTE IMMEDIATE ('RENAME \"${tableName}\" TO \"${to}\"');` +\n      `  SELECT COUNT(*) INTO IS_AUTOINC from \"USER_TRIGGERS\" where trigger_name = '${triggerName}';` +\n      `  IF (IS_AUTOINC > 0) THEN` +\n      `    EXECUTE IMMEDIATE ('DROP TRIGGER \"${triggerName}\"');` +\n      `    EXECUTE IMMEDIATE ('RENAME \"${sequenceName}\" TO \"${toSequenceName}\"');` +\n      `    SELECT cols.column_name INTO PK_NAME` +\n      `    FROM all_constraints cons, all_cons_columns cols` +\n      `    WHERE cons.constraint_type = 'P'` +\n      `    AND cons.constraint_name = cols.constraint_name` +\n      `    AND cons.owner = cols.owner` +\n      `    AND cols.table_name = '${to}';` +\n      `    EXECUTE IMMEDIATE ('create or replace trigger \"${toTriggerName}\"` +\n      `    BEFORE INSERT on \"${to}\" for each row` +\n      `      declare` +\n      `      checking number := 1;` +\n      `      begin` +\n      `        if (:new.\"' || PK_NAME || '\" is null) then` +\n      `          while checking >= 1 loop` +\n      `            select \"${toSequenceName}\".nextval into :new.\"' || PK_NAME || '\" from dual;` +\n      `            select count(\"' || PK_NAME || '\") into checking from \"${to}\"` +\n      `            where \"' || PK_NAME || '\" = :new.\"' || PK_NAME || '\";` +\n      `          end loop;` +\n      `        end if;` +\n      `      end;');` +\n      `  end if;` +\n      `END;`\n    );\n  }\n}\n\nmodule.exports = Trigger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}