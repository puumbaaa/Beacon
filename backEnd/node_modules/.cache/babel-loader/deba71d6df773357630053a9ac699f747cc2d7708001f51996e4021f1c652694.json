{"ast":null,"code":"const ColumnCompiler = require('../../../schema/columncompiler');\n\n// Column Compiler\n// -------\n\nclass ColumnCompiler_SQLite3 extends ColumnCompiler {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['nullable', 'defaultTo'];\n    this._addCheckModifiers();\n  }\n\n  // Types\n  // -------\n\n  enu(allowed) {\n    return `text check (${this.formatter.wrap(this.args[0])} in ('${allowed.join(\"', '\")}'))`;\n  }\n  _pushAlterCheckQuery(checkPredicate, constraintName) {\n    throw new Error(`Alter table with to add constraints is not permitted in SQLite`);\n  }\n  checkRegex(regexes, constraintName) {\n    return this._check(`${this.formatter.wrap(this.getColumnName())} REGEXP ${this.client._escapeBinding(regexes)}`, constraintName);\n  }\n}\nColumnCompiler_SQLite3.prototype.json = 'json';\nColumnCompiler_SQLite3.prototype.jsonb = 'json';\nColumnCompiler_SQLite3.prototype.double = ColumnCompiler_SQLite3.prototype.decimal = ColumnCompiler_SQLite3.prototype.floating = 'float';\nColumnCompiler_SQLite3.prototype.timestamp = 'datetime';\n// autoincrement without primary key is a syntax error in SQLite, so it's necessary\nColumnCompiler_SQLite3.prototype.increments = ColumnCompiler_SQLite3.prototype.bigincrements = 'integer not null primary key autoincrement';\nmodule.exports = ColumnCompiler_SQLite3;","map":{"version":3,"names":["ColumnCompiler","require","ColumnCompiler_SQLite3","constructor","arguments","modifiers","_addCheckModifiers","enu","allowed","formatter","wrap","args","join","_pushAlterCheckQuery","checkPredicate","constraintName","Error","checkRegex","regexes","_check","getColumnName","client","_escapeBinding","prototype","json","jsonb","double","decimal","floating","timestamp","increments","bigincrements","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/sqlite3/schema/sqlite-columncompiler.js"],"sourcesContent":["const ColumnCompiler = require('../../../schema/columncompiler');\n\n// Column Compiler\n// -------\n\nclass ColumnCompiler_SQLite3 extends ColumnCompiler {\n  constructor() {\n    super(...arguments);\n    this.modifiers = ['nullable', 'defaultTo'];\n    this._addCheckModifiers();\n  }\n\n  // Types\n  // -------\n\n  enu(allowed) {\n    return `text check (${this.formatter.wrap(\n      this.args[0]\n    )} in ('${allowed.join(\"', '\")}'))`;\n  }\n\n  _pushAlterCheckQuery(checkPredicate, constraintName) {\n    throw new Error(\n      `Alter table with to add constraints is not permitted in SQLite`\n    );\n  }\n\n  checkRegex(regexes, constraintName) {\n    return this._check(\n      `${this.formatter.wrap(\n        this.getColumnName()\n      )} REGEXP ${this.client._escapeBinding(regexes)}`,\n      constraintName\n    );\n  }\n}\n\nColumnCompiler_SQLite3.prototype.json = 'json';\nColumnCompiler_SQLite3.prototype.jsonb = 'json';\nColumnCompiler_SQLite3.prototype.double =\n  ColumnCompiler_SQLite3.prototype.decimal =\n  ColumnCompiler_SQLite3.prototype.floating =\n    'float';\nColumnCompiler_SQLite3.prototype.timestamp = 'datetime';\n// autoincrement without primary key is a syntax error in SQLite, so it's necessary\nColumnCompiler_SQLite3.prototype.increments =\n  ColumnCompiler_SQLite3.prototype.bigincrements =\n    'integer not null primary key autoincrement';\n\nmodule.exports = ColumnCompiler_SQLite3;\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,gCAAgC,CAAC;;AAEhE;AACA;;AAEA,MAAMC,sBAAsB,SAASF,cAAc,CAAC;EAClDG,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC;IAC1C,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B;;EAEA;EACA;;EAEAC,GAAGA,CAACC,OAAO,EAAE;IACX,OAAO,eAAe,IAAI,CAACC,SAAS,CAACC,IAAI,CACvC,IAAI,CAACC,IAAI,CAAC,CAAC,CACb,CAAC,SAASH,OAAO,CAACI,IAAI,CAAC,MAAM,CAAC,KAAK;EACrC;EAEAC,oBAAoBA,CAACC,cAAc,EAAEC,cAAc,EAAE;IACnD,MAAM,IAAIC,KAAK,CACb,gEACF,CAAC;EACH;EAEAC,UAAUA,CAACC,OAAO,EAAEH,cAAc,EAAE;IAClC,OAAO,IAAI,CAACI,MAAM,CAChB,GAAG,IAAI,CAACV,SAAS,CAACC,IAAI,CACpB,IAAI,CAACU,aAAa,CAAC,CACrB,CAAC,WAAW,IAAI,CAACC,MAAM,CAACC,cAAc,CAACJ,OAAO,CAAC,EAAE,EACjDH,cACF,CAAC;EACH;AACF;AAEAb,sBAAsB,CAACqB,SAAS,CAACC,IAAI,GAAG,MAAM;AAC9CtB,sBAAsB,CAACqB,SAAS,CAACE,KAAK,GAAG,MAAM;AAC/CvB,sBAAsB,CAACqB,SAAS,CAACG,MAAM,GACrCxB,sBAAsB,CAACqB,SAAS,CAACI,OAAO,GACxCzB,sBAAsB,CAACqB,SAAS,CAACK,QAAQ,GACvC,OAAO;AACX1B,sBAAsB,CAACqB,SAAS,CAACM,SAAS,GAAG,UAAU;AACvD;AACA3B,sBAAsB,CAACqB,SAAS,CAACO,UAAU,GACzC5B,sBAAsB,CAACqB,SAAS,CAACQ,aAAa,GAC5C,4CAA4C;AAEhDC,MAAM,CAACC,OAAO,GAAG/B,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}