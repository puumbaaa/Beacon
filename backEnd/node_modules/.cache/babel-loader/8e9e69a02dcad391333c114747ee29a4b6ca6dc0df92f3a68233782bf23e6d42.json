{"ast":null,"code":"// Redshift\n// -------\nconst Client_PG = require('../postgres');\nconst map = require('lodash/map');\nconst Transaction = require('./transaction');\nconst QueryCompiler = require('./query/redshift-querycompiler');\nconst ColumnBuilder = require('./schema/redshift-columnbuilder');\nconst ColumnCompiler = require('./schema/redshift-columncompiler');\nconst TableCompiler = require('./schema/redshift-tablecompiler');\nconst SchemaCompiler = require('./schema/redshift-compiler');\nconst ViewCompiler = require('./schema/redshift-viewcompiler');\nclass Client_Redshift extends Client_PG {\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n  _driver() {\n    return require('pg');\n  }\n\n  // Ensures the response is returned in the same format as other clients.\n  processResponse(obj, runner) {\n    const resp = obj.response;\n    if (obj.output) return obj.output.call(runner, resp);\n    if (obj.method === 'raw') return resp;\n    if (resp.command === 'SELECT') {\n      if (obj.method === 'first') return resp.rows[0];\n      if (obj.method === 'pluck') return map(resp.rows, obj.pluck);\n      return resp.rows;\n    }\n    if (resp.command === 'INSERT' || resp.command === 'UPDATE' || resp.command === 'DELETE') {\n      return resp.rowCount;\n    }\n    return resp;\n  }\n  toPathForJson(jsonPath, builder, bindingsHolder) {\n    return jsonPath.replace(/^(\\$\\.)/, '') // remove the first dollar\n    .split('.').map(function (v) {\n      return this.parameter(v, builder, bindingsHolder);\n    }.bind(this)).join(', ');\n  }\n}\nObject.assign(Client_Redshift.prototype, {\n  dialect: 'redshift',\n  driverName: 'pg-redshift'\n});\nmodule.exports = Client_Redshift;","map":{"version":3,"names":["Client_PG","require","map","Transaction","QueryCompiler","ColumnBuilder","ColumnCompiler","TableCompiler","SchemaCompiler","ViewCompiler","Client_Redshift","transaction","arguments","queryCompiler","builder","formatter","columnBuilder","columnCompiler","tableCompiler","schemaCompiler","viewCompiler","_driver","processResponse","obj","runner","resp","response","output","call","method","command","rows","pluck","rowCount","toPathForJson","jsonPath","bindingsHolder","replace","split","v","parameter","bind","join","Object","assign","prototype","dialect","driverName","module","exports"],"sources":["C:/Users/momo1/Documents/@DevPerso/Beacon/node_modules/knex/lib/dialects/redshift/index.js"],"sourcesContent":["// Redshift\n// -------\nconst Client_PG = require('../postgres');\nconst map = require('lodash/map');\n\nconst Transaction = require('./transaction');\nconst QueryCompiler = require('./query/redshift-querycompiler');\nconst ColumnBuilder = require('./schema/redshift-columnbuilder');\nconst ColumnCompiler = require('./schema/redshift-columncompiler');\nconst TableCompiler = require('./schema/redshift-tablecompiler');\nconst SchemaCompiler = require('./schema/redshift-compiler');\nconst ViewCompiler = require('./schema/redshift-viewcompiler');\n\nclass Client_Redshift extends Client_PG {\n  transaction() {\n    return new Transaction(this, ...arguments);\n  }\n\n  queryCompiler(builder, formatter) {\n    return new QueryCompiler(this, builder, formatter);\n  }\n\n  columnBuilder() {\n    return new ColumnBuilder(this, ...arguments);\n  }\n\n  columnCompiler() {\n    return new ColumnCompiler(this, ...arguments);\n  }\n\n  tableCompiler() {\n    return new TableCompiler(this, ...arguments);\n  }\n\n  schemaCompiler() {\n    return new SchemaCompiler(this, ...arguments);\n  }\n\n  viewCompiler() {\n    return new ViewCompiler(this, ...arguments);\n  }\n\n  _driver() {\n    return require('pg');\n  }\n\n  // Ensures the response is returned in the same format as other clients.\n  processResponse(obj, runner) {\n    const resp = obj.response;\n    if (obj.output) return obj.output.call(runner, resp);\n    if (obj.method === 'raw') return resp;\n    if (resp.command === 'SELECT') {\n      if (obj.method === 'first') return resp.rows[0];\n      if (obj.method === 'pluck') return map(resp.rows, obj.pluck);\n      return resp.rows;\n    }\n    if (\n      resp.command === 'INSERT' ||\n      resp.command === 'UPDATE' ||\n      resp.command === 'DELETE'\n    ) {\n      return resp.rowCount;\n    }\n    return resp;\n  }\n\n  toPathForJson(jsonPath, builder, bindingsHolder) {\n    return jsonPath\n      .replace(/^(\\$\\.)/, '') // remove the first dollar\n      .split('.')\n      .map(\n        function (v) {\n          return this.parameter(v, builder, bindingsHolder);\n        }.bind(this)\n      )\n      .join(', ');\n  }\n}\n\nObject.assign(Client_Redshift.prototype, {\n  dialect: 'redshift',\n\n  driverName: 'pg-redshift',\n});\n\nmodule.exports = Client_Redshift;\n"],"mappings":"AAAA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAY,CAAC;AAEjC,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMG,aAAa,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AAC/D,MAAMI,aAAa,GAAGJ,OAAO,CAAC,iCAAiC,CAAC;AAChE,MAAMK,cAAc,GAAGL,OAAO,CAAC,kCAAkC,CAAC;AAClE,MAAMM,aAAa,GAAGN,OAAO,CAAC,iCAAiC,CAAC;AAChE,MAAMO,cAAc,GAAGP,OAAO,CAAC,4BAA4B,CAAC;AAC5D,MAAMQ,YAAY,GAAGR,OAAO,CAAC,gCAAgC,CAAC;AAE9D,MAAMS,eAAe,SAASV,SAAS,CAAC;EACtCW,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAIR,WAAW,CAAC,IAAI,EAAE,GAAGS,SAAS,CAAC;EAC5C;EAEAC,aAAaA,CAACC,OAAO,EAAEC,SAAS,EAAE;IAChC,OAAO,IAAIX,aAAa,CAAC,IAAI,EAAEU,OAAO,EAAEC,SAAS,CAAC;EACpD;EAEAC,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIX,aAAa,CAAC,IAAI,EAAE,GAAGO,SAAS,CAAC;EAC9C;EAEAK,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIX,cAAc,CAAC,IAAI,EAAE,GAAGM,SAAS,CAAC;EAC/C;EAEAM,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIX,aAAa,CAAC,IAAI,EAAE,GAAGK,SAAS,CAAC;EAC9C;EAEAO,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIX,cAAc,CAAC,IAAI,EAAE,GAAGI,SAAS,CAAC;EAC/C;EAEAQ,YAAYA,CAAA,EAAG;IACb,OAAO,IAAIX,YAAY,CAAC,IAAI,EAAE,GAAGG,SAAS,CAAC;EAC7C;EAEAS,OAAOA,CAAA,EAAG;IACR,OAAOpB,OAAO,CAAC,IAAI,CAAC;EACtB;;EAEA;EACAqB,eAAeA,CAACC,GAAG,EAAEC,MAAM,EAAE;IAC3B,MAAMC,IAAI,GAAGF,GAAG,CAACG,QAAQ;IACzB,IAAIH,GAAG,CAACI,MAAM,EAAE,OAAOJ,GAAG,CAACI,MAAM,CAACC,IAAI,CAACJ,MAAM,EAAEC,IAAI,CAAC;IACpD,IAAIF,GAAG,CAACM,MAAM,KAAK,KAAK,EAAE,OAAOJ,IAAI;IACrC,IAAIA,IAAI,CAACK,OAAO,KAAK,QAAQ,EAAE;MAC7B,IAAIP,GAAG,CAACM,MAAM,KAAK,OAAO,EAAE,OAAOJ,IAAI,CAACM,IAAI,CAAC,CAAC,CAAC;MAC/C,IAAIR,GAAG,CAACM,MAAM,KAAK,OAAO,EAAE,OAAO3B,GAAG,CAACuB,IAAI,CAACM,IAAI,EAAER,GAAG,CAACS,KAAK,CAAC;MAC5D,OAAOP,IAAI,CAACM,IAAI;IAClB;IACA,IACEN,IAAI,CAACK,OAAO,KAAK,QAAQ,IACzBL,IAAI,CAACK,OAAO,KAAK,QAAQ,IACzBL,IAAI,CAACK,OAAO,KAAK,QAAQ,EACzB;MACA,OAAOL,IAAI,CAACQ,QAAQ;IACtB;IACA,OAAOR,IAAI;EACb;EAEAS,aAAaA,CAACC,QAAQ,EAAErB,OAAO,EAAEsB,cAAc,EAAE;IAC/C,OAAOD,QAAQ,CACZE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAAA,CACvBC,KAAK,CAAC,GAAG,CAAC,CACVpC,GAAG,CACF,UAAUqC,CAAC,EAAE;MACX,OAAO,IAAI,CAACC,SAAS,CAACD,CAAC,EAAEzB,OAAO,EAAEsB,cAAc,CAAC;IACnD,CAAC,CAACK,IAAI,CAAC,IAAI,CACb,CAAC,CACAC,IAAI,CAAC,IAAI,CAAC;EACf;AACF;AAEAC,MAAM,CAACC,MAAM,CAAClC,eAAe,CAACmC,SAAS,EAAE;EACvCC,OAAO,EAAE,UAAU;EAEnBC,UAAU,EAAE;AACd,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGvC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}